C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE GUDPBC
OBJECT MODULE PLACED IN .\gudpbc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mgs2wifi\gudpbc.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCD
                    -IR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\m
                    -ping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\s
                    -rc\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFINE
                    -(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\gudpbc.lst) OBJECT(.\gudpbc.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2011       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: gudpbc.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: gudpbc.c,v $
  18           *
  19           *=============================================================================
  20           */
  21          
  22          /* INCLUDE FILE DECLARATIONS */
  23          #include "mcpu.h"
  24          #include "adapter.h"
  25          #include "gudpbc.h"
  26          #include "gs2w.h"
  27          #include "tcpip.h"
  28          #include "uip.h"
  29          #include "mstimer.h"
  30          #include "stoe.h"
  31          #include "uart0.h"
  32          #include "gconfig.h"
  33          #include "ax22000.h"
  34          #include "mac.h"
  35          #include "printd.h"
  36          #include <string.h>
  37          
  38          /* NAMING CONSTANT DECLARATIONS */
  39          #define GUDPBC_MAX_CONNS                        1
  40          #define GUDPBC_NO_NEW_CONN                      0xFF
  41          
  42          #define GUDPBC_STATE_FREE                       0
  43          #define GUDPBC_STATE_WAIT                       1
  44          #define GUDPBC_STATE_CONNECTED          2
  45          
  46          /* GLOBAL VARIABLES DECLARATIONS */
  47          extern GCONFIG_CFG_PKT gudpuc_ConfigRxPkt;
  48          
  49          /* LOCAL VARIABLES DECLARATIONS */
  50          static GUDPBC_CONN gudpbc_Conns[GUDPBC_MAX_CONNS];
  51          static U8_T gudpbc_InterAppId;
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 2   

  52          
  53          /* LOCAL SUBPROGRAM DECLARATIONS */
  54          void gudpbc_HandleSearchReq(U8_T XDATA* pData, U8_T id);
  55          void gudpbc_HandleSetReq(U8_T XDATA* pData, U16_T length, U8_T id);
  56          void gudpbc_HandleUpgradeReq(U8_T XDATA* pData, U16_T length, U8_T id);
  57          void gudpbc_HandleResetReq(U8_T id);
  58          void gudpbc_HandleRebootReq(U8_T XDATA* pData, U16_T length, U8_T id);
  59          void gudpbc_RebootDevice(void);
  60          
  61          /*
  62           * ----------------------------------------------------------------------------
  63           * Function Name: GUDPBC_Task
  64           * Purpose: 
  65           * Params:
  66           * Returns:
  67           * Note:
  68           * ----------------------------------------------------------------------------
  69           */
  70          void GUDPBC_Task(void)
  71          {
  72   1      
  73   1      } /* End of GUDPBC_Task() */
  74          
  75          /*
  76           * ----------------------------------------------------------------------------
  77           * Function Name: GUDPBC_Init()
  78           * Purpose: Initialization
  79           * Params:
  80           * Returns:
  81           * Note:
  82           * ----------------------------------------------------------------------------
  83           */
  84          void GUDPBC_Init(U16_T localPort)
  85          {
  86   1              U8_T    i;
  87   1      
  88   1              printd("UDP broadcast init ok.\n\r");
  89   1      
  90   1              for (i = 0; i < GUDPBC_MAX_CONNS; i++)
  91   1                      gudpbc_Conns[i].State = GUDPBC_STATE_FREE;
  92   1      
  93   1              gudpbc_InterAppId = TCPIP_Bind(GUDPBC_NewConn, GUDPBC_Event, GUDPBC_Receive);
  94   1              
  95   1              /* unicast packet */
  96   1              TCPIP_UdpListen(localPort, gudpbc_InterAppId);
  97   1      } /* End of GUDPBC_Init() */
  98          
  99          /*
 100           * ----------------------------------------------------------------------------
 101           * Function Name: GUDPBC_NewConn
 102           * Purpose: 
 103           * Params:
 104           * Returns:
 105           * Note:
 106           * ----------------------------------------------------------------------------
 107           */
 108          U8_T GUDPBC_NewConn(U32_T XDATA* pip, U16_T remotePort, U8_T socket)
 109          {
 110   1              U8_T    i;
 111   1      
 112   1              pip = pip;
 113   1              remotePort = remotePort;
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 3   

 114   1      
 115   1              printd("GUDPBC_NewConn():: socket=%bu, remoteport=%u, pip=%lu\r\n", socket, remotePort, *pip);
 116   1      
 117   1              for (i = 0; i < GUDPBC_MAX_CONNS; i++)
 118   1              {
 119   2                      gudpbc_Conns[i].State = GUDPBC_STATE_CONNECTED;
 120   2                      gudpbc_Conns[i].UdpSocket = socket;
 121   2                  printd("        id=%bu\r\n", i);
 122   2                      return i;
 123   2              }
 124   1              
 125   1              return GUDPBC_NO_NEW_CONN;
 126   1      
 127   1      } /* End of GUDPBC_NewConn() */
 128          
 129          /*
 130           * ----------------------------------------------------------------------------
 131           * Function Name: GUDPBC_Event
 132           * Purpose: 
 133           * Params:
 134           * Returns:
 135           * Note:
 136           * ----------------------------------------------------------------------------
 137           */
 138          void GUDPBC_Event(U8_T id, U8_T event)
 139          {
 140   1          printd("GUDPBC_Event():: id=%bu,event=%bu\r\n", id, event);
 141   1              gudpbc_Conns[id].State = event;
 142   1      
 143   1      } /* End of GUDPBC_Event() */
 144          
 145          /*
 146           * ----------------------------------------------------------------------------
 147           * Function Name: GUDPBC_Receive
 148           * Purpose: 
 149           * Params:
 150           * Returns:
 151           * Note:
 152           * ----------------------------------------------------------------------------
 153           */
 154          void GUDPBC_Receive(U8_T XDATA* pData, U16_T length, U8_T id)
 155          {
 156   1              BOOL bValidReq = FALSE;
 157   1              GCONFIG_MAC_ADDR macAddr;
 158   1      
 159   1          printd("GUDPBC_Receive():: id=%bu, length=%bu\r\n", id, length);
 160   1              if (length == 9 || length == sizeof(gudpuc_ConfigRxPkt)) // 9: search request packet
 161   1              {
 162   2                      if (length == 9)
 163   2                              memcpy(&gudpuc_ConfigRxPkt, pData, 9);
 164   2                      else
 165   2                              memcpy(&gudpuc_ConfigRxPkt, pData, sizeof(gudpuc_ConfigRxPkt));
 166   2      
 167   2                      if (memcmp(&GCONFIG_Gid, pData, sizeof(GCONFIG_GID)) == 0) // Valid data
 168   2                      {
 169   3                              macAddr = GCONFIG_GetMacAddress();      
 170   3      
 171   3                              if (length == sizeof(gudpuc_ConfigRxPkt))
 172   3                              {
 173   4                                      if (memcmp(&gudpuc_ConfigRxPkt.MacAddr, &macAddr, sizeof(macAddr)) == 0)
 174   4                                              bValidReq = TRUE;
 175   4                              }
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 4   

 176   3      
 177   3                              switch (gudpuc_ConfigRxPkt.Opcode)
 178   3                              {
 179   4                              case GCONFIG_OPCODE_SEARCH_REQ:
 180   4                                      {
 181   5                                              gudpbc_HandleSearchReq(pData, id);
 182   5                                      }
 183   4                                      break;
 184   4      
 185   4                              case GCONFIG_OPCODE_SET_REQ:
 186   4                                      {                                       
 187   5                                              if (bValidReq)
 188   5                                                      gudpbc_HandleSetReq(pData, length, id);
 189   5                                      }
 190   4                                      break;
 191   4      
 192   4                              case GCONFIG_OPCODE_UPGRADE_REQ:
 193   4                                      {
 194   5                                              if (bValidReq)
 195   5                                                      gudpbc_HandleUpgradeReq(pData, length, id);
 196   5                                      }
 197   4                                      break;
 198   4      
 199   4                              case GCONFIG_OPCODE_RESET_REQ:
 200   4                                      {
 201   5                                              if (bValidReq)
 202   5                                                      gudpbc_HandleResetReq(id);
 203   5                                      }
 204   4                                      break;
 205   4                              case GCONFIG_OPCODE_REBOOT_REQ:
 206   4                                      {
 207   5                                              if (bValidReq)
 208   5                                                      gudpbc_HandleRebootReq(pData, length, id);
 209   5                                      }
 210   4                                      break;
 211   4      
 212   4                              default:
 213   4                                      break;  
 214   4                              }
 215   3                      }
 216   2              }
 217   1      
 218   1          TCPIP_UdpClose(gudpbc_Conns[id].UdpSocket);
 219   1      } /* End of GUDPBC_Receive() */
 220          
 221          /*
 222           * ----------------------------------------------------------------------------
 223           * Function Name: gudpbc_HandleSearchReq
 224           * Purpose: 
 225           * Params:
 226           * Returns:
 227           * Note:
 228           * ----------------------------------------------------------------------------
 229           */
 230          void gudpbc_HandleSearchReq(U8_T XDATA* pData, U8_T id)
 231          {       
 232   1              U16_T           length, headerLen, tmpShort;
 233   1              U8_T XDATA*     pRcvBuf;
 234   1      #if STOE_TRANSPARENT
 235   1              U8_T XDATA*     pMacAddr;
 236   1      #endif
 237   1              uip_udpip_hdr XDATA*    pUdpHeader;
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 5   

 238   1      
 239   1          printd("gudpbc_HandleSearchReq()::, id=%bu, size=%u\r\n", id, sizeof(gudpuc_ConfigRxPkt));
 240   1      
 241   1      
 242   1              GCONFIG_GetConfigPacket(&gudpuc_ConfigRxPkt);
 243   1              gudpuc_ConfigRxPkt.Opcode = GCONFIG_OPCODE_SEARCH_ACK;
 244   1              id = id;
 245   1      
 246   1              pRcvBuf = TCPIP_GetRcvBuffer();
 247   1              headerLen = (U16_T)pData - (U16_T)pRcvBuf;
 248   1              length = sizeof(gudpuc_ConfigRxPkt) + headerLen;
 249   1      
 250   1      #if STOE_TRANSPARENT
 251   1              /* ethernet header */
 252   1              pMacAddr = MAC_GetMacAddr();
 253   1              pRcvBuf[0] = 0xFF;
 254   1              pRcvBuf[1] = 0xFF;
 255   1              pRcvBuf[2] = 0xFF;
 256   1              pRcvBuf[3] = 0xFF;
 257   1              pRcvBuf[4] = 0xFF;
 258   1              pRcvBuf[5] = 0xFF;
 259   1              pRcvBuf[MAC_ADDRESS_LEN] = pMacAddr[0];
 260   1              pRcvBuf[MAC_ADDRESS_LEN +1] = pMacAddr[1];
 261   1              pRcvBuf[MAC_ADDRESS_LEN +2] = pMacAddr[2];
 262   1              pRcvBuf[MAC_ADDRESS_LEN +3] = pMacAddr[3];
 263   1              pRcvBuf[MAC_ADDRESS_LEN +4] = pMacAddr[4];
 264   1              pRcvBuf[MAC_ADDRESS_LEN +5] = pMacAddr[5];
 265   1      
 266   1              /* ip header */
 267   1              pUdpHeader = (uip_udpip_hdr XDATA*)(pRcvBuf + ETH_HEADER_LEN);
 268   1              tmpShort = length - ETH_HEADER_LEN;
 269   1      #else
                      /* ip header */
                      pUdpHeader = (uip_udpip_hdr XDATA*)pRcvBuf;
                      tmpShort = length;
              #endif
 274   1      
 275   1              pUdpHeader->len[0] = (U8_T)(tmpShort >> 8);
 276   1              pUdpHeader->len[1] = (U8_T)tmpShort;
 277   1              pUdpHeader->ipchksum = 0;
 278   1              pUdpHeader->destipaddr[0] = 0xFFFF;
 279   1              pUdpHeader->destipaddr[1] = 0xFFFF;
 280   1      
 281   1              uip_gethostaddr(pUdpHeader->srcipaddr);
 282   1      
 283   1              /* udp header */
 284   1              pUdpHeader = (uip_udpip_hdr XDATA*)(pData - 28);
 285   1              tmpShort = pUdpHeader->srcport;
 286   1              pUdpHeader->srcport = pUdpHeader->destport;
 287   1              pUdpHeader->destport = tmpShort;
 288   1              pUdpHeader->udplen = sizeof(gudpuc_ConfigRxPkt) + 8;
 289   1              pUdpHeader->udpchksum = 0;
 290   1      
 291   1              TCPIP_SetXmitLength(length);
 292   1      
 293   1              uip_appdata = (U8_T*)&gudpuc_ConfigRxPkt;
 294   1      
 295   1              ETH_Send(headerLen);
 296   1              uip_slen = 0;
 297   1      
 298   1      } /* End of gudpbc_HandleSearchReq() */
 299          
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 6   

 300          /*
 301           * ----------------------------------------------------------------------------
 302           * Function Name: gudpbc_HandleSetReq
 303           * Purpose: 
 304           * Params:
 305           * Returns:
 306           * Note:
 307           * ----------------------------------------------------------------------------
 308           */
 309          void gudpbc_HandleSetReq(U8_T XDATA* pData, U16_T length, U8_T id)
 310          {
 311   1              U8_T reboot = (gudpuc_ConfigRxPkt.Option & GCONFIG_OPTION_ENABLE_REBOOT);
 312   1      
 313   1          printd("gudpbc_HandleSetReq()::, id=%bu, length=%u\r\n", id, length);
 314   1      
 315   1              GCONFIG_SetConfigPacket(&gudpuc_ConfigRxPkt);
 316   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_SET_ACK;
 317   1              TCPIP_UdpSend(gudpbc_Conns[id].UdpSocket, 0, 0, pData, length);
 318   1      
 319   1              if (reboot == GCONFIG_OPTION_ENABLE_REBOOT)
 320   1              {
 321   2                      gudpbc_RebootDevice();
 322   2              }
 323   1      } /* End of gudpbc_HandleSetReq() */
 324          
 325          /*
 326           * ----------------------------------------------------------------------------
 327           * Function Name: gudpbc_HandleUpgradeReq
 328           * Purpose: 
 329           * Params:
 330           * Returns:
 331           * Note:
 332           * ----------------------------------------------------------------------------
 333           */
 334          void gudpbc_HandleUpgradeReq(U8_T XDATA* pData, U16_T length, U8_T id)
 335          {       
 336   1          printd("gudpbc_HandleUpgradeReq()::, id=%bu, length=%u\r\n", id, length);
 337   1      
 338   1              GCONFIG_EnableFirmwareUpgrade(1);
 339   1              GCONFIG_WriteConfigData();              
 340   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_UPGRADE_ACK;          
 341   1              TCPIP_UdpSend(gudpbc_Conns[id].UdpSocket, 0, 0, pData, length);
 342   1              gudpbc_RebootDevice();
 343   1      } /* End of gudpbc_HandleUpgradeReq() */
 344          
 345          /*
 346           * ----------------------------------------------------------------------------
 347           * Function Name: gudpbc_HandleResetReq
 348           * Purpose: 
 349           * Params:
 350           * Returns:
 351           * Note:
 352           * ----------------------------------------------------------------------------
 353           */
 354          void gudpbc_HandleResetReq(U8_T id)
 355          {
 356   1              U8_T reboot = (gudpuc_ConfigRxPkt.Option & GCONFIG_OPTION_ENABLE_REBOOT);
 357   1              
 358   1          printd("gudpbc_HandleResetReq()\r\n");
 359   1              GCONFIG_ReadDefaultConfigData();
 360   1              GCONFIG_WriteConfigData();
 361   1              GCONFIG_GetConfigPacket(&gudpuc_ConfigRxPkt);
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 7   

 362   1              gudpuc_ConfigRxPkt.Opcode = GCONFIG_OPCODE_RESET_ACK;
 363   1              TCPIP_UdpSend(gudpbc_Conns[id].UdpSocket, 0, 0, (U8_T*) &gudpuc_ConfigRxPkt, sizeof(gudpuc_ConfigRxPkt));
 364   1      
 365   1              if (reboot == GCONFIG_OPTION_ENABLE_REBOOT)
 366   1              {
 367   2                      gudpbc_RebootDevice();
 368   2              }       
 369   1      } /* End of gudpbc_HandleResetReq() */
 370          
 371          /*
 372           * ----------------------------------------------------------------------------
 373           * Function Name: gudpbc_HandleRebootReq
 374           * Purpose: 
 375           * Params:
 376           * Returns:
 377           * Note:
 378           * ----------------------------------------------------------------------------
 379           */
 380          void gudpbc_HandleRebootReq(U8_T XDATA* pData, U16_T length, U8_T id)
 381          {
 382   1          printd("gudpbc_HandleRebootReq()\r\n");
 383   1      
 384   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_REBOOT_ACK;   
 385   1              TCPIP_UdpSend(gudpbc_Conns[id].UdpSocket, 0, 0, pData, length);
 386   1              gudpbc_RebootDevice();
 387   1      } /* End of gudpbc_HandleRebootReq() */
 388          
 389          /*
 390           * ----------------------------------------------------------------------------
 391           * Function Name: gudpbc_RebootDevice
 392           * Purpose: Delay 10 ms before reboot
 393           * Params:
 394           * Returns:
 395           * Note:
 396           * ----------------------------------------------------------------------------
 397           */
 398          void gudpbc_RebootDevice(void)
 399          {
 400   1              U32_T timeStart = SWTIMER_Tick();
 401   1              U32_T timeEnd = timeStart;      
 402   1      
 403   1              while ((timeEnd == timeStart))
 404   1              {
 405   2                      timeEnd = SWTIMER_Tick();
 406   2              }
 407   1      
 408   1              MCPU_SoftReboot();
 409   1      } /* End of gudpbc_RebootDevice() */
 410          
 411          /* End of gudpbc.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2280    ----
   CONSTANT SIZE    =    367    ----
   XDATA SIZE       =      3      56
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.05   GUDPBC                                                                04/11/2012 16:47:01 PAGE 8   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
