C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE GUDPMC
OBJECT MODULE PLACED IN .\gudpmc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mgs2wifi\gudpmc.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCD
                    -IR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\m
                    -ping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\s
                    -rc\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFINE
                    -(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\gudpmc.lst) OBJECT(.\gudpmc.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2011       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: gudpmc.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: gudpmc.c,v $
  18           *
  19           *=============================================================================
  20           */
  21          
  22          /* INCLUDE FILE DECLARATIONS */
  23          #include "ax22000.h"
  24          #include "mcpu.h"
  25          #include "adapter.h"
  26          #include "gudpmc.h"
  27          #include "gs2w.h"
  28          #include "tcpip.h"
  29          #include "mstimer.h"
  30          #include "stoe.h"
  31          #include "uart0.h"
  32          #include "gconfig.h"
  33          #include "printd.h"
  34          #include <string.h>
  35          
  36          /* NAMING CONSTANT DECLARATIONS */
  37          #define GUDPMC_MAX_CONNS                        1
  38          #define GUDPMC_NO_NEW_CONN                      0xFF
  39          
  40          #define GUDPMC_STATE_FREE                       0
  41          #define GUDPMC_STATE_WAIT                       1
  42          #define GUDPMC_STATE_CONNECTED          2
  43          
  44          /* GLOBAL VARIABLES DECLARATIONS */
  45          extern GCONFIG_CFG_PKT gudpuc_ConfigRxPkt;
  46          
  47          /* LOCAL VARIABLES DECLARATIONS */
  48          static GUDPMC_CONN gudpmc_Conns[GUDPMC_MAX_CONNS];
  49          static U8_T gudpmc_InterAppId;
  50          U8_T GUDPMC_Multicast[MAC_ADDRESS_LEN] = {1, 0, 0x5e, 1, 2, 3};
  51          
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 2   

  52          /* LOCAL SUBPROGRAM DECLARATIONS */
  53          void gudpmc_HandleSearchReq(U8_T id);
  54          void gudpmc_HandleSetReq(U8_T XDATA* pData, U16_T length, U8_T id);
  55          void gudpmc_HandleUpgradeReq(U8_T XDATA* pData, U16_T length, U8_T id);
  56          void gudpmc_HandleResetReq(U8_T id);
  57          void gudpmc_HandleRebootReq(U8_T XDATA* pData, U16_T length, U8_T id);
  58          void gudpmc_RebootDevice(void);
  59          
  60          /*
  61           * ----------------------------------------------------------------------------
  62           * Function Name: GUDPMC_Task
  63           * Purpose: 
  64           * Params:
  65           * Returns:
  66           * Note:
  67           * ----------------------------------------------------------------------------
  68           */
  69          void GUDPMC_Task(void)
  70          {
  71   1      
  72   1      } /* End of GUDPMC_Task() */
  73          
  74          /*
  75           * ----------------------------------------------------------------------------
  76           * Function Name: GUDPMC_Init()
  77           * Purpose: Initialization
  78           * Params:
  79           * Returns:
  80           * Note:
  81           * ----------------------------------------------------------------------------
  82           */
  83          void GUDPMC_Init(U16_T localPort)
  84          {
  85   1              U8_T    i;
  86   1      
  87   1              printd("UDP multicast init ok.\n\r");
  88   1      
  89   1              for (i = 0; i < GUDPMC_MAX_CONNS; i++)
  90   1                      gudpmc_Conns[i].State = GUDPMC_STATE_FREE;
  91   1      
  92   1              gudpmc_InterAppId = TCPIP_Bind(GUDPMC_NewConn, GUDPMC_Event, GUDPMC_Receive);
  93   1              
  94   1              /* set multicase filter */
  95   1              MAC_SetRxFilter(MAC_RCV_MULTICAST | MAC_RCV_BROADCAST);
  96   1              MAC_MultiFilter(GUDPMC_Multicast, MAC_ADDRESS_LEN);
  97   1      
  98   1              /* multicast packets */
  99   1              TCPIP_UdpListen(localPort, gudpmc_InterAppId);
 100   1      
 101   1      } /* End of GUDPMC_Init() */
 102          
 103          /*
 104           * ----------------------------------------------------------------------------
 105           * Function Name: GUDPMC_NewConn
 106           * Purpose: 
 107           * Params:
 108           * Returns:
 109           * Note:
 110           * ----------------------------------------------------------------------------
 111           */
 112          U8_T GUDPMC_NewConn(U32_T XDATA* pip, U16_T remotePort, U8_T socket)
 113          {
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 3   

 114   1              U8_T    i;
 115   1      
 116   1              printd("udpmc new connection, socket=%bu, remoteport=%u, ip=%lu\r\n", socket, remotePort, *pip);
 117   1              for (i = 0; i < GUDPMC_MAX_CONNS; i++)
 118   1              {
 119   2                      gudpmc_Conns[i].State = GUDPMC_STATE_CONNECTED;
 120   2                      gudpmc_Conns[i].UdpSocket = socket;
 121   2                      printd("      id=%bu\r\n", i);
 122   2                      return i;
 123   2              }
 124   1              
 125   1              return GUDPMC_NO_NEW_CONN;
 126   1      
 127   1      } /* End of GUDPMC_NewConn() */
 128          
 129          /*
 130           * ----------------------------------------------------------------------------
 131           * Function Name: GUDPMC_Event
 132           * Purpose: 
 133           * Params:
 134           * Returns:
 135           * Note:
 136           * ----------------------------------------------------------------------------
 137           */
 138          void GUDPMC_Event(U8_T id, U8_T event)
 139          {
 140   1          printd("udpmc event, id=%bu, event=%bu\r\n", id, event);
 141   1              gudpmc_Conns[id].State = event;
 142   1      
 143   1      } /* End of GUDPMC_Event() */
 144          
 145          /*
 146           * ----------------------------------------------------------------------------
 147           * Function Name: GUDPMC_Receive
 148           * Purpose: 
 149           * Params:
 150           * Returns:
 151           * Note:
 152           * ----------------------------------------------------------------------------
 153           */
 154          void GUDPMC_Receive(U8_T XDATA* pData, U16_T length, U8_T id)
 155          {
 156   1              BOOL bValidReq = FALSE;
 157   1              GCONFIG_MAC_ADDR macAddr;
 158   1      
 159   1                                                                                                      
 160   1              printd("udpmc recevie, id=%bu, length=%u\r\n", id, length);
 161   1              if (length == 9 || length == sizeof(gudpuc_ConfigRxPkt)) // 9: search request packet
 162   1              {
 163   2                      if (length == 9)
 164   2                              memcpy(&gudpuc_ConfigRxPkt, pData, 9);
 165   2                      else
 166   2                              memcpy(&gudpuc_ConfigRxPkt, pData, sizeof(gudpuc_ConfigRxPkt));
 167   2      
 168   2                      if (memcmp(&GCONFIG_Gid, pData, sizeof(GCONFIG_GID)) == 0) // Valid data
 169   2                      {
 170   3                              macAddr = GCONFIG_GetMacAddress();      
 171   3      
 172   3                              if (length == sizeof(gudpuc_ConfigRxPkt))
 173   3                              {
 174   4                                      if (memcmp(&gudpuc_ConfigRxPkt.MacAddr, &macAddr, sizeof(macAddr)) == 0)
 175   4                                              bValidReq = TRUE;
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 4   

 176   4                              }
 177   3      
 178   3                              switch (gudpuc_ConfigRxPkt.Opcode)
 179   3                              {
 180   4                              case GCONFIG_OPCODE_SEARCH_REQ:
 181   4                                      {
 182   5                                              gudpmc_HandleSearchReq(id);
 183   5                                      }
 184   4                                      break;
 185   4      
 186   4                              case GCONFIG_OPCODE_SET_REQ:
 187   4                                      {                                       
 188   5                                              if (bValidReq)
 189   5                                                      gudpmc_HandleSetReq(pData, length, id);
 190   5                                      }
 191   4                                      break;
 192   4      
 193   4                              case GCONFIG_OPCODE_UPGRADE_REQ:
 194   4                                      {
 195   5                                              if (bValidReq)
 196   5                                                      gudpmc_HandleUpgradeReq(pData, length, id);
 197   5                                      }
 198   4                                      break;
 199   4      
 200   4                              case GCONFIG_OPCODE_RESET_REQ:
 201   4                                      {
 202   5                                              if (bValidReq)
 203   5                                                      gudpmc_HandleResetReq(id);
 204   5                                      }
 205   4                                      break;
 206   4                              case GCONFIG_OPCODE_REBOOT_REQ:
 207   4                                      {
 208   5                                              if (bValidReq)
 209   5                                                      gudpmc_HandleRebootReq(pData, length, id);
 210   5                                      }
 211   4                                      break;
 212   4      
 213   4                              default:
 214   4                                      break;  
 215   4                              }
 216   3                      }
 217   2              }
 218   1      
 219   1          TCPIP_UdpClose(gudpmc_Conns[id].UdpSocket);
 220   1      } /* End of GUDPMC_Receive() */
 221          
 222          /*
 223           * ----------------------------------------------------------------------------
 224           * Function Name: gudpmc_HandleSearchReq
 225           * Purpose: 
 226           * Params:
 227           * Returns:
 228           * Note:
 229           * ----------------------------------------------------------------------------
 230           */
 231          void gudpmc_HandleSearchReq(U8_T id)
 232          {       
 233   1              printd("gudpmc_HandleSearchReq()\r\n");
 234   1              GCONFIG_GetConfigPacket(&gudpuc_ConfigRxPkt);
 235   1              gudpuc_ConfigRxPkt.Opcode = GCONFIG_OPCODE_SEARCH_ACK;
 236   1              TCPIP_UdpSend(gudpmc_Conns[id].UdpSocket, 0, 0, (U8_T*) &gudpuc_ConfigRxPkt, sizeof(gudpuc_ConfigRxPkt));
 237   1      } /* End of gudpmc_HandleSearchReq() */
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 5   

 238          
 239          /*
 240           * ----------------------------------------------------------------------------
 241           * Function Name: gudpmc_HandleSetReq
 242           * Purpose: 
 243           * Params:
 244           * Returns:
 245           * Note:
 246           * ----------------------------------------------------------------------------
 247           */
 248          void gudpmc_HandleSetReq(U8_T XDATA* pData, U16_T length, U8_T id)
 249          {
 250   1              U8_T reboot = (gudpuc_ConfigRxPkt.Option & GCONFIG_OPTION_ENABLE_REBOOT);
 251   1      
 252   1              printd("gudpmc_HandleSetReq()\r\n");
 253   1      
 254   1              GCONFIG_SetConfigPacket(&gudpuc_ConfigRxPkt);
 255   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_SET_ACK;
 256   1              TCPIP_UdpSend(gudpmc_Conns[id].UdpSocket, 0, 0, pData, length);
 257   1      
 258   1              if (reboot == GCONFIG_OPTION_ENABLE_REBOOT)
 259   1              {
 260   2                      gudpmc_RebootDevice();
 261   2              }       
 262   1      } /* End of gudpmc_HandleSetReq() */
 263          
 264          /*
 265           * ----------------------------------------------------------------------------
 266           * Function Name: gudpmc_HandleUpgradeReq
 267           * Purpose: 
 268           * Params:
 269           * Returns:
 270           * Note:
 271           * ----------------------------------------------------------------------------
 272           */
 273          void gudpmc_HandleUpgradeReq(U8_T XDATA* pData, U16_T length, U8_T id)
 274          {       
 275   1              printd("gudpmc_HandleUpgradeReq()\r\n");
 276   1      
 277   1              GCONFIG_EnableFirmwareUpgrade(1);
 278   1              GCONFIG_WriteConfigData();              
 279   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_UPGRADE_ACK;          
 280   1              TCPIP_UdpSend(gudpmc_Conns[id].UdpSocket, 0, 0, pData, length);
 281   1              gudpmc_RebootDevice();
 282   1      } /* End of gudpmc_HandleUpgradeReq() */
 283          
 284          /*
 285           * ----------------------------------------------------------------------------
 286           * Function Name: gudpmc_HandleResetReq
 287           * Purpose: 
 288           * Params:
 289           * Returns:
 290           * Note:
 291           * ----------------------------------------------------------------------------
 292           */
 293          void gudpmc_HandleResetReq(U8_T id)
 294          {
 295   1              U8_T reboot = (gudpuc_ConfigRxPkt.Option & GCONFIG_OPTION_ENABLE_REBOOT);
 296   1      
 297   1              printd("gudpmc_HandleResetReq()\r\n");
 298   1      
 299   1      
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 6   

 300   1              GCONFIG_ReadDefaultConfigData();
 301   1              GCONFIG_WriteConfigData();
 302   1              GCONFIG_GetConfigPacket(&gudpuc_ConfigRxPkt);
 303   1              gudpuc_ConfigRxPkt.Opcode = GCONFIG_OPCODE_RESET_ACK;
 304   1              TCPIP_UdpSend(gudpmc_Conns[id].UdpSocket, 0, 0, (U8_T*) &gudpuc_ConfigRxPkt, sizeof(gudpuc_ConfigRxPkt));
 305   1      
 306   1              if (reboot == GCONFIG_OPTION_ENABLE_REBOOT)
 307   1              {
 308   2                      gudpmc_RebootDevice();
 309   2              }
 310   1      } /* End of gudpmc_HandleResetReq() */
 311          
 312          /*
 313           * ----------------------------------------------------------------------------
 314           * Function Name: gudpmc_HandleRebootReq
 315           * Purpose: 
 316           * Params:
 317           * Returns:
 318           * Note:
 319           * ----------------------------------------------------------------------------
 320           */
 321          void gudpmc_HandleRebootReq(U8_T XDATA* pData, U16_T length, U8_T id)
 322          {
 323   1              printd("gudpmc_HandleRebootReq()\r\n");
 324   1      
 325   1              *(pData + GCONFIG_OPCODE_OFFSET) = GCONFIG_OPCODE_REBOOT_ACK;   
 326   1              TCPIP_UdpSend(gudpmc_Conns[id].UdpSocket, 0, 0, pData, length);
 327   1              // May store current status/setting here before restart
 328   1              gudpmc_RebootDevice();
 329   1      } /* End of gudpmc_HandleRebootReq() */
 330          
 331          /*
 332           * ----------------------------------------------------------------------------
 333           * Function Name: gudpmc_RebootDevice
 334           * Purpose: Delay 10 ms before reboot
 335           * Params:
 336           * Returns:
 337           * Note:
 338           * ----------------------------------------------------------------------------
 339           */
 340          void gudpmc_RebootDevice(void)
 341          {
 342   1              U32_T timeStart = SWTIMER_Tick();
 343   1              U32_T timeEnd = timeStart;      
 344   1      
 345   1              printd("gudpmc_RebootDevice()\r\n");
 346   1              while ((timeEnd == timeStart))
 347   1              {
 348   2                      timeEnd = SWTIMER_Tick();
 349   2              }
 350   1      
 351   1              MCPU_SoftReboot();
 352   1      } /* End of gudpmc_RebootDevice() */
 353          
 354          /* End of gudpmc.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1483    ----
   CONSTANT SIZE    =    322    ----
   XDATA SIZE       =      9      48
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.05   GUDPMC                                                                04/11/2012 16:47:01 PAGE 7   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
