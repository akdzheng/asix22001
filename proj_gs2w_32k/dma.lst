C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE DMA
OBJECT MODULE PLACED IN .\dma.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mswdma\dma.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCDIR(..
                    -\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\mping;
                    -..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\src\mh
                    -ttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFINE(Runt
                    -imeCodeAt32KH) VARBANKING DEBUG PRINT(.\dma.lst) OBJECT(.\dma.obj)

line level    source

   1          
   2          
   3          /* INCLUDE FILE DECLARATIONS */
   4          #include "ax22000.h"
   5          #include "types.h"
   6          #include "dma.h"
   7          #if (DMA_INCLUDE_ETHERNET_MODULE ==     DMA_YES)
   8           #include "stoe.h"
   9          #endif
  10          
  11          
  12          /* GLOBAL VARIABLE DECLARATIONS */
  13          
  14          
  15          /* STATIC VARIABLE DECLARATIONS */
  16          
  17          
  18          /* LOCAL SUBPROGRAM BODIES */
  19          
  20          /*
  21           * ----------------------------------------------------------------------------
  22           * void DMA_ReadReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  23           * Purpose: Read SW DMA register.
  24           * Params : regaddr: A register index address.
  25           *          pbuf: A pointer to indicate the register data.
  26           *          length: How many bytes will be read. 
  27           * Returns: None.
  28           * Note   : None.
  29           * ----------------------------------------------------------------------------
  30           */
  31          void DMA_ReadReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  32          {
  33   1              BIT             oldEintBit = EA;
  34   1      
  35   1              EA = 0;
  36   1              DCIR = regaddr;
  37   1              while (length--)
  38   1                      pbuf[length] = DDR;
  39   1              EA = oldEintBit;
  40   1      
  41   1      } /* End of DMA_ReadReg */
  42          
  43          /*
  44           * ----------------------------------------------------------------------------
  45           * void DMA_WriteReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  46           * Purpose: Write SW DMA register.
  47           * Params : regaddr: A register index address.
  48           *          pbuf: A pointer to indicate the register data.
  49           *          length: How many bytes will be written. 
  50           * Returns: None.
  51           * Note   : None.
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 2   

  52           * ----------------------------------------------------------------------------
  53           */
  54          void DMA_WriteReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  55          {
  56   1              BIT             oldEintBit = EA;
  57   1      
  58   1              EA = 0;
  59   1              while (length--)
  60   1                      DDR = pbuf[length];
  61   1              DCIR = regaddr;
  62   1              EA = oldEintBit;
  63   1      
  64   1      } /* End of STOE_DMA_WriteReg */
  65          
  66          /*
  67           * ----------------------------------------------------------------------------
  68           * void DMA_Init(void)
  69           * Purpose: Initial AX220xx SW DMA module.
  70           * Params :
  71           * Returns:
  72           * Note   :
  73           * ----------------------------------------------------------------------------
  74           */
  75          void DMA_Init(void)
  76          {
  77   1              /* set DMA burst size */
  78   1              TDR = DMA_BURST_SIZE;
  79   1              TCIR = 0x24;
  80   1      
  81   1      } /* End of DMA_Init */
  82          
  83          /*
  84           * ----------------------------------------------------------------------------
  85           * void DMA_Start(void)
  86           * Purpose: Start software-dma module by enabling the interrupt 5.
  87           * Params :
  88           * Returns:
  89           * Note   :
  90           * ----------------------------------------------------------------------------
  91           */
  92          void DMA_Start(void)
  93          {
  94   1      
  95   1      } /* End of DMA_Start */
  96          
  97          /*
  98           * ----------------------------------------------------------------------------
  99           * U8_T DMA_CheckStatus(void)
 100           * Purpose: Wait software-dma to complete, and check if dma error happened or not?
 101           * Params : None.
 102           * Returns: 0 : dma error had happened.
 103           *                      1 :     dma had completed.
 104           * Note   : None.
 105           * ----------------------------------------------------------------------------
 106           */
 107          U8_T DMA_CheckStatus(void)
 108          {
 109   1              U8_T XDATA      temp;
 110   1      
 111   1              while (1)
 112   1              {
 113   2                      DMA_ReadReg(SW_DMA_CMD_REG, &temp, 1);
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 3   

 114   2                      if (temp & 0x37)
 115   2                      {
 116   3                              if (temp & DMA_ERROR_BIT)
 117   3                                      return 0;
 118   3                      }
 119   2                      else
 120   2                      {
 121   3                              return 1;
 122   3                      }
 123   2              }
 124   1      
 125   1      } /* End of DMA_CheckStatus */
 126          
 127          /*
 128           * ----------------------------------------------------------------------------
 129           * BOOL DMA_DataToProgram(U32_T addrSour, U32_T addrDest, U16_T length)
 130           * Purpose: This function is responsible to copy data from external data memory
 131           *          to program memory. It will check DMA status automatically
 132           *          after DMA begin copying.
 133           * Params : addrSour¡GThe source address in external data memory.
 134           *          addrDest¡GThe destination address in program memory.
 135           *          length¡GThe total length that S/W DMA has need to copy.
 136           * Returns: 0 : DMA error had happened
 137           *                      1 :     DMA had completed.
 138           * Note   :
 139           * ----------------------------------------------------------------------------
 140           */
 141          BOOL DMA_DataToProgram(U32_T addrSour, U32_T addrDest, U16_T length)
 142          {
 143   1              U32_T   cmd32b = 0;
 144   1              U8_T    cmd8b = 0;
 145   1      
 146   1          if (!length || addrSour == addrDest)
 147   1              return FALSE;
 148   1      
 149   1              cmd32b = (U32_T)addrSour << 8;
 150   1              DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, (U8_T *)&cmd32b, 3);
 151   1      
 152   1              cmd32b = (U32_T)addrDest << 8;
 153   1              DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, (U8_T *)&cmd32b, 3);
 154   1      
 155   1              DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, (U8_T *)&length, 2);
 156   1      
 157   1              cmd8b = (DMA_CMD_GO | DMA_TA_IN_PROG_MEM);
 158   1      
 159   1              DMA_WriteReg(SW_DMA_CMD_REG, (U8_T *)&cmd8b, 1);
 160   1      
 161   1              if (DMA_CheckStatus() == FALSE)
 162   1                      return FALSE;
 163   1              return TRUE;
 164   1      }
 165          
 166          /*
 167           * ----------------------------------------------------------------------------
 168           * BOOL DMA_ProgramToProgram(U32_T addrSour, U32_T addrDest, U16_T length)
 169           * Purpose: This function is responsible to copy data from program memory
 170           *          to program memory. It will check DMA status automatically
 171           *          after DMA begin copying.
 172           * Params : addrSour¡GThe source address in program memory.
 173           *          addrDest¡GThe destination address in program memory.
 174           *          length¡GThe total length that S/W DMA has need to copy.
 175           * Returns: 0 : DMA error had happened
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 4   

 176           *                      1 :     DMA had completed.
 177           * Note   :
 178           * ----------------------------------------------------------------------------
 179           */
 180          BOOL DMA_ProgramToProgram(U32_T addrSour, U32_T addrDest, U16_T length)
 181          {
 182   1              U32_T   cmd32b = 0;
 183   1              U8_T    cmd8b = 0;
 184   1      
 185   1          if (!length || addrSour == addrDest)
 186   1              return FALSE;
 187   1      
 188   1              cmd32b = (U32_T)addrSour << 8;
 189   1              DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, (U8_T *)&cmd32b, 3);
 190   1      
 191   1              cmd32b = (U32_T)addrDest << 8;
 192   1              DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, (U8_T *)&cmd32b, 3);
 193   1      
 194   1              DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, (U8_T *)&length, 2);
 195   1      
 196   1              cmd8b = (DMA_CMD_GO | DMA_SA_IN_PROG_MEM | DMA_TA_IN_PROG_MEM);
 197   1      
 198   1              DMA_WriteReg(SW_DMA_CMD_REG, (U8_T *)&cmd8b, 1);
 199   1      
 200   1              if (DMA_CheckStatus() == FALSE)
 201   1                      return FALSE;
 202   1              return TRUE;
 203   1      }
 204          
 205          /*
 206           * ----------------------------------------------------------------------------
 207           * BOOL DMA_ProgramToData(U32_T addrSour, U32_T addrDest, U16_T length)
 208           * Purpose: This function is responsible to copy data from program memory
 209           *          to external data memory. It will check DMA status automatically
 210           *          after DMA begin copying.
 211           * Params : addrSour¡GThe source address in program memory.
 212           *          addrDest¡GThe destination address in external data memory.
 213           *          length¡GThe total length that S/W DMA has need to copy.
 214           * Returns: 0 : DMA error had happened
 215           *                      1 :     DMA had completed.
 216           * Note   :
 217           * ----------------------------------------------------------------------------
 218           */
 219          BOOL DMA_ProgramToData(U32_T addrSour, U32_T addrDest, U16_T length)
 220          {
 221   1              U32_T   cmd32b = 0;
 222   1              U8_T    cmd8b = 0;
 223   1      
 224   1          if (!length || addrSour == addrDest)
 225   1              return FALSE;
 226   1      
 227   1              cmd32b = (U32_T)addrSour << 8;
 228   1              DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, (U8_T *)&cmd32b, 3);
 229   1      
 230   1              cmd32b = (U32_T)addrDest << 8;
 231   1              DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, (U8_T *)&cmd32b, 3);
 232   1      
 233   1              DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, (U8_T *)&length, 2);
 234   1      
 235   1      #if (DMA_INCLUDE_ETHERNET_MODULE == DMA_YES)
 236   1              if ((addrDest >= (U16_T)PBDP->XmtStartAddr) && (addrDest <= (U16_T)PBDP->XmtEndAddr))
 237   1                      cmd8b = (DMA_CMD_GO | DMA_SA_IN_PROG_MEM | DMA_TO_TPBR);
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 5   

 238   1              else
 239   1      #endif //(DMA_INCLUDE_ETHERNET_MODULE == DMA_YES)
 240   1                      cmd8b = (DMA_CMD_GO | DMA_SA_IN_PROG_MEM);
 241   1      
 242   1              DMA_WriteReg(SW_DMA_CMD_REG, (U8_T *)&cmd8b, 1);
 243   1      
 244   1              if (DMA_CheckStatus() == FALSE)
 245   1                      return FALSE;
 246   1              return TRUE;
 247   1      }
 248          
 249          #if (DMA_INCLUDE_ETHERNET_MODULE == DMA_YES)
 250          /*
 251          * -----------------------------------------------------------------------------
 252           * Function Name: DMA_GrantXdata
 253           * Purpose: Use sw-dma doing memory copy. The scope of source and destination
 254           *                              target must     be smaller than 64k sram memory.
 255           *                      If the scope of either source or destination target is large than
 256           *                              64k memory,     the programmers can call DMA_Grant() instead of
 257           *                              this function.
 258           *                      DMA_GrantXdata() can run faster than DMA_Grant() function.
 259           * Params: 
 260           * Returns: A address of XDATA memory that point to the next address of
 261           *                              the end address of the scope of destination target.
 262           * Note:
 263           * ----------------------------------------------------------------------------
 264           */
 265          U8_T XDATA* DMA_GrantXdata(U8_T XDATA* pdest, U8_T XDATA* psour, U16_T length)
 266          {
 267   1              U8_T XDATA              temp[3];
 268   1              U16_T XDATA*    ptempshort = (U16_T XDATA*)&temp[1];
 269   1              U8_T                    dmatype = 0;
 270   1      
 271   1          if (!length || pdest == psour)
 272   1              return 0;
 273   1      
 274   1              temp[0] = 0;
 275   1              *ptempshort = psour;
 276   1              DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, temp, 3);
 277   1              *ptempshort = pdest;
 278   1              DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, temp, 3);
 279   1              *ptempshort = length;
 280   1              DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, temp + 1, 2);
 281   1      
 282   1              if ((psour >= PBDP->RcvStartAddr) && (psour <= PBDP->RcvEndAddr))
 283   1                      dmatype = DMA_FROM_RPBR;
 284   1              if ((pdest >= PBDP->XmtStartAddr) && (pdest <= PBDP->XmtEndAddr))
 285   1                      dmatype |= DMA_TO_TPBR;
 286   1      
 287   1              temp[0] = (DMA_CMD_GO | dmatype);
 288   1              DMA_WriteReg(SW_DMA_CMD_REG, temp, 1);
 289   1      
 290   1              if (dmatype | DMA_TO_TPBR)
 291   1              {
 292   2                      pdest += length;
 293   2                      if (pdest > PBDP->XmtEndAddr)
 294   2                              pdest -= STOE_XMIT_BUF_SIZE;
 295   2              }
 296   1      
 297   1              /* check software dma had completed. */
 298   1              if (DMA_CheckStatus())
 299   1                      return pdest;
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 6   

 300   1              else
 301   1                      return 0;
 302   1      
 303   1      } /* DMA_GrantXdata */
 304          
 305          #if (DMA_SRAM_RANGE == DMA_COPY_LARGE_THAN_64K)
 306          /*
 307          * -----------------------------------------------------------------------------
 308           * Function Name: DMA_Grant
 309           * Purpose: Use sw-dma doing memory copy. 
 310           * Params: 
 311           * Returns: A address of sram memory that point to the next address of
 312           *                              the end address of the scope of destination target.
 313           * Note:
 314           * ----------------------------------------------------------------------------
 315           */
 316          U8_T* DMA_Grant(U8_T* pdest, U8_T* psour, U16_T length)
 317          {
 318   1              U8_T XDATA              sourtemp[4];
 319   1              U8_T XDATA              desttemp[4];
 320   1              U32_T XDATA*    psourtemplong = (U32_T XDATA*)&sourtemp[0];
 321   1              U32_T XDATA*    pdesttemplong = (U32_T XDATA*)&desttemp[0];
 322   1              U16_T XDATA*    ptempshort;
 323   1              U8_T                    dmatype = 0;
 324   1              U8_T*                   ptemp;
 325   1      
 326   1          if (!length || pdest == psour)
 327   1              return 0;
 328   1      
 329   1              *psourtemplong = (U32_T)psour;
 330   1              *pdesttemplong = (U32_T)pdest;
 331   1      
 332   1              sourtemp[1]--;  /* for Keil C memory type */
 333   1              DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, &sourtemp[1], 3);
 334   1      
 335   1              if (sourtemp[1] == 0)
 336   1              {
 337   2                      ptempshort = (U16_T XDATA*)&sourtemp[2];
 338   2                      if ((*ptempshort >= (U16_T)PBDP->RcvStartAddr) && (*ptempshort <= (U16_T)PBDP->RcvEndAddr))
 339   2                              dmatype = DMA_FROM_RPBR;
 340   2              }
 341   1      
 342   1              desttemp[1]--;  /* for Keil C memory type */
 343   1              DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, &desttemp[1], 3);
 344   1      
 345   1              if (desttemp[1] == 0)
 346   1              {
 347   2                      ptempshort = (U16_T XDATA*)&desttemp[2];
 348   2                      if ((*ptempshort >= (U16_T)PBDP->XmtStartAddr) && (*ptempshort <= (U16_T)PBDP->XmtEndAddr))
 349   2                              dmatype |= DMA_TO_TPBR;
 350   2              }
 351   1      
 352   1              ptempshort = (U16_T XDATA*)&sourtemp[0];
 353   1              *ptempshort = length;
 354   1              DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, sourtemp, 2);
 355   1      
 356   1              sourtemp[0] = (DMA_CMD_GO | dmatype);
 357   1              DMA_WriteReg(SW_DMA_CMD_REG, sourtemp, 1);
 358   1      
 359   1              if (dmatype | DMA_TO_TPBR)
 360   1              {
 361   2                      ptemp = pdest;
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 7   

 362   2                      pdest += length;
 363   2      /* for KEIL */
 364   2                      if (ptemp > pdest)
 365   2                              pdest += 0x10000;
 366   2      /* end */
 367   2                      ptempshort = (U16_T XDATA*)&desttemp[2];
 368   2                      (*ptempshort) += length;
 369   2                      if (*ptempshort > (U16_T)PBDP->XmtEndAddr)
 370   2                              pdest -= STOE_XMIT_BUF_SIZE;
 371   2              }
 372   1      
 373   1              /* check software dma had completed. */
 374   1              if (DMA_CheckStatus())
 375   1                      return pdest;
 376   1              else
 377   1                      return 0;
 378   1      
 379   1      } /* DMA_Grant */
 380          #endif /* End of #if (DMA_SRAM_RANGE == DMA_COPY_LARGE_THAN_64K)*/
 381          #else
              /*
              * -----------------------------------------------------------------------------
               * Function Name: DMA_GrantXdata
               * Purpose: Use sw-dma doing memory copy. The scope of source and destination
               *                              target must     be smaller than 64k sram memory.
               *                      If the scope of either source or destination target is large than
               *                              64k memory,     the programmers can call DMA_Grant() instead of
               *                              this function.
               *                      DMA_GrantXdata() can run faster than DMA_Grant() function.
               * Params: 
               * Returns:  A address of XDATA memory that point to the next address of
               *                              the end address of the scope of destination target.
               * Note:
               * ----------------------------------------------------------------------------
               */
              U8_T XDATA* DMA_GrantXdata(U8_T XDATA* pdest, U8_T XDATA* psour, U16_T length)
              {
                      U8_T XDATA              temp[3];
                      U16_T XDATA*    ptempshort = (U16_T XDATA*)&temp[1];
              
                  if (!length || pdest == psour)
                      return 0;
                              
                      temp[0] = 0;
                      *ptempshort = psour;
                      DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, temp, 3);
                      *ptempshort = pdest;
                      DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, temp, 3);
                      *ptempshort = length;
                      DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, temp + 1, 2);
              
                      temp[0] = DMA_CMD_GO;
                      DMA_WriteReg(SW_DMA_CMD_REG, temp, 1);
              
                      pdest += length;
              
                      /* check software dma had completed. */
                      if (DMA_CheckStatus())
                              return pdest;
                      else
                              return 0;
              
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 8   

              } /* DMA_GrantXdata */
              
              #if (DMA_SRAM_RANGE == DMA_COPY_LARGE_THAN_64K)
              /*
              * -----------------------------------------------------------------------------
               * Function Name: DMA_Grant
               * Purpose: Use dma doing memory copy. 
               * Params:
               * Returns:  A address of sram memory that point to the next address of
               *                              the end address of the scope of destination target.
               * Note:
               * ----------------------------------------------------------------------------
               */
              U8_T* DMA_Grant(U8_T* pdest, U8_T* psour, U16_T length)
              {
                      U8_T XDATA              temp[4];
                      U32_T XDATA*    ptemplong = (U32_T XDATA*)&temp[0];
                      U16_T XDATA*    ptempshort;
                      U8_T*                   ptemp;
              
                  if (!length || pdest == psour)
                      return 0;
              
                      *ptemplong = (U32_T)psour;
                      temp[1]--;      /* for Keil C memory type */
                      DMA_WriteReg(SW_DMA_SOURCE_ADDR_REG, &temp[1], 3);
              
                      *ptemplong = (U32_T)pdest;
                      temp[1]--;      /* for Keil C memory type */
                      DMA_WriteReg(SW_DMA_TARGET_ADDR_REG, &temp[1], 3);
              
                      ptempshort = (U16_T XDATA*)&temp[0];
                      *ptempshort = length;
                      DMA_WriteReg(SW_DMA_BYTE_COUNT_REG, temp, 2);
              
                      temp[0] = DMA_CMD_GO;
                      DMA_WriteReg(SW_DMA_CMD_REG, temp, 1);
              
                      ptemp = pdest;
                      pdest += length;
              /* for KEIL */
                      if (ptemp > pdest)
                              pdest += 0x10000;
              /* end */
                      /* check software dma had completed. */
                      if (DMA_CheckStatus())
                              return pdest;
                      else
                              return 0;
              
              } /* DMA_Grant */
              #endif /* End of #if (DMA_SRAM_RANGE == DMA_COPY_LARGE_THAN_64K) */
              
              #endif /* End of #if (DMA_INCLUDE_ETHERNET_MODULE == DMA_YES)*/
 478          
 479          /*
 480           * ----------------------------------------------------------------------------
 481           * Function Name: DMA_IndirectIO
 482           * Purpose: dma indirect register read/write, only for debugging.
 483           * Params:
 484           * Returns:
 485           * Note:
C51 COMPILER V9.05   DMA                                                                   04/11/2012 16:46:55 PAGE 9   

 486           * ----------------------------------------------------------------------------
 487           */
 488          U8_T DMA_IndirectIO(U8_T rw, U16_T index, U8_T XDATA* pbuf)
 489          {
 490   1              U8_T len;
 491   1      
 492   1              switch (index)
 493   1              {
 494   2              case SW_DMA_SOURCE_ADDR_REG:
 495   2              case SW_DMA_TARGET_ADDR_REG:
 496   2                      len = 3;
 497   2                      break;
 498   2              case SW_DMA_BYTE_COUNT_REG:
 499   2                      len = 2;
 500   2                      break;
 501   2              case SW_DMA_CMD_REG:
 502   2                      len = 1;
 503   2                      break;
 504   2              default:
 505   2                      return 0xff;
 506   2              }
 507   1      
 508   1              if (rw == 0) /* read */
 509   1                      DMA_ReadReg (index, pbuf, len);
 510   1              else if (rw == 1) /* write */
 511   1                      DMA_WriteReg (index, pbuf, len);
 512   1              else
 513   1                      return 0xff;
 514   1      
 515   1              return  len;
 516   1      
 517   1      } /* End of DMA_IndirectIO() */
 518          
 519          
 520          /* End of dma.c */
 521          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2171    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      88
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
