C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE MWIFAPP
OBJECT MODULE PLACED IN .\mwifapp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mwif\mwifapp.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCDIR(
                    -..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\mpin
                    -g;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\src\
                    -mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFINE(Ru
                    -ntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\mwifapp.lst) OBJECT(.\mwifapp.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2010       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: mwifapp.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: mwifapp.c,v $
  18           * no message
  19           *
  20           *=============================================================================
  21           */
  22          
  23          /* INCLUDE FILE DECLARATIONS */
  24          #include "ax22000.h"
  25          #include "mcpu.h"
  26          #include "mwioctl.h"
  27          #include "mwifapp.h"
  28          #include "stoe_cfg.h"
  29          #include "adapter.h"
  30          #include "dhcpc.h"
  31          #if MWIF_TASK_HOOKUP
  32          #include "main.h"
  33          #include "stoe.h"
  34          #include "mstimer.h"
  35          #include <string.h>
  36          #endif
  37          
  38          #if IO_CPU_TYPE
  39          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
  40          
  41          #if MWIF_TASK_HOOKUP
  42          /* GLOBAL VARIABLE DECLARATIONS */
  43          MWIFAPP_WiFi_INFO MWIFAPP_WiFiInfo;
  44          MWIFAPP_SITE_SURVEY_REPORT MWIFAPP_SiteSurveyTable[MWIFAPP_MAX_SITESURVEY_TABLE_MEMBER];
  45          
  46          /* STATIC VARIABLE DECLARATIONS */
  47          static MWIFAPP_LINKLIST mwifapp_cmdFifo, mwifapp_waitFifo;
  48          static U32_T mwifapp_Tp = 0, mwifapp_Ts = 0;
  49          #if MWIF_TASK_HOOKUP
  50          static U8_T mwifapp_ConnStatus = 0xFF;
  51          #endif
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 2   

  52          
  53          /* LOCAL SUBPROGRAM DECLARATIONS */
  54          static U8_T mwifapp_TaskChkQueueEmpty(MWIFAPP_LINKLIST XDATA *pFIFO);
  55          static void mwifapp_TaskEnQueue(MWIFAPP_LINKLIST *pFIFO, MWIFAPP_LINK *pEntity);
  56          static MWIFAPP_LINK *mwifapp_TaskDeQueue(MWIFAPP_LINKLIST *pFIFO);
  57          static MWIFAPP_LINK *mwifapp_TaskDeQueueByOption(MWIFAPP_LINKLIST *pFIFO, MWIFAPP_LINK *pEntity);
  58          #endif
  59          /* LOCAL SUBPROGRAM BODIES */
  60          /*
  61           * ----------------------------------------------------------------------------
  62           * Function Name: MWIFAPP_TaskIOJoinBss()
  63           * Purpose:
  64           * Params:
  65           * Returns:
  66           * Note:
  67           * ----------------------------------------------------------------------------
  68           */
  69          void MWIFAPP_TaskIOJoinBss(U8_T value)
  70          {
  71   1      
  72   1      } /* End of MWIFAPP_TaskIOJoinBss() */
*** WARNING C280 IN LINE 69 OF ..\src\mwif\mwifapp.c: 'value': unreferenced local variable
  73          
  74          /*
  75           * ----------------------------------------------------------------------------
  76           * Function Name: MWIFAPP_TaskIOReadBeaconInterval()
  77           * Purpose:
  78           * Params:
  79           * Returns:
  80           * Note:
  81           * ----------------------------------------------------------------------------
  82           */
  83          void MWIFAPP_TaskIOReadBeaconInterval(void)
  84          {
  85   1      
  86   1      } /* End of MWIFAPP_TaskIOReadBeaconInterval() */
  87          
  88          /*
  89           * ----------------------------------------------------------------------------
  90           * Function Name: MWIFAPP_TaskIOReadEncryptType()
  91           * Purpose:
  92           * Params:
  93           * Returns:
  94           * Note:
  95           * ----------------------------------------------------------------------------
  96           */
  97          void MWIFAPP_TaskIOReadEncryptType(void)
  98          {
  99   1      
 100   1      } /* End of MWIFAPP_TaskIOReadEncryptType() */
 101          
 102          /*
 103           * ----------------------------------------------------------------------------
 104           * Function Name: MWIFAPP_TaskIOReadChannel()
 105           * Purpose:
 106           * Params:
 107           * Returns:
 108           * Note:
 109           * ----------------------------------------------------------------------------
 110           */
 111          void MWIFAPP_TaskIOReadChannel(U8_T* pbuf)
 112          {
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 3   

 113   1      
 114   1      } /* End of MWIFAPP_TaskIOReadChannel() */
*** WARNING C280 IN LINE 111 OF ..\src\mwif\mwifapp.c: 'pbuf': unreferenced local variable
 115          
 116          /*
 117           * ----------------------------------------------------------------------------
 118           * Function Name: MWIFAPP_TaskIOWiFiConnect()
 119           * Purpose:
 120           * Params:
 121           * Returns:
 122           * Note:
 123           * ----------------------------------------------------------------------------
 124           */
 125          void MWIFAPP_TaskIOWiFiConnect(void)
 126          {
 127   1      #if MWIF_TASK_HOOKUP
 128   1          if (mwifapp_ConnStatus == 0xFF)
 129   1          {
 130   2              mwifapp_ConnStatus = 1;
 131   2              return;
 132   2          }
 133   1          else if (mwifapp_ConnStatus == 0)
 134   1          {
 135   2              mwifapp_ConnStatus = 1;
 136   2              MAIN_RestartDhcpClient();
 137   2          }
 138   1      #endif
 139   1      } /* End of MWIFAPP_TaskIOWiFiConnect() */
 140          
 141          /*
 142           * ----------------------------------------------------------------------------
 143           * Function Name: MWIFAPP_TaskIOWiFiMacAddrSet()
 144           * Purpose:
 145           * Params:
 146           * Returns:
 147           * Note:
 148           * ----------------------------------------------------------------------------
 149           */
 150          void MWIFAPP_TaskIOWiFiMacAddrSet(U8_T XDATA *pbuf)
 151          {
 152   1          memcpy(MWIFAPP_WiFiInfo.WcpuMAC, &pbuf[4], 6);
 153   1      } /* End of MWIFAPP_TaskIOWiFiMacAddrSet() */
 154          
 155          /*
 156           * ----------------------------------------------------------------------------
 157           * Function Name: MWIFAPP_TaskIOWiFiDriverVer()
 158           * Purpose:
 159           * Params:
 160           * Returns:
 161           * Note:
 162           * ----------------------------------------------------------------------------
 163           */
 164          void MWIFAPP_TaskIOWiFiDriverVer(U8_T XDATA *pbuf)
 165          {
 166   1              U8_T len;
 167   1         
 168   1              len = pbuf[2];
 169   1              if (len > 29)
 170   1              len = 29;
 171   1          memcpy(MWIFAPP_WiFiInfo.WcpuFwVersion, &pbuf[3], len);
 172   1          MWIFAPP_WiFiInfo.WcpuFwVersion[len] = '\0';
 173   1      } /* End of MWIFAPP_TaskIOWiFiDriverVer() */
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 4   

 174          
 175          #if MWIF_TASK_HOOKUP
 176          
 177          /*
 178           * ----------------------------------------------------------------------------
 179           * Function Name: mwifapp_TaskChkQueueEmpty()
 180           * Purpose:
 181           * Params:
 182           * Returns:
 183           * Note:
 184           * ----------------------------------------------------------------------------
 185           */
 186          U8_T mwifapp_TaskChkQueueEmpty(MWIFAPP_LINKLIST XDATA *pFIFO)
 187          {
 188   1              return ((pFIFO->pHead == 0 && pFIFO->pTail == 0) ? 1:0);
 189   1      } // End of mwifapp_TaskChkQueueEmpty() // 
 190          
 191          /*
 192           * ----------------------------------------------------------------------------
 193           * Function Name: mwifapp_TaskEnQueue()
 194           * Purpose:
 195           * Params:
 196           * Returns:
 197           * Note:
 198           * ----------------------------------------------------------------------------
 199           */
 200          void mwifapp_TaskEnQueue(MWIFAPP_LINKLIST *pFIFO, MWIFAPP_LINK *pEntity)
 201          {
 202   1              if (mwifapp_TaskChkQueueEmpty(pFIFO))
 203   1              {
 204   2                      pFIFO->pHead = pEntity;
 205   2                      pFIFO->pTail = pEntity;
 206   2              }
 207   1              else
 208   1              {
 209   2                      pEntity->pPre = pFIFO->pTail;
 210   2                      pFIFO->pTail->pNext = pEntity;
 211   2                      pFIFO->pTail = pEntity;         
 212   2              }
 213   1      } // End of mwifapp_TaskEnQueue() // 
 214          
 215          /*
 216           * ----------------------------------------------------------------------------
 217           * Function Name: mwifapp_TaskDeQueue()
 218           * Purpose:
 219           * Params:
 220           * Returns:
 221           * Note:
 222           * ----------------------------------------------------------------------------
 223           */
 224          MWIFAPP_LINK *mwifapp_TaskDeQueue(MWIFAPP_LINKLIST *pFIFO)
 225          {
 226   1              MWIFAPP_LINK *pTmp;
 227   1              
 228   1              if (mwifapp_TaskChkQueueEmpty(pFIFO))
 229   1                      return 0;
 230   1                      
 231   1              pTmp = pFIFO->pHead;
 232   1              if (pFIFO->pHead == pFIFO->pTail)
 233   1              {
 234   2                      pFIFO->pHead = 0;               
 235   2                      pFIFO->pTail = 0;
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 5   

 236   2              }
 237   1              else
 238   1              {
 239   2                      pFIFO->pHead = pFIFO->pHead->pNext;
 240   2              }
 241   1              return pTmp;
 242   1      } // End of mwifapp_TaskDeQueue() //
 243          
 244          /*
 245           * ----------------------------------------------------------------------------
 246           * Function Name: mwifapp_TaskDeQueueByOption()
 247           * Purpose:
 248           * Params:
 249           * Returns:
 250           * Note:
 251           * ----------------------------------------------------------------------------
 252           */
 253          MWIFAPP_LINK *mwifapp_TaskDeQueueByOption(MWIFAPP_LINKLIST *pFIFO, MWIFAPP_LINK *pEntity)
 254          {
 255   1              MWIFAPP_LINK *pTmp;
 256   1              U8_T i;
 257   1              
 258   1              if (mwifapp_TaskChkQueueEmpty(pFIFO))
 259   1                      return 0;
 260   1                      
 261   1              pTmp = pFIFO->pHead;
 262   1              for (i = 0; i < 100; i ++)
 263   1              {               
 264   2                      if (pTmp == pEntity)
 265   2                      {
 266   3                              if (pFIFO->pHead == pFIFO->pTail)
 267   3                              {
 268   4                                      pFIFO->pHead = 0;               
 269   4                                      pFIFO->pTail = 0;
 270   4                                      return pTmp;
 271   4                              }
 272   3                              else if (pTmp == pFIFO->pHead)
 273   3                              {
 274   4                                      pFIFO->pHead = pFIFO->pHead->pNext;
 275   4                                      return pTmp;
 276   4                              }
 277   3                              else if (pTmp == pFIFO->pTail)
 278   3                              {
 279   4                                      pFIFO->pTail = pFIFO->pTail->pPre;
 280   4                                      return pTmp;
 281   4                              }
 282   3                              else
 283   3                              {
 284   4                                      pTmp->pPre->pNext = pTmp->pNext;
 285   4                                      pTmp->pNext->pPre = pTmp->pPre;
 286   4                                      return pTmp;                    
 287   4                              }
 288   3                      }
 289   2                      if (pTmp != pFIFO->pTail)
 290   2                              pTmp = pTmp->pNext;             
 291   2                      else
 292   2                              break;
 293   2              }
 294   1              return 0;
 295   1      } // End of mwifapp_TaskDeQueueByOption() //
 296          
 297          /*
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 6   

 298           * ----------------------------------------------------------------------------
 299           * Function Name: MWIFAPP_TaskCmdEnQueue()
 300           * Purpose:
 301           * Params:
 302           * Returns:
 303           * Note:
 304           * ----------------------------------------------------------------------------
 305           */
 306          S8_T MWIFAPP_TaskCmdEnQueue(MWIFAPP_LINK *pEntity)
 307          {
 308   1              pEntity->WaitTime = MWIFAPP_MAX_IO_CMD_TIMEOUT;
 309   1              pEntity->ReplyLen = 0;
 310   1      
 311   1              mwifapp_TaskEnQueue(&mwifapp_cmdFifo, pEntity);
 312   1              return 0;
 313   1      } // End of MWIFAPP_TaskCmdEnQueue() //
 314          
 315          /*
 316           * ----------------------------------------------------------------------------
 317           * Function Name: MWIFAPP_TaskCmdDeQueue()
 318           * Purpose:
 319           * Params:
 320           * Returns:
 321           * Note:
 322           * ----------------------------------------------------------------------------
 323           */
 324          S8_T MWIFAPP_TaskCmdDeQueue(MWIFAPP_LINK *pEntity)
 325          {
 326   1              if (mwifapp_TaskDeQueueByOption(&mwifapp_waitFifo, pEntity))
 327   1                      return 0;
 328   1              else
 329   1                      return -1;
 330   1      } // End of MWIFAPP_TaskCmdDeQueue() //
 331          
 332          /*
 333           * ----------------------------------------------------------------------------
 334           * Function Name: MWIFAPP_TaskCmdRcv()
 335           * Purpose:
 336           * Params:
 337           * Returns:
 338           * Note:
 339           * ----------------------------------------------------------------------------
 340           */
 341          U8_T MWIFAPP_TaskCmdRcv(U8_T XDATA *pBuf)
 342          {
 343   1              if (mwifapp_TaskChkQueueEmpty(&mwifapp_waitFifo))
 344   1              {
 345   2                      return MWIFAPP_UPLAYER_NO_WAIT;
 346   2              }
 347   1              else if (!(mwifapp_waitFifo.pHead->ReplyLen))
 348   1              {
 349   2                      mwifapp_waitFifo.pHead->ReplyLen = pBuf[2]+3;
 350   2                      memcpy(mwifapp_waitFifo.pHead->Buf, pBuf, mwifapp_waitFifo.pHead->ReplyLen);
 351   2                      return MWIFAPP_UPLAYER_WAIT;
 352   2              }
 353   1              return MWIFAPP_UPLAYER_BUSY;
 354   1      } // End of MWIFAPP_TaskCmdRcv() // 
 355          
 356          /*
 357           * ----------------------------------------------------------------------------
 358           * Function Name: MWIFAPP_Task()
 359           * Purpose:
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 7   

 360           * Params:
 361           * Returns:
 362           * Note:
 363           * ----------------------------------------------------------------------------
 364           */
 365          void MWIFAPP_Task(void)
 366          {
 367   1              // Check command queue //       
 368   1              if (!mwifapp_TaskChkQueueEmpty(&mwifapp_cmdFifo) && mwifapp_TaskChkQueueEmpty(&mwifapp_waitFifo))
 369   1              {
 370   2                      MWIF_Send(mwifapp_cmdFifo.pHead->Buf[0], (U8_T*)&(mwifapp_cmdFifo.pHead->Buf[3]), mwifapp_cmdFifo.pHead-
             ->Buf[2]);
 371   2                      mwifapp_TaskEnQueue(&mwifapp_waitFifo, mwifapp_TaskDeQueue(&mwifapp_cmdFifo));
 372   2              }
 373   1              
 374   1              mwifapp_Tp = SWTIMER_Tick();
 375   1              if (mwifapp_Ts != mwifapp_Tp)
 376   1              {
 377   2                      mwifapp_Ts = mwifapp_Tp;        
 378   2                      if (!mwifapp_TaskChkQueueEmpty(&mwifapp_waitFifo))
 379   2                      {
 380   3                              if (mwifapp_waitFifo.pHead->WaitTime)
 381   3                                      mwifapp_waitFifo.pHead->WaitTime --;
 382   3                              if (!(mwifapp_waitFifo.pHead->WaitTime))
 383   3                                      mwifapp_TaskDeQueue(&mwifapp_waitFifo);         
 384   3                      }
 385   2              }
 386   1      
 387   1          if (!(STOE_ConnectState & STOE_WIRELESS_LINK))
 388   1              mwifapp_ConnStatus = 0;
 389   1      
 390   1      } /* End of MWIFAPP_Task() */
 391          
 392          /*
 393           * ----------------------------------------------------------------------------
 394           * Function Name: MWIFAPP_TaskInit()
 395           * Purpose:
 396           * Params:
 397           * Returns:
 398           * Note:
 399           * ----------------------------------------------------------------------------
 400           */
 401          void MWIFAPP_TaskInit(void)
 402          {
 403   1              memset((U8_T*)&mwifapp_cmdFifo, 0, sizeof(MWIFAPP_LINKLIST));
 404   1              memset((U8_T*)&mwifapp_waitFifo, 0, sizeof(MWIFAPP_LINKLIST));
 405   1              memset((U8_T*)&MWIFAPP_WiFiInfo, 0, sizeof(MWIFAPP_WiFi_INFO)); 
 406   1      } /* End of MWIFAPP_TaskInit() */
 407          
 408          #endif /* End of #if (MWIFAPP_TASK_FUNC_ENABLE) */
 409          #endif /* End of #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI) */
 410          #endif /* End of #if (IO_CPU_TYPE) */
 411          /* End of mwifapp.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1859    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    957      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.05   MWIFAPP                                                               04/11/2012 16:46:57 PAGE 8   

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
