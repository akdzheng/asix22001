C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE CLICMD
OBJECT MODULE PLACED IN .\clicmd.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mconsole\clicmd.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCD
                    -IR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\m
                    -ping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\s
                    -rc\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFINE
                    -(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\clicmd.lst) OBJECT(.\clicmd.obj)

line level    source

   1          
   2          /* INCLUDE FILE DECLARATIONS */
   3          #include <absacc.h>
   4          #include <stdio.h>
   5          #include <stdarg.h>
   6          #include <stdlib.h>
   7          #include <string.h>
   8          #include "types.h"
   9          #include "main.h"
  10          #include "printd.h"
  11          #include "gconfig.h"
  12          #include "gs2w.h"
  13          #include "tcpip.h"
  14          #include "gtcpdat.h"
  15          #include "ax22000.h"
  16          #include "hsuart.h"
  17          #include "stoe.h"
  18          #include "stoe_cfg.h"
  19          #include "console.h"
  20          #include "clicmd.h"
  21          #include "at24c02.h"
  22          #include "mcpu.h"
  23          #include "mwioctl.h"
  24          #include "mwifapp.h"
  25          #include "ping.h"
  26          #include "delay.h"
  27          #include "counter.h"                                                    //zwh.add 20120302
  28          
  29          /* NAMING CONSTANT DECLARATIONS */
  30          
  31          /* MACRO DECLARATIONS */
  32          #define IsDigit(x) ((x < 0x3a && x > 0x2f) ? 1 : 0)
  33           
  34          /* GLOBAL VARIABLES DECLARATIONS */
  35          static S16_T clicmd_SetIp(CONSOLE_Inst *pInst);
  36          static S16_T clicmd_SetIpHelp(CONSOLE_Inst *pInst);
  37          
  38          static S16_T clicmd_SetMask(CONSOLE_Inst *pInst);
  39          static S16_T clicmd_SetMaskHelp(CONSOLE_Inst *pInst);
  40          
  41          static S16_T clicmd_SetGateway(CONSOLE_Inst *pInst);
  42          static S16_T clicmd_SetGatewayHelp(CONSOLE_Inst *pInst);
  43          
  44          static S16_T clicmd_SetDnsIp(CONSOLE_Inst *pInst);
  45          static S16_T clicmd_SetDnsIpHelp(CONSOLE_Inst *pInst);
  46          
  47          static S16_T clicmd_SetSerialPort(CONSOLE_Inst *pInst);
  48          static S16_T clicmd_SetSerialPortHelp(CONSOLE_Inst *pInst);
  49          
  50          static S16_T clicmd_SetDeviceMode(CONSOLE_Inst *pInst);
  51          static S16_T clicmd_SetDeviceModeHelp(CONSOLE_Inst *pInst);
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 2   

  52          
  53          static S16_T clicmd_SetServerPort(CONSOLE_Inst *pInst);
  54          static S16_T clicmd_SetServerPortHelp(CONSOLE_Inst *pInst);
  55          
  56          static S16_T clicmd_SetRemotePort(CONSOLE_Inst *pInst);
  57          static S16_T clicmd_SetRemotePortHelp(CONSOLE_Inst *pInst);
  58          
  59          static S16_T clicmd_SetDhcpClient(CONSOLE_Inst *pInst);
  60          static S16_T clicmd_SetDhcpClientHelp(CONSOLE_Inst *pInst);
  61          
  62          static S16_T clicmd_SetConnectType(CONSOLE_Inst *pInst);
  63          static S16_T clicmd_SetConnectTypeHelp(CONSOLE_Inst *pInst);
  64          
  65          static S16_T clicmd_SaveConfig(CONSOLE_Inst *pInst);
  66          static S16_T clicmd_SaveConfigHelp(CONSOLE_Inst *pInst);
  67          
  68          static S16_T clicmd_SetEtherTimer(CONSOLE_Inst *pInst);
  69          static S16_T clicmd_SetEtherTimerHelp(CONSOLE_Inst *pInst);
  70          
  71          static S16_T clicmd_SetUsername(CONSOLE_Inst *pInst);
  72          static S16_T clicmd_SetUsernameHelp(CONSOLE_Inst *pInst);
  73          
  74          static S16_T clicmd_GetIpConfig(CONSOLE_Inst *pInst);
  75          static S16_T clicmd_GetIpConfigHelp(CONSOLE_Inst *pInst);
  76          
  77          static S16_T clicmd_SetRs485Mode(CONSOLE_Inst *pInst);
  78          static S16_T clicmd_SetRs485ModeHelp(CONSOLE_Inst *pInst);
  79          
  80          static S16_T clicmd_SetDestHostName(CONSOLE_Inst *pInst);
  81          static S16_T clicmd_SetDestHostNameHelp(CONSOLE_Inst *pInst);
  82          
  83          static S16_T clicmd_SetTftpServerIp(CONSOLE_Inst *pInst);
  84          static S16_T clicmd_SetTftpServerIpHelp(CONSOLE_Inst *pInst);
  85          
  86          static S16_T clicmd_SetFilename(CONSOLE_Inst *pInst);
  87          static S16_T clicmd_SetFilenameHelp(CONSOLE_Inst *pInst);
  88          
  89          static S16_T clicmd_UpdateFirmware(CONSOLE_Inst *pInst);
  90          static S16_T clicmd_UpdateFirmwareHelp(CONSOLE_Inst *pInst);
  91          
  92          static S16_T clicmd_SetEEP(CONSOLE_Inst *pInst);
  93          static S16_T clicmd_SetEEPHelp(CONSOLE_Inst *pInst);
  94          
  95          static S16_T clicmd_DebugMsg(CONSOLE_Inst *pInst);
  96          static S16_T clicmd_DebugMsgHelp(CONSOLE_Inst *pInst);
  97          
  98          static S16_T clicmd_ConnectStatus(CONSOLE_Inst *pInst);
  99          static S16_T clicmd_ConnectStatusHelp(CONSOLE_Inst *pInst);
 100          
 101          static S16_T clicmd_Ping(CONSOLE_Inst *pInst);
 102          static S16_T clicmd_PingHelp(CONSOLE_Inst *pInst);
 103          
 104          static S16_T clicmd_SetDefault(CONSOLE_Inst *pInst);
 105          static S16_T clicmd_SetDefaultHelp(CONSOLE_Inst *pInst);
 106          
 107          static S16_T clicmd_SetBMCast(CONSOLE_Inst *pInst);
 108          static S16_T clicmd_SetBMCastHelp(CONSOLE_Inst *pInst);
 109          
 110          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 111          static S16_T clicmd_SetSSID(CONSOLE_Inst *pInst);
 112          static S16_T clicmd_SetSSIDHelp(CONSOLE_Inst *pInst);
 113          
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 3   

 114          static S16_T clicmd_SetNetworkType(CONSOLE_Inst *pInst);
 115          static S16_T clicmd_SetNetworkTypeHelp(CONSOLE_Inst *pInst);
 116          
 117          static S16_T clicmd_SetChannel(CONSOLE_Inst *pInst);
 118          static S16_T clicmd_SetChannelHelp(CONSOLE_Inst *pInst);
 119          
 120          static S16_T clicmd_SetWep64Key(CONSOLE_Inst *pInst);
 121          static S16_T clicmd_SetWep64KeyHelp(CONSOLE_Inst *pInst);
 122          
 123          static S16_T clicmd_SetWep128Key(CONSOLE_Inst *pInst);
 124          static S16_T clicmd_SetWep128KeyHelp(CONSOLE_Inst *pInst);
 125          
 126          static S16_T clicmd_SetWepKeyIndex(CONSOLE_Inst *pInst);
 127          static S16_T clicmd_SetWepKeyIndexHelp(CONSOLE_Inst *pInst);
 128          
 129          static S16_T clicmd_SetWPAPassphrase(CONSOLE_Inst *pInst);
 130          static S16_T clicmd_SetWPAPassphraseHelp(CONSOLE_Inst *pInst);
 131          
 132          static S16_T clicmd_SetEncryptionType(CONSOLE_Inst *pInst);
 133          static S16_T clicmd_SetEncryptionTypeHelp(CONSOLE_Inst *pInst);
 134          
 135          static S16_T clicmd_SiteSurvey(CONSOLE_Inst *pInst);
 136          static S16_T clicmd_SiteSurveyHelp(CONSOLE_Inst *pInst);
 137          
 138          static S16_T clicmd_JoinBSS(CONSOLE_Inst *pInst);
 139          static S16_T clicmd_JoinBSSHelp(CONSOLE_Inst *pInst);
 140          
 141          static S16_T clicmd_SetWepKeyLength(CONSOLE_Inst *pInst);
 142          static S16_T clicmd_SetWepKeyLengthHelp(CONSOLE_Inst *pInst);
 143          
 144          static S16_T clicmd_SetPreamble(CONSOLE_Inst *pInst);
 145          static S16_T clicmd_SetPreambleHelp(CONSOLE_Inst *pInst);
 146          
 147          static S16_T clicmd_SetRTSThreshold(CONSOLE_Inst *pInst);
 148          static S16_T clicmd_SetRTSThresholdHelp(CONSOLE_Inst *pInst);
 149          
 150          //static S16_T clicmd_SetOperationMode(CONSOLE_Inst *pInst);
 151          //static S16_T clicmd_SetOperationModeHelp(CONSOLE_Inst *pInst);
 152          
 153          static S16_T clicmd_SetTxPowerLevel(CONSOLE_Inst *pInst);
 154          static S16_T clicmd_SetTxPowerLevelHelp(CONSOLE_Inst *pInst);
 155          
 156          static S16_T clicmd_SetDataRate(CONSOLE_Inst *pInst);
 157          static S16_T clicmd_SetDataRateHelp(CONSOLE_Inst *pInst);
 158          
 159          static S16_T clicmd_SetAutoPowerControl(CONSOLE_Inst *pInst);
 160          static S16_T clicmd_SetAutoPowerControlHelp(CONSOLE_Inst *pInst);
 161          
 162          static S16_T clicmd_SetBeaconInterval(CONSOLE_Inst *pInst);
 163          static S16_T clicmd_SetBeaconIntervalHelp(CONSOLE_Inst *pInst);
 164          
 165          static S16_T clicmd_GetWifiConfig(CONSOLE_Inst *pInst);
 166          static S16_T clicmd_GetWifiConfigHelp(CONSOLE_Inst *pInst);
 167          static S16_T clicmd_SetProtectFrame(CONSOLE_Inst *pInst);
 168          static S16_T clicmd_SetProtectFrameHelp(CONSOLE_Inst *pInst);
 169          #endif /* (MAC_ARBIT_MODE & MAC_ARBIT_WIFI) */
 170          
 171          static S16_T clicmd_SetDhcpServer(CONSOLE_Inst *pInst);
 172          static S16_T clicmd_SetDhcpServerHelp(CONSOLE_Inst *pInst);
 173          static S16_T clicmd_EnableDhcpServer(CONSOLE_Inst *pInst);
 174          static S16_T clicmd_EnableDhcpServerHelp(CONSOLE_Inst *pInst);
 175          static S16_T clicmd_Show(CONSOLE_Inst *pInst);
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 4   

 176          static S16_T clicmd_ShowHelp(CONSOLE_Inst *pInst);
 177          
 178          
 179          CONSOLE_CmdEntry const FAR CLICMD_userCmdTable[]=
 180          {
 181              {"username", clicmd_SetUsername, clicmd_SetUsernameHelp, 5},
 182              {"ipconfig", clicmd_GetIpConfig, clicmd_GetIpConfigHelp, 5},
 183              {"setip", clicmd_SetIp, clicmd_SetIpHelp, 5},
 184              {"setmask", clicmd_SetMask, clicmd_SetMaskHelp, 5},
 185              {"setgateway", clicmd_SetGateway, clicmd_SetGatewayHelp, 5},
 186              {"setdns", clicmd_SetDnsIp, clicmd_SetDnsIpHelp, 5},
 187              {"serialport", clicmd_SetSerialPort, clicmd_SetSerialPortHelp, 5},
 188              {"setmode", clicmd_SetDeviceMode, clicmd_SetDeviceModeHelp, 5},
 189              {"setsrvport", clicmd_SetServerPort, clicmd_SetServerPortHelp, 5},
 190              {"setdstport", clicmd_SetRemotePort, clicmd_SetRemotePortHelp, 5},
 191              {"dhcpclient", clicmd_SetDhcpClient, clicmd_SetDhcpClientHelp, 5},
 192              {"connectype", clicmd_SetConnectType, clicmd_SetConnectTypeHelp, 5},
 193              {"transmitimer", clicmd_SetEtherTimer, clicmd_SetEtherTimerHelp, 5},
 194              {"saveconfig", clicmd_SaveConfig, clicmd_SaveConfigHelp, 5},
 195                  
 196              {"rs485", clicmd_SetRs485Mode, clicmd_SetRs485ModeHelp, 5}, 
 197                  
 198              {"setdsthn", clicmd_SetDestHostName, clicmd_SetDestHostNameHelp, 5},
 199              {"tftpsrv", clicmd_SetTftpServerIp, clicmd_SetTftpServerIpHelp, 5},
 200              {"filename", clicmd_SetFilename, clicmd_SetFilenameHelp, 5},
 201              {"dlfirmware", clicmd_UpdateFirmware, clicmd_UpdateFirmwareHelp, 5},
 202              {"seteep", clicmd_SetEEP, clicmd_SetEEPHelp, 5},
 203              {"dbgmsg", clicmd_DebugMsg, clicmd_DebugMsgHelp, 5},
 204              {"connstatus", clicmd_ConnectStatus, clicmd_ConnectStatusHelp, 5},
 205              {"ping", clicmd_Ping, clicmd_PingHelp, 5},  
 206              {"setdef", clicmd_SetDefault, clicmd_SetDefaultHelp, 5},
 207              {"bmcast", clicmd_SetBMCast, clicmd_SetBMCastHelp, 5},      
 208          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 209                  {"setssid", clicmd_SetSSID, clicmd_SetSSIDHelp, 5},
 210                  {"setnt", clicmd_SetNetworkType, clicmd_SetNetworkTypeHelp, 5},
 211              {"setch", clicmd_SetChannel, clicmd_SetChannelHelp, 5},
 212              {"wepklen", clicmd_SetWepKeyLength, clicmd_SetWepKeyLengthHelp, 5},
 213                  {"setw64k", clicmd_SetWep64Key, clicmd_SetWep64KeyHelp, 5},
 214                  {"setw128k", clicmd_SetWep128Key, clicmd_SetWep128KeyHelp, 5},
 215                  {"setwki", clicmd_SetWepKeyIndex, clicmd_SetWepKeyIndexHelp, 5},
 216                  {"setwp", clicmd_SetWPAPassphrase, clicmd_SetWPAPassphraseHelp, 5},
 217                  {"setet", clicmd_SetEncryptionType, clicmd_SetEncryptionTypeHelp, 5},
 218                  {"sisrvy", clicmd_SiteSurvey, clicmd_SiteSurveyHelp, 5},
 219                  {"jbss", clicmd_JoinBSS, clicmd_JoinBSSHelp, 5},
 220          //      {"setopm", clicmd_SetOperationMode, clicmd_SetOperationModeHelp, 5},
 221                  {"setpmb", clicmd_SetPreamble, clicmd_SetPreambleHelp, 5},
 222                  {"setrts", clicmd_SetRTSThreshold, clicmd_SetRTSThresholdHelp, 5},
 223                  {"settpl", clicmd_SetTxPowerLevel, clicmd_SetTxPowerLevelHelp, 5},
 224                  {"setdr", clicmd_SetDataRate, clicmd_SetDataRateHelp, 5},
 225                  {"setapc", clicmd_SetAutoPowerControl, clicmd_SetAutoPowerControlHelp, 5},
 226                  {"setbi", clicmd_SetBeaconInterval, clicmd_SetBeaconIntervalHelp, 5},
 227                  {"wificonfig", clicmd_GetWifiConfig, clicmd_GetWifiConfigHelp, 5},      
 228                  {"setpft", clicmd_SetProtectFrame, clicmd_SetProtectFrameHelp, 5},      
 229          #endif
 230              {"dhcpsrv", clicmd_SetDhcpServer, clicmd_SetDhcpServerHelp, 5},
 231              {"setdhcpsrv", clicmd_EnableDhcpServer, clicmd_EnableDhcpServerHelp, 5},
 232              {"show", clicmd_Show, clicmd_ShowHelp, 5},                   //zwh.add 20120302
 233          };
 234          
 235          CONSOLE_Account CLICMD_userTable[MAX_USER_ACCOUNT];
 236          
 237          /* LOCAL VARIABLES DECLARATIONS */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 5   

 238          U8_T StrBuf[128], StrLen;
 239          S16_T argc;
 240          S8_T **argv;
 241          
 242          /* LOCAL SUBPROGRAM DECLARATIONS */
 243          static U8_T clicmd_DecText2Char(U8_T *pbuf, U8_T *pValue, U8_T len);
 244          static U8_T clicmd_HexText2Char(U8_T *pbuf, U8_T *pValue, U8_T len);
 245          static U8_T clicmd_DecText2Short(U8_T *pbuf, U16_T *pValue, U8_T len);
 246          static U8_T clicmd_HexText2Short(U8_T *pbuf, U16_T *pValue, U8_T len);
 247          static U8_T clicmd_HexText2Long(U8_T *pbuf, U32_T *pValue, U8_T len);
 248          static S16_T clicmd_GetIp2Ulong(U8_T *pBuf, U8_T len, U32_T *ipAddr);
 249          static S16_T clicmd_CheckIpInput(U8_T *pBuf);
 250          static U8_T clicmd_ValidIp(U32_T ipAddr);
 251          
 252          /* LOCAL SUBPROGRAM BODIES */
 253          /*
 254           * ----------------------------------------------------------------------------
 255           * Function Name: clicmd_DecText2Char
 256           * Purpose:
 257           * Params:
 258           * Returns:
 259           * Note:
 260           * ----------------------------------------------------------------------------
 261           */
 262          static U8_T clicmd_DecText2Char(U8_T *pbuf, U8_T *pValue, U8_T len)
 263          {
 264   1              *pValue = 0;
 265   1      
 266   1              if ((len == 0) || (len > 3))
 267   1              {
 268   2                      return 0xFF;
 269   2              }
 270   1      
 271   1              while (len--)
 272   1              {
 273   2                      *pValue *= 10;
 274   2       
 275   2                      if ((*pbuf < 0x3A) && (*pbuf > 0x2F))
 276   2                      {
 277   3                              *pValue += (*pbuf - 0x30);
 278   3                      }
 279   2                      else
 280   2                      {
 281   3                              return 0xFF;
 282   3                      }
 283   2      
 284   2                      pbuf++;
 285   2              }
 286   1      
 287   1              if (*pValue > 255)
 288   1              {
 289   2                      return 0xFF;
 290   2              }
 291   1      
 292   1              return 0;
 293   1      
 294   1      } /* End of  clicmd_DecText2Char() */
 295          
 296          /*
 297           * ----------------------------------------------------------------------------
 298           * Function Name: clicmd_HexText2Char
 299           * Purpose:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 6   

 300           * Params:
 301           * Returns:
 302           * Note:
 303           * ----------------------------------------------------------------------------
 304           */
 305          static U8_T clicmd_HexText2Char(U8_T *pbuf, U8_T *pValue, U8_T len)
 306          {
 307   1              *pValue = 0;
 308   1      
 309   1              if ((len == 0) || (len > 2))
 310   1              {
 311   2                      return 0xFF;
 312   2              }
 313   1      
 314   1              while (len--)
 315   1              {
 316   2                      *pValue *= 16;
 317   2       
 318   2                      if ((*pbuf < 0x3A) && (*pbuf > 0x2F))
 319   2                              *pValue += (*pbuf - 0x30);
 320   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 321   2                              *pValue += (*pbuf - 0x37);
 322   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 323   2                              *pValue += (*pbuf - 0x57);
 324   2                      else
 325   2                              return 0xFF;
 326   2      
 327   2                      pbuf++;
 328   2              }
 329   1      
 330   1              return 0;
 331   1      
 332   1      } /* End of  clicmd_HexText2Char() */
 333          
 334          /*
 335           * ----------------------------------------------------------------------------
 336           * Function Name: clicmd_DecText2Short
 337           * Purpose:
 338           * Params:
 339           * Returns:
 340           * Note:
 341           * ----------------------------------------------------------------------------
 342           */
 343          static U8_T clicmd_DecText2Short(U8_T *pbuf, U16_T *pValue, U8_T len)
 344          {
 345   1              *pValue = 0;
 346   1      
 347   1              if ((len == 0) || (len > 5))
 348   1                      return 0xff;
 349   1      
 350   1              while (len--)
 351   1              {
 352   2                      *pValue *= 10;
 353   2       
 354   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 355   2                              *pValue += (*pbuf - 0x30);
 356   2                      else
 357   2                              return 0xff;
 358   2      
 359   2                      pbuf++;
 360   2              }
 361   1      
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 7   

 362   1              if (*pValue > 65535)
 363   1                      return 0xff;
 364   1      
 365   1              return 0;
 366   1      
 367   1      } /* End of  clicmd_DecText2Short() */
 368          
 369          /*
 370           * ----------------------------------------------------------------------------
 371           * Function Name: dbg_HexaText2Short
 372           * Purpose:
 373           * Params:
 374           * Returns:
 375           * Note:
 376           * ----------------------------------------------------------------------------
 377           */
 378          static U8_T clicmd_HexText2Short(U8_T *pbuf, U16_T *pValue, U8_T len)
 379          {
 380   1              *pValue = 0;
 381   1      
 382   1              if ((len == 0) || (len > 4))
 383   1                      return 0xff;
 384   1      
 385   1              while (len--)
 386   1              {
 387   2                      *pValue *= 16;
 388   2       
 389   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 390   2                              *pValue += (*pbuf - 0x30);
 391   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 392   2                              *pValue += (*pbuf - 0x37);
 393   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 394   2                              *pValue += (*pbuf - 0x57);
 395   2                      else
 396   2                              return 0xff;
 397   2      
 398   2                      pbuf++;
 399   2              }
 400   1      
 401   1              return 0;
 402   1      
 403   1      } /* End of  clicmd_HexaText2Short() */
 404          
 405          /*
 406           * ----------------------------------------------------------------------------
 407           * Function Name: clicmd_HexText2Long
 408           * Purpose:
 409           * Params:
 410           * Returns:
 411           * Note:
 412           * ----------------------------------------------------------------------------
 413           */
 414          static U8_T clicmd_HexText2Long(U8_T *pbuf, U32_T *pValue, U8_T len)
 415          {
 416   1              *pValue = 0;
 417   1      
 418   1              if ((len == 0) || (len > 8))
 419   1                      return 0xff;
 420   1      
 421   1              while (len--)
 422   1              {
 423   2                      *pValue *= 16;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 8   

 424   2       
 425   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 426   2                              *pValue += (*pbuf - 0x30);
 427   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 428   2                              *pValue += (*pbuf - 0x37);
 429   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 430   2                              *pValue += (*pbuf - 0x57);
 431   2                      else
 432   2                              return 0xff;
 433   2      
 434   2                      pbuf++;
 435   2              }
 436   1      
 437   1              return 0;
 438   1      
 439   1      } /* End of  clicmd_HexText2Long() */
 440          
 441          /*
 442           * ----------------------------------------------------------------------------
 443           * Function Name: clicmd_GetIp2Ulong
 444           * Purpose: Transfer a ip address string to ulong number. exp: 0xc0a80003
 445           * Params:
 446           * Returns:
 447           * Note:
 448           * ----------------------------------------------------------------------------
 449           */
 450          static S16_T clicmd_GetIp2Ulong(U8_T *pBuf, U8_T len, U32_T *ipAddr)
 451          {
 452   1              U8_T *point = (U8_T *)ipAddr;
 453   1              U8_T count = 0, digits;
 454   1          U16_T value;
 455   1      
 456   1              while (len > 0)
 457   1              {
 458   2                      digits = 0;
 459   2              value = 0;
 460   2                      while ((*pBuf != '.') && len > 0)
 461   2                      {
 462   3                              digits++;
 463   3                              if (digits > 3)
 464   3                                      return -1;
 465   3      
 466   3                  value *= 10;
 467   3        
 468   3                  if (IsDigit(*pBuf))
 469   3                      value += (*pBuf - 0x30);
 470   3                              else
 471   3                                      return -1;
 472   3      
 473   3                              pBuf++; len--;
 474   3                      }
 475   2                      if (!digits)
 476   2                              return -1;
 477   2              if (value > 255)
 478   2                  return -1;
 479   2      
 480   2              *point = (U8_T)(value & 0xFF);
 481   2      
 482   2                      if (len == 0)
 483   2                              break;
 484   2      
 485   2                      pBuf++; len--;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 9   

 486   2                      count++;
 487   2                      point++;
 488   2      
 489   2                      if (count > 3)
 490   2                              return -1;
 491   2              }
 492   1      
 493   1              if (count != 3)
 494   1                      return -1;
 495   1      
 496   1              return 1;
 497   1      } /* End of clicmd_GetIp2Ulong */
 498          
 499          /*
 500           * ----------------------------------------------------------------------------
 501           * Function Name: clicmd_ValidIp
 502           * Purpose: Check the IP validation
 503           * Params:
 504           * Returns:
 505           * Note:
 506           * ----------------------------------------------------------------------------
 507           */
 508          static U8_T clicmd_ValidIp(U32_T ipAddr)
 509          {
 510   1          U8_T *point = (U8_T *)&ipAddr;
 511   1          
 512   1          /* class D/E */
 513   1          if ((point[0] & 0xF0) >= 0xE0)
 514   1              return 0;
 515   1      
 516   1          if (point[3] == 0xFF || point[3] == 0)
 517   1              return 0;
 518   1      
 519   1          /* Class C */
 520   1          if ((point[0] & 0xC0) && point[2] == 0xFF)
 521   1              return 0;
 522   1      
 523   1          return 1;
 524   1      } /* End of clicmd_ValidIp() */
 525          
 526          /*
 527           * ----------------------------------------------------------------------------
 528           * Function Name: clicmd_CheckIpInput
 529           * Purpose: Check the input data whether is IP format xxx.xxx.xxx.xxx
 530           * Params:
 531           * Returns:
 532           * Note:
 533           * ----------------------------------------------------------------------------
 534           */
 535          static S16_T clicmd_CheckIpInput(U8_T *pBuf)
 536          {
 537   1              U8_T *point = pBuf;
 538   1              U8_T len = 0;
 539   1      
 540   1          if (!pBuf || (len=strlen(pBuf)) == 0)
 541   1              return 0;
 542   1        
 543   1              while (len > 0)
 544   1              {
 545   2                      if (IsDigit(*point) || *point == '.')
 546   2              {
 547   3                  point++;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 10  

 548   3                  len --;
 549   3              }
 550   2              else
 551   2                  return 0;
 552   2          }
 553   1      
 554   1              return 1;
 555   1      } /* End of clicmd_CheckIpInput */
 556          
 557          /* EXPORTED SUBPROGRAM BODIES */
 558          
 559          /*
 560           * ----------------------------------------------------------------------------
 561           * Function Name: CLICMD_GetCmdTableSize()
 562           * Purpose:
 563           * Params:
 564           * Returns:
 565           * Note:
 566           * ----------------------------------------------------------------------------
 567           */
 568          U16_T CLICMD_GetCmdTableSize(void)
 569          {
 570   1          return sizeof(CLICMD_userCmdTable)/sizeof(CONSOLE_CmdEntry);
 571   1      } /* End of CLICMD_GetCmdTableSize() */
 572          
 573          /*
 574           * ----------------------------------------------------------------------------
 575           * Function Name: clicmd_SetIp()
 576           * Purpose:
 577           * Params:
 578           * Returns:
 579           * Note:
 580           * ----------------------------------------------------------------------------
 581           */
 582          static S16_T clicmd_SetIp(CONSOLE_Inst *pInst)
 583          {
 584   1          U32_T addr;
 585   1          
 586   1          argc = pInst->Argc;
 587   1          argv = pInst->Argv;
 588   1          
 589   1          if (argc == 0) /* current setting */
 590   1          {
 591   2              addr = GCONFIG_GetServerStaticIP();
 592   2              CONSOLE_PutMessage(pInst, "IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 593   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 594   2              return 1;
 595   2          }
 596   1          else if (argc > 1)
 597   1              return -1;
 598   1      
 599   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 600   1          {
 601   2              if (clicmd_ValidIp(addr))
 602   2                  GCONFIG_SetServerStaticIP(addr);
 603   2              else
 604   2                  return -1;
 605   2          }
 606   1          else
 607   1              return -1;
 608   1      
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 11  

 609   1          return 1;
 610   1      } /* End of clicmd_SetIp() */
 611          
 612          /*
 613           * ----------------------------------------------------------------------------
 614           * Function Name: clicmd_SetIpHelp()
 615           * Purpose:
 616           * Params:
 617           * Returns:
 618           * Note:
 619           * ----------------------------------------------------------------------------
 620           */
 621          static S16_T clicmd_SetIpHelp(CONSOLE_Inst *pInst)
 622          {
 623   1          CONSOLE_PutMessage(pInst, "Usage: setip <ip addr>\r\n");
 624   1          return 1;
 625   1      } /* End of clicmd_SetIpHelp() */
 626          
 627          /*
 628           * ----------------------------------------------------------------------------
 629           * Function Name: clicmd_SetMask()
 630           * Purpose:
 631           * Params:
 632           * Returns:
 633           * Note:
 634           * ----------------------------------------------------------------------------
 635           */
 636          static S16_T clicmd_SetMask(CONSOLE_Inst *pInst)
 637          {
 638   1          U32_T addr;
 639   1      
 640   1          argc = pInst->Argc;
 641   1          argv = pInst->Argv;
 642   1      
 643   1          if (argc == 0) /* current setting */
 644   1          {
 645   2              addr = GCONFIG_GetNetmask();
 646   2              CONSOLE_PutMessage(pInst, "Netmask: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 647   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 648   2              return 1;
 649   2          }
 650   1          else if (argc > 1)
 651   1              return -1;
 652   1      
 653   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 654   1              GCONFIG_SetNetmask(addr);
 655   1          else
 656   1              return -1;
 657   1      
 658   1          return 1;
 659   1      } /* End of clicmd_SetMask() */
 660          
 661          /*
 662           * ----------------------------------------------------------------------------
 663           * Function Name: clicmd_SetMaskHelp()
 664           * Purpose:
 665           * Params:
 666           * Returns:
 667           * Note:
 668           * ----------------------------------------------------------------------------
 669           */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 12  

 670          static S16_T clicmd_SetMaskHelp(CONSOLE_Inst *pInst)
 671          {
 672   1          CONSOLE_PutMessage(pInst, "Usage: setmask <netmask>\r\n");
 673   1          return 1;
 674   1      } /* End of clicmd_SetMaskHelp() */
 675          
 676          /*
 677           * ----------------------------------------------------------------------------
 678           * Function Name: clicmd_SetGateway()
 679           * Purpose:
 680           * Params:
 681           * Returns:
 682           * Note:
 683           * ----------------------------------------------------------------------------
 684           */
 685          static S16_T clicmd_SetGateway(CONSOLE_Inst *pInst)
 686          {
 687   1          U32_T addr;
 688   1      
 689   1          argc = pInst->Argc;
 690   1          argv = pInst->Argv;
 691   1      
 692   1          if (argc == 0) /* current setting */
 693   1          {
 694   2              addr = GCONFIG_GetGateway();
 695   2              CONSOLE_PutMessage(pInst, "Gateway: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 696   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 697   2              return 1;
 698   2          }
 699   1          else if (argc > 1)
 700   1              return -1;
 701   1      
 702   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 703   1          {
 704   2              if (clicmd_ValidIp(addr))
 705   2              GCONFIG_SetGateway(addr);
 706   2              else
 707   2                  return -1;
 708   2          }
 709   1          else
 710   1              return -1;
 711   1      
 712   1          return 1;
 713   1      } /* End of clicmd_SetGateway() */
 714          
 715          /*
 716           * ----------------------------------------------------------------------------
 717           * Function Name: clicmd_SetGatewayHelp()
 718           * Purpose:
 719           * Params:
 720           * Returns:
 721           * Note:
 722           * ----------------------------------------------------------------------------
 723           */
 724          static S16_T clicmd_SetGatewayHelp(CONSOLE_Inst *pInst)
 725          {
 726   1          CONSOLE_PutMessage(pInst, "Usage: setgateway <ip addr>\r\n");
 727   1          return 1;
 728   1      } /* End of clicmd_SetGatewayHelp() */
 729          
 730          /*
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 13  

 731           * ----------------------------------------------------------------------------
 732           * Function Name: clicmd_SetDnsIp()
 733           * Purpose:
 734           * Params:
 735           * Returns:
 736           * Note:
 737           * ----------------------------------------------------------------------------
 738           */
 739          static S16_T clicmd_SetDnsIp(CONSOLE_Inst *pInst)
 740          {
 741   1          U32_T addr;
 742   1      
 743   1          argc = pInst->Argc;
 744   1          argv = pInst->Argv;
 745   1      
 746   1          if (argc == 0) /* current setting */
 747   1          {
 748   2              addr = GCONFIG_GetDNS();
 749   2              CONSOLE_PutMessage(pInst, "DNS IP: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 750   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 751   2              return 1;
 752   2          }
 753   1          else if (argc > 1)
 754   1              return -1;
 755   1      
 756   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 757   1          {
 758   2              if (clicmd_ValidIp(addr))
 759   2              GCONFIG_SetDNS(addr);
 760   2              else
 761   2                  return -1;
 762   2          }
 763   1          else
 764   1              return -1;
 765   1      
 766   1          return 1;
 767   1      } /* End of clicmd_SetDnsIp() */
 768          
 769          /*
 770           * ----------------------------------------------------------------------------
 771           * Function Name: clicmd_SetDnsIpHelp()
 772           * Purpose:
 773           * Params:
 774           * Returns:
 775           * Note:
 776           * ----------------------------------------------------------------------------
 777           */
 778          static S16_T clicmd_SetDnsIpHelp(CONSOLE_Inst *pInst)
 779          {
 780   1          CONSOLE_PutMessage(pInst, "Usage: setdns <ip addr>\r\n");
 781   1          return 1;
 782   1      } /* End of clicmd_SetDnsIpHelp() */
 783          
 784          /*
 785           * ----------------------------------------------------------------------------
 786           * Function Name: clicmd_SetSerialPort()
 787           * Purpose:
 788           * Params:
 789           * Returns:
 790           * Note:
 791           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 14  

 792           */
 793          static S16_T clicmd_SetSerialPort(CONSOLE_Inst *pInst)
 794          {
 795   1          S16_T temp16;
 796   1          U8_T temp8, *argP;
 797   1         
 798   1          argc = pInst->Argc;
 799   1          argv = pInst->Argv;
 800   1      
 801   1          temp16 = GCONFIG_GetSerialPort();
 802   1          if (argc == 0) /* current setting */
 803   1          {
 804   2              CONSOLE_PutMessage(pInst, "Serial Port Settings:\r\n");
 805   2              CONSOLE_PutMessage(pInst, "    <baud rate>: ");
 806   2              temp8 = ((temp16>>11) & 0x1f);
 807   2              switch (temp8)
 808   2              {
 809   3                  case 0:
 810   3                      CONSOLE_PutMessage(pInst, "921600\r\n");
 811   3                      break;
 812   3                  case 1:
 813   3                      CONSOLE_PutMessage(pInst, "115200\r\n");
 814   3                      break;
 815   3                  case 2:
 816   3                      CONSOLE_PutMessage(pInst, "57600\r\n");
 817   3                      break;
 818   3                  case 3:
 819   3                      CONSOLE_PutMessage(pInst, "38400\r\n");
 820   3                      break;
 821   3                  case 4:
 822   3                      CONSOLE_PutMessage(pInst, "19200\r\n");
 823   3                      break;
 824   3                  case 5:
 825   3                      CONSOLE_PutMessage(pInst, "9600\r\n");
 826   3                      break;
 827   3                  case 6:
 828   3                      CONSOLE_PutMessage(pInst, "4800\r\n");
 829   3                      break;
 830   3                  case 7:
 831   3                      CONSOLE_PutMessage(pInst, "2400\r\n");
 832   3                      break;
 833   3                  case 8:
 834   3                      CONSOLE_PutMessage(pInst, "1200\r\n");
 835   3                      break;
 836   3                  default:
 837   3                      CONSOLE_PutMessage(pInst, "\r\n");
 838   3                      break;
 839   3              }
 840   2      
 841   2              CONSOLE_PutMessage(pInst, "    <data bits>: ");
 842   2              temp8 = ((temp16>>8) & 0x7);
 843   2              switch (temp8)
 844   2              {
 845   3                  case 0: 
 846   3                      CONSOLE_PutMessage(pInst, "5 bits\r\n");
 847   3                      break;
 848   3                  case 1: 
 849   3                      CONSOLE_PutMessage(pInst, "6 bits\r\n");
 850   3                      break;
 851   3                  case 2: 
 852   3                      CONSOLE_PutMessage(pInst, "7 bits\r\n");
 853   3                      break;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 15  

 854   3                  default: 
 855   3                      CONSOLE_PutMessage(pInst, "8 bits\r\n");
 856   3                      break;
 857   3              }
 858   2              
 859   2              CONSOLE_PutMessage(pInst, "    <parity>: ");
 860   2              temp8 = ((temp16>>5) & 0x7);
 861   2                  if (temp8 == 2) CONSOLE_PutMessage(pInst, "None\r\n");
 862   2                  else if (temp8 == 1) CONSOLE_PutMessage(pInst, "Even\r\n");
 863   2              else if (temp8 == 0) CONSOLE_PutMessage(pInst, "Odd\r\n");
 864   2      
 865   2              CONSOLE_PutMessage(pInst, "    <stop bits>: ");
 866   2              temp8 = (temp16 & 0x3);
 867   2              if (temp8 == 0) 
 868   2                  CONSOLE_PutMessage(pInst, "1\r\n");
 869   2              else if (temp8 == 1)
 870   2                  CONSOLE_PutMessage(pInst, "1.5\r\n");
 871   2              else if (temp8 == 2)
 872   2                  CONSOLE_PutMessage(pInst, "2\r\n");
 873   2      
 874   2              CONSOLE_PutMessage(pInst, "    <flow ctrl>: ");
 875   2              temp8 = ((temp16>>2) & 0x7);
 876   2              if (temp8 == 0) 
 877   2                  CONSOLE_PutMessage(pInst, "Xon/Xoff\r\n");
 878   2              else if (temp8 == 1)
 879   2                  CONSOLE_PutMessage(pInst, "Hardware\r\n");
 880   2              else if(temp8 == 2)
 881   2                  CONSOLE_PutMessage(pInst, "None\r\n");
 882   2      
 883   2              return 1;
 884   2          }
 885   1          else if (argc != 5)
 886   1              return -1;
 887   1      
 888   1          /* baud rate */
 889   1          argP = argv[0];
 890   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 891   1          {
 892   2              temp8 = *argP - 0x30;
 893   2              if (temp8 > 8)
 894   2                      return -1;
 895   2              temp16 &= 0x7FF;
 896   2              temp16 |= (temp8 << 11);
 897   2          }
 898   1          /* data bits */
 899   1          argP = argv[1];
 900   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 901   1          {
 902   2              temp8 = *argP - 0x30;
 903   2              if (temp8 > 3)
 904   2                      return -1;              
 905   2              temp16 &= 0xF8FF;
 906   2              temp16 |= (temp8 << 8);
 907   2          }
 908   1          /* parity */
 909   1          argP = argv[2];
 910   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 911   1          {
 912   2              temp8 = *argP - 0x30;
 913   2              if (temp8 > 2)
 914   2                      return -1;              
 915   2              temp16 &= 0xFF1F;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 16  

 916   2              temp16 |= (temp8 << 5);
 917   2          }
 918   1      
 919   1          /* stop bits */
 920   1          argP = argv[3];
 921   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 922   1          {
 923   2              temp8 = *argP - 0x30;
 924   2              if (temp8 > 2)
 925   2                      return -1;              
 926   2              temp16 &= 0xFFFC;
 927   2              temp16 |= temp8;
 928   2          }
 929   1          
 930   1          /* flow ctrl */
 931   1          argP = argv[4];
 932   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 933   1          {
 934   2              temp8 = *argP - 0x30;
 935   2              if (temp8 > 2)
 936   2                      return -1;              
 937   2              temp16 &= 0xFFE3;
 938   2              temp16 |= (temp8<<2);
 939   2          }
 940   1      
 941   1          GCONFIG_SetSerialPort(temp16);
 942   1      
 943   1          return 1;
 944   1      } /* End of clicmd_SetSerialPort() */
 945          
 946          /*
 947           * ----------------------------------------------------------------------------
 948           * Function Name: clicmd_SetSerialPortHelp()
 949           * Purpose:
 950           * Params:
 951           * Returns:
 952           * Note:
 953           * ----------------------------------------------------------------------------
 954           */
 955          static S16_T clicmd_SetSerialPortHelp(CONSOLE_Inst *pInst)
 956          {
 957   1          CONSOLE_PutMessage(pInst, "Usage: serialport <baud rate> <data bits> <parity> <stop bits> <flow ctrl>\
             -r\n");
 958   1          CONSOLE_PutMessage(pInst, "       <baud rate>: 0: 921600     5: 9600\r\n");
 959   1          CONSOLE_PutMessage(pInst, "                    1: 115200     6: 4800\r\n");
 960   1          CONSOLE_PutMessage(pInst, "                    2: 57600      7: 2400\r\n");
 961   1          CONSOLE_PutMessage(pInst, "                    3: 38400      8: 1200\r\n");
 962   1          CONSOLE_PutMessage(pInst, "                    4: 19200\r\n");
 963   1          CONSOLE_PutMessage(pInst, "       <data bits>: 0: 5      2: 7\r\n");
 964   1          CONSOLE_PutMessage(pInst, "                    1: 6      3: 8\r\n");
 965   1          CONSOLE_PutMessage(pInst, "       <parity>:    0: Odd    2: None\r\n");
 966   1          CONSOLE_PutMessage(pInst, "                    1: Even\r\n");
 967   1          CONSOLE_PutMessage(pInst, "       <stop bits>: 0: 1      1: 1.5      2: 2\r\n");
 968   1          CONSOLE_PutMessage(pInst, "       <flow ctrl>: 0: Xon/Xoff     2: None\r\n");
 969   1          CONSOLE_PutMessage(pInst, "                    1: Hardware\r\n");
 970   1          return 1;
 971   1      } /* End of clicmd_SetBaudRateHelp() */
 972          
 973          /*
 974           * ----------------------------------------------------------------------------
 975           * Function Name: clicmd_SetDeviceMode()
 976           * Purpose:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 17  

 977           * Params:
 978           * Returns:
 979           * Note:
 980           * ----------------------------------------------------------------------------
 981           */
 982          static S16_T clicmd_SetDeviceMode(CONSOLE_Inst *pInst)
 983          {
 984   1          U16_T temp16;
 985   1          U8_T temp8, *argP;
 986   1      
 987   1          argc = pInst->Argc;
 988   1          argv = pInst->Argv;
 989   1      
 990   1          temp16 = GCONFIG_GetNetwork();
 991   1          if (argc == 0) /* current setting */
 992   1          {
 993   2              temp16 &= GCONFIG_NETWORK_CLIENT;
 994   2              if (temp16)
 995   2                  CONSOLE_PutMessage(pInst, "Device Mode: CLIENT mode\r\n");
 996   2              else
 997   2                  CONSOLE_PutMessage(pInst, "Device Mode: SERVER mode\r\n");
 998   2              return 1;
 999   2          }
1000   1          else if (argc > 1)
1001   1              return -1;
1002   1          
1003   1          argP = argv[0];
1004   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1005   1              temp8 = *argP - 0x30;
1006   1          else
1007   1              return -1;
1008   1          if (temp8>1)
1009   1              return -1;
1010   1          temp16 &= ~GCONFIG_NETWORK_CLIENT;
1011   1          if (temp8)
1012   1              temp16 |= GCONFIG_NETWORK_CLIENT;
1013   1      
1014   1          GCONFIG_SetNetwork(temp16);
1015   1      
1016   1          return 1;
1017   1      
1018   1      } /* End of clicmd_SetDeviceMode() */
1019          
1020          /*
1021           * ----------------------------------------------------------------------------
1022           * Function Name: clicmd_SetDeviceModeHelp()
1023           * Purpose:
1024           * Params:
1025           * Returns:
1026           * Note:
1027           * ----------------------------------------------------------------------------
1028           */
1029          static S16_T clicmd_SetDeviceModeHelp(CONSOLE_Inst *pInst)
1030          {
1031   1          CONSOLE_PutMessage(pInst, "Usage: setmode <mode>\r\n");
1032   1          CONSOLE_PutMessage(pInst, "       <mode>: 0: SERVER     1: CLIENT\r\n");
1033   1      
1034   1          return 1;
1035   1      
1036   1      } /* End of clicmd_SetDeviceModeHelp() */
1037          
1038          /*
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 18  

1039           * ----------------------------------------------------------------------------
1040           * Function Name: clicmd_SetServerPort()
1041           * Purpose:
1042           * Params:
1043           * Returns:
1044           * Note:
1045           * ----------------------------------------------------------------------------
1046           */
1047          static S16_T clicmd_SetServerPort(CONSOLE_Inst *pInst)
1048          {
1049   1          U32_T temp32;
1050   1          U8_T *argP;
1051   1          
1052   1          argc = pInst->Argc;
1053   1          argv = pInst->Argv;
1054   1          
1055   1          if (argc == 0) /* current setting */
1056   1          {
1057   2              CONSOLE_PutMessage(pInst, "Server Port: %u\r\n", GCONFIG_GetServerDataPktListenPort());
1058   2      
1059   2              return 1;
1060   2          }
1061   1          else if (argc > 1)
1062   1              return -1;
1063   1          
1064   1          argP = argv[0];
1065   1          if (strlen(argP) <= 5)
1066   1              temp32 = atol(argP);
1067   1          else
1068   1              return -1;
1069   1      
1070   1          if (temp32 < 1024 || temp32 > 65535)
1071   1              return -1;
1072   1          
1073   1          GCONFIG_SetServerDataPktListenPort((U16_T)temp32);
1074   1      
1075   1          return 1;
1076   1      
1077   1      } /* End of clicmd_SetServerPort() */
1078          
1079          /*
1080           * ----------------------------------------------------------------------------
1081           * Function Name: clicmd_SetServerPortHelp()
1082           * Purpose:
1083           * Params:
1084           * Returns:
1085           * Note:
1086           * ----------------------------------------------------------------------------
1087           */
1088          static S16_T clicmd_SetServerPortHelp(CONSOLE_Inst *pInst)
1089          {
1090   1          CONSOLE_PutMessage(pInst, "Usage: setsrvport <port>\r\n");
1091   1      
1092   1          return 1;
1093   1      } /* End of clicmd_SetServerPortHelp() */
1094          
1095          /*
1096           * ----------------------------------------------------------------------------
1097           * Function Name: clicmd_SetEtherTimer()
1098           * Purpose:
1099           * Params:
1100           * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 19  

1101           * Note:
1102           * ----------------------------------------------------------------------------
1103           */
1104          static S16_T clicmd_SetEtherTimer(CONSOLE_Inst *pInst)
1105          {
1106   1          U32_T temp32;
1107   1          U8_T *argP;
1108   1      
1109   1          argc = pInst->Argc;
1110   1          argv = pInst->Argv;
1111   1      
1112   1          if (argc == 0) /* current setting */
1113   1          {
1114   2              CONSOLE_PutMessage(pInst, "Transmit Timer: %u\r\n", GCONFIG_GetEthernetTxTimer());
1115   2      
1116   2              return 1;
1117   2          }
1118   1          else if (argc > 1)
1119   1              return -1;
1120   1          
1121   1          argP = argv[0];
1122   1          if (strlen(argP) <= 5)
1123   1              temp32 = atol(argP);
1124   1          else
1125   1              return -1;
1126   1      
1127   1          if (temp32 < 10 || temp32 > 65535)
1128   1              return -1;
1129   1      
1130   1          GCONFIG_SetEthernetTxTimer((U16_T)temp32);
1131   1      
1132   1          return 1;
1133   1      } /* End of clicmd_SetEtherTimer() */
1134          
1135          /*
1136           * ----------------------------------------------------------------------------
1137           * Function Name: clicmd_SetEtherTimerHelp()
1138           * Purpose:
1139           * Params:
1140           * Returns:
1141           * Note:
1142           * ----------------------------------------------------------------------------
1143           */
1144          static S16_T clicmd_SetEtherTimerHelp(CONSOLE_Inst *pInst)
1145          {
1146   1          CONSOLE_PutMessage(pInst, "Usage: transmitimer <time>\r\n");
1147   1          CONSOLE_PutMessage(pInst, "       <time>: time in ms\r\n");
1148   1      
1149   1          return 1;
1150   1      } /* End of clicmd_SetEtherTimerHelp() */
1151          
1152          /*
1153           * ----------------------------------------------------------------------------
1154           * Function Name: clicmd_SetRemotPort()
1155           * Purpose:
1156           * Params:
1157           * Returns:
1158           * Note:
1159           * ----------------------------------------------------------------------------
1160           */
1161          static S16_T clicmd_SetRemotePort(CONSOLE_Inst *pInst)
1162          {
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 20  

1163   1          U32_T temp32;
1164   1          U8_T *argP;
1165   1      
1166   1          argc = pInst->Argc;
1167   1          argv = pInst->Argv;
1168   1      
1169   1          if (argc == 0) /* current setting */
1170   1          {
1171   2              CONSOLE_PutMessage(pInst, "Destination Port: %u\r\n", GCONFIG_GetClientDestPort());
1172   2      
1173   2              return 1;
1174   2          }
1175   1          else if (argc > 1)
1176   1              return -1;
1177   1          
1178   1          argP = argv[0];
1179   1          if (strlen(argP) <= 5)
1180   1              temp32 = atol(argP);
1181   1          else
1182   1              return -1;
1183   1      
1184   1          if (temp32 < 1024 || temp32 > 65535)
1185   1              return -1;
1186   1                      
1187   1          GCONFIG_SetClientDestPort((U16_T)temp32);
1188   1      
1189   1          return 1;
1190   1      
1191   1      } /* End of clicmd_SetRemotPort() */
1192          
1193          /*
1194           * ----------------------------------------------------------------------------
1195           * Function Name: clicmd_SetRemotePortHelp()
1196           * Purpose:
1197           * Params:
1198           * Returns:
1199           * Note:
1200           * ----------------------------------------------------------------------------
1201           */
1202          static S16_T clicmd_SetRemotePortHelp(CONSOLE_Inst *pInst)
1203          {
1204   1          CONSOLE_PutMessage(pInst, "Usage: setdstport <port>\r\n");
1205   1      
1206   1          return 1;
1207   1      } /* End of clicmd_SetRemotePortHelp() */
1208          
1209          /*
1210           * ----------------------------------------------------------------------------
1211           * Function Name: clicmd_SetDhcpClient()
1212           * Purpose:
1213           * Params:
1214           * Returns:
1215           * Note:
1216           * ----------------------------------------------------------------------------
1217           */
1218          static S16_T clicmd_SetDhcpClient(CONSOLE_Inst *pInst)
1219          {
1220   1          U16_T temp16;
1221   1          U8_T temp8, *argP;
1222   1      
1223   1          argc = pInst->Argc;
1224   1          argv = pInst->Argv;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 21  

1225   1      
1226   1          temp16 = GCONFIG_GetNetwork();
1227   1          if (argc == 0) /* current setting */
1228   1          {
1229   2              temp16 &= GCONFIG_NETWORK_DHCP_ENABLE;
1230   2              if (temp16)
1231   2                  CONSOLE_PutMessage(pInst, "DHCP Client: enable\r\n");
1232   2              else
1233   2                  CONSOLE_PutMessage(pInst, "DHCP Client: disable\r\n");
1234   2              return 1;
1235   2          }
1236   1          else if (argc > 1)
1237   1              return -1;
1238   1          
1239   1          argP = argv[0];
1240   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1241   1              temp8 = *argP - 0x30;
1242   1          else
1243   1              return -1;
1244   1      
1245   1          if (temp8 > 1)
1246   1              return -1;
1247   1                      
1248   1          temp16 &= ~GCONFIG_NETWORK_DHCP_ENABLE;
1249   1          if (temp8)
1250   1              temp16 |= GCONFIG_NETWORK_DHCP_ENABLE;
1251   1      
1252   1          GCONFIG_SetNetwork(temp16);
1253   1      
1254   1          return 1;
1255   1      
1256   1      } /* End of clicmd_SetDhcpClient() */
1257          
1258          /*
1259           * ----------------------------------------------------------------------------
1260           * Function Name: clicmd_SetDhcpClientHelp()
1261           * Purpose:
1262           * Params:
1263           * Returns:
1264           * Note:
1265           * ----------------------------------------------------------------------------
1266           */
1267          static S16_T clicmd_SetDhcpClientHelp(CONSOLE_Inst *pInst)
1268          {
1269   1          CONSOLE_PutMessage(pInst, "Usage: dhcpclient <status>\r\n");
1270   1          CONSOLE_PutMessage(pInst, "       <status>: 0: disable     1: enable\r\n");
1271   1      
1272   1          return 1;
1273   1      
1274   1      } /* End of clicmd_SetDhcpClientHelp() */
1275          
1276          /*
1277           * ----------------------------------------------------------------------------
1278           * Function Name: clicmd_SetConnectType()
1279           * Purpose:
1280           * Params:
1281           * Returns:
1282           * Note:
1283           * ----------------------------------------------------------------------------
1284           */
1285          static S16_T clicmd_SetConnectType(CONSOLE_Inst *pInst)
1286          {
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 22  

1287   1          U16_T temp16;
1288   1          U8_T temp8, *argP;
1289   1      
1290   1          argc = pInst->Argc;
1291   1          argv = pInst->Argv;
1292   1      
1293   1          temp16 = GCONFIG_GetNetwork();
1294   1          if (argc == 0) /* current setting */
1295   1          {
1296   2              temp16 &= (GCONFIG_NETWORK_PROTO_UDP | GCONFIG_NETWORK_PROTO_TCP);
1297   2              if (temp16 & GCONFIG_NETWORK_PROTO_UDP)
1298   2                  CONSOLE_PutMessage(pInst, "Connection Type: UDP\r\n");
1299   2              else if (temp16 & GCONFIG_NETWORK_PROTO_TCP)
1300   2                  CONSOLE_PutMessage(pInst, "Connection Type: TCP\r\n");
1301   2      
1302   2              return 1;
1303   2          }
1304   1          else if (argc > 1)
1305   1              return -1;
1306   1          
1307   1          argP = argv[0];
1308   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1309   1              temp8 = *argP - 0x30;
1310   1          else
1311   1              return -1;
1312   1      
1313   1          if (temp8 > 1)
1314   1              return -1;
1315   1                      
1316   1          temp16 &= ~(GCONFIG_NETWORK_PROTO_UDP | GCONFIG_NETWORK_PROTO_TCP);
1317   1          if (temp8)
1318   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP;
1319   1          else
1320   1              temp16 |= GCONFIG_NETWORK_PROTO_TCP;
1321   1      
1322   1          GCONFIG_SetNetwork(temp16);
1323   1      
1324   1          return 1;
1325   1      
1326   1      } /* End of clicmd_SetConnectType() */
1327          
1328          /*
1329           * ----------------------------------------------------------------------------
1330           * Function Name: clicmd_SetConnectTypeHelp()
1331           * Purpose:
1332           * Params:
1333           * Returns:
1334           * Note:
1335           * ----------------------------------------------------------------------------
1336           */
1337          static S16_T clicmd_SetConnectTypeHelp(CONSOLE_Inst *pInst)
1338          {
1339   1          CONSOLE_PutMessage(pInst, "Usage: connectype <protocol>\r\n");
1340   1          CONSOLE_PutMessage(pInst, "       <protocol>: 0: TCP     1: UDP\r\n");
1341   1      
1342   1          return 1;
1343   1      
1344   1      } /* End of clicmd_SetDhcpClientHelp() */
1345          
1346          /*
1347           * ----------------------------------------------------------------------------
1348           * Function Name: clicmd_SaveConfig()
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 23  

1349           * Purpose:
1350           * Params:
1351           * Returns:
1352           * Note:
1353           * ----------------------------------------------------------------------------
1354           */
1355          static S16_T clicmd_SaveConfig(CONSOLE_Inst *pInst)
1356          {
1357   1          argc = pInst->Argc;
1358   1      
1359   1          if (argc == 0) /* current setting */
1360   1          {
1361   2              CONSOLE_PutMessage(pInst, "Saving Configuration to FLASH\r\n");
1362   2              GCONFIG_WriteConfigData();
1363   2              return 1;
1364   2          }
1365   1      
1366   1          return 1;
1367   1      } /* End of clicmd_SaveConfig() */
1368          
1369          /*
1370           * ----------------------------------------------------------------------------
1371           * Function Name: clicmd_SaveConfigHelp()
1372           * Purpose:
1373           * Params:
1374           * Returns:
1375           * Note:
1376           * ----------------------------------------------------------------------------
1377           */
1378          static S16_T clicmd_SaveConfigHelp(CONSOLE_Inst *pInst)
1379          {
1380   1          CONSOLE_PutMessage(pInst, "Usage: saveconfig\r\n");
1381   1          return 1;
1382   1      } /* End of clicmd_SaveConfigHelp() */
1383          
1384          /*
1385           * ----------------------------------------------------------------------------
1386           * Function Name: clicmd_SetUsername()
1387           * Purpose:
1388           * Params:
1389           * Returns:
1390           * Note:
1391           * ----------------------------------------------------------------------------
1392           */
1393          static S16_T clicmd_SetUsername(CONSOLE_Inst *pInst)
1394          {
1395   1          argc = pInst->Argc;
1396   1          argv = pInst->Argv;
1397   1      
1398   1          if (argc == 1) /* current setting */
1399   1          {
1400   2              if (CONSOLE_ChangeUsername(pInst, argv[0]) < 0)
1401   2                  return -1;
1402   2          }
1403   1      
1404   1          return 1;
1405   1      } /* End of clicmd_SetUsername() */
1406          
1407          /*
1408           * ----------------------------------------------------------------------------
1409           * Function Name: clicmd_SetUsernameHelp()
1410           * Purpose:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 24  

1411           * Params:
1412           * Returns:
1413           * Note:
1414           * ----------------------------------------------------------------------------
1415           */
1416          static S16_T clicmd_SetUsernameHelp(CONSOLE_Inst *pInst)
1417          {
1418   1          CONSOLE_PutMessage(pInst, "Usage: username <user name>\r\n");
1419   1          return 1;
1420   1      } /* End of clicmd_SetUsernameHelp() */
1421          
1422          /*
1423           * ----------------------------------------------------------------------------
1424           * Function Name: clicmd_GetIpConfig()
1425           * Purpose:
1426           * Params:
1427           * Returns:
1428           * Note:
1429           * ----------------------------------------------------------------------------
1430           */
1431          static S16_T clicmd_GetIpConfig(CONSOLE_Inst *pInst)
1432          {
1433   1          U8_T addr[4];
1434   1      
1435   1          argc = pInst->Argc;
1436   1          argv = pInst->Argv;
1437   1      
1438   1          if (argc == 0)
1439   1          {
1440   2              *(U32_T *)&addr[0] = TCPIP_GetIPAddr();
1441   2              CONSOLE_PutMessage(pInst, "Current IP: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[3]);
1442   2              *(U32_T *)&addr[0] = TCPIP_GetSubnetMask();
1443   2              CONSOLE_PutMessage(pInst, "Current IP Mask: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[
             -3]);
1444   2              *(U32_T *)&addr[0] = TCPIP_GetGateway();
1445   2              CONSOLE_PutMessage(pInst, "Current Gateway: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[
             -3]);
1446   2          }
1447   1      
1448   1          return 1;
1449   1      
1450   1      } /* End of clicmd_GetIpConfig() */
1451          
1452          /*
1453           * ----------------------------------------------------------------------------
1454           * Function Name: clicmd_GetIpConfigHelp()
1455           * Purpose:
1456           * Params:
1457           * Returns:
1458           * Note:
1459           * ----------------------------------------------------------------------------
1460           */
1461          static S16_T clicmd_GetIpConfigHelp(CONSOLE_Inst *pInst)
1462          {
1463   1          CONSOLE_PutMessage(pInst, "Usage: ipconfig\r\n");
1464   1      
1465   1          return 1;
1466   1      } /* End of clicmd_GetIpConfigHelp() */
1467          
1468          
1469          /*
1470           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 25  

1471           * Function Name: clicmd_SetRs485Mode()
1472           * Purpose:
1473           * Params:
1474           * Returns:
1475           * Note:
1476           * ----------------------------------------------------------------------------
1477           */
1478          static S16_T clicmd_SetRs485Mode(CONSOLE_Inst *pInst)
1479          {
1480   1          U8_T temp8, *argP;
1481   1      
1482   1          argc = pInst->Argc;
1483   1          argv = pInst->Argv;
1484   1      
1485   1          temp8 = GCONFIG_GetRs485Mode();
1486   1          if (argc == 0) /* current setting */
1487   1          {
1488   2              CONSOLE_PutMessage(pInst, "RS 485 mode %bu \r\n", temp8);
1489   2              return 1;
1490   2          }
1491   1          else if (argc != 1)
1492   1              return -1;
1493   1          
1494   1          argP = argv[0];
1495   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1496   1              temp8 = *argP - 0x30;
1497   1          else
1498   1              return -1;
1499   1      
1500   1          if (temp8 > 3)
1501   1              return -1;
1502   1      
1503   1          GCONFIG_SetRs485Mode(temp8);
1504   1      
1505   1          return 1;
1506   1      
1507   1      } /* End of clicmd_SetRs485Mode() */
1508          
1509          /*
1510           * ----------------------------------------------------------------------------
1511           * Function Name: clicmd_SetRs485ModeHelp()
1512           * Purpose:
1513           * Params:
1514           * Returns:
1515           * Note:
1516           * ----------------------------------------------------------------------------
1517           */
1518          static S16_T clicmd_SetRs485ModeHelp(CONSOLE_Inst *pInst)
1519          {
1520   1          CONSOLE_PutMessage(pInst, "Usage: rs485 <mode>\r\n");
1521   1          CONSOLE_PutMessage(pInst, "       <mode>:   0: Sleep                    2: Double Twisted Pair FD (Sla
             -ve)\r\n");
1522   1          CONSOLE_PutMessage(pInst, "       <mode>:   1: Single Twisted Pair HD   3: Double Twisted Pair FD (Mas
             -ter)\r\n");
1523   1      
1524   1          return 1;
1525   1      } /* End of clicmd_SetRs485ModeHelp() */
1526          
1527          /*
1528           * ----------------------------------------------------------------------------
1529           * Function Name: clicmd_SetDestHostName()
1530           * Purpose:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 26  

1531           * Params:
1532           * Returns:
1533           * Note:
1534           * ----------------------------------------------------------------------------
1535           */
1536          static S16_T clicmd_SetDestHostName(CONSOLE_Inst *pInst)
1537          {
1538   1          U32_T addr;
1539   1      
1540   1          argc = pInst->Argc;
1541   1          argv = pInst->Argv;
1542   1      
1543   1          if (argc == 0) /* current setting */
1544   1          {
1545   2                      GCONFIG_GetDestHostName((U8_T*)StrBuf);
1546   2                      CONSOLE_PutMessage(pInst, "Current destination host name: %s\r\n", StrBuf);             
1547   2              return 1;
1548   2          }
1549   1          else if (argc > 1)
1550   1              return -1;
1551   1              
1552   1          if (clicmd_CheckIpInput(argv[0]))
1553   1          {
1554   2              if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) < 0)
1555   2                  return -1;
1556   2      
1557   2              if (clicmd_ValidIp(addr) == 0)
1558   2                  return -1;
1559   2          }
1560   1      
1561   1          GCONFIG_SetDestHostName(argv[0], strlen(argv[0]));
1562   1      
1563   1          return 1;
1564   1      } /* End of clicmd_SetDestHostName() */
1565          
1566          /*
1567           * ----------------------------------------------------------------------------
1568           * Function Name: clicmd_SetDestHostNameHelp()
1569           * Purpose:
1570           * Params:
1571           * Returns:
1572           * Note:
1573           * ----------------------------------------------------------------------------
1574           */
1575          static S16_T clicmd_SetDestHostNameHelp(CONSOLE_Inst *pInst)
1576          {
1577   1          CONSOLE_PutMessage(pInst, "Usage: setdsthn <Host name/IP>\r\n");
1578   1          return 1;
1579   1      } /* End of clicmd_SetDestHostNameHelp() */
1580          
1581          /*
1582           * ----------------------------------------------------------------------------
1583           * Function Name: clicmd_SetTftpServerIp()
1584           * Purpose:
1585           * Params:
1586           * Returns:
1587           * Note:
1588           * ----------------------------------------------------------------------------
1589           */
1590          static S16_T clicmd_SetTftpServerIp(CONSOLE_Inst *pInst)
1591          {
1592   1          U32_T addr;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 27  

1593   1          U8_T value;
1594   1      
1595   1          argc = pInst->Argc;
1596   1          argv = pInst->Argv;
1597   1          if (argc == 0) /* current setting */
1598   1          {
1599   2              addr = GCONFIG_GetTftpServerIp(GCONFIG_FTYPE_BLDR);
1600   2              CONSOLE_PutMessage(pInst, "TFTP Server IP address for Bldr: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24
             -)&0x000000FF),
1601   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
1602   2              addr = GCONFIG_GetTftpServerIp(GCONFIG_FTYPE_MCPU);
1603   2              CONSOLE_PutMessage(pInst, "TFTP Server IP address for MCPU: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24
             -)&0x000000FF),
1604   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
1605   2              addr = GCONFIG_GetTftpServerIp(GCONFIG_FTYPE_WCPU);
1606   2              CONSOLE_PutMessage(pInst, "TFTP Server IP address for WCPU: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24
             -)&0x000000FF),
1607   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
1608   2              return 1;
1609   2          }
1610   1          else if (argc != 2)
1611   1              return -1;
1612   1      
1613   1          value = atoi(argv[0]);
1614   1          if (value > 2)
1615   1              return -1;
1616   1      
1617   1          if (clicmd_GetIp2Ulong(argv[1], strlen(argv[1]), &addr) > 0)
1618   1          {
1619   2              if (clicmd_ValidIp(addr))
1620   2                  GCONFIG_SetTftpServerIp(addr, value);
1621   2              else
1622   2                  return -1;
1623   2          }
1624   1          else
1625   1              return -1;
1626   1      
1627   1          return 1;
1628   1      } /* End of clicmd_SetTftpServerIp() */
1629          
1630          /*
1631           * ----------------------------------------------------------------------------
1632           * Function Name: clicmd_SetTftpServerIpHelp()
1633           * Purpose:
1634           * Params:
1635           * Returns:
1636           * Note:
1637           * ----------------------------------------------------------------------------
1638           */
1639          static S16_T clicmd_SetTftpServerIpHelp(CONSOLE_Inst *pInst)
1640          {
1641   1          CONSOLE_PutMessage(pInst, "Usage: tftpsrv <type> <ip addr>\r\n");
1642   1          CONSOLE_PutMessage(pInst, "       <type>: 0: Bldr    1: MCPU    2: WCPU\r\n");
1643   1      
1644   1          return 1;
1645   1      } /* End of clicmd_SetTftpServerIpHelp() */
1646          
1647          /*
1648           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 28  

1649           * Function Name: clicmd_SetFilename()
1650           * Purpose:
1651           * Params:
1652           * Returns:
1653           * Note:
1654           * ----------------------------------------------------------------------------
1655           */
1656          static S16_T clicmd_SetFilename(CONSOLE_Inst *pInst)
1657          {
1658   1          U8_T value;
1659   1      
1660   1          argc = pInst->Argc;
1661   1          argv = pInst->Argv;
1662   1              
1663   1          if (argc == 0) /* current setting */
1664   1          {
1665   2                      GCONFIG_GetFilename((U8_T*)StrBuf, 64, GCONFIG_FTYPE_BLDR);
1666   2                      CONSOLE_PutMessage(pInst, "Bldr Filename: %s\r\n", StrBuf);
1667   2                      GCONFIG_GetFilename((U8_T*)StrBuf, 64, GCONFIG_FTYPE_MCPU);
1668   2                      CONSOLE_PutMessage(pInst, "MCPU Filename: %s\r\n", StrBuf);
1669   2                      GCONFIG_GetFilename((U8_T*)StrBuf, 64, GCONFIG_FTYPE_WCPU);
1670   2                      CONSOLE_PutMessage(pInst, "WCPU Filename: %s\r\n", StrBuf);
1671   2              return 1;
1672   2          }
1673   1          else if (argc != 2)
1674   1              return -1;
1675   1              
1676   1          value = atoi(argv[0]);
1677   1          if (value > 2)
1678   1              return -1;
1679   1              
1680   1          GCONFIG_SetFilename(argv[1], strlen(argv[1]), value);
1681   1          return 1;
1682   1      
1683   1      } /* End of clicmd_SetFilename() */
1684          
1685          /*
1686           * ----------------------------------------------------------------------------
1687           * Function Name: clicmd_SetFilenameHelp()
1688           * Purpose:
1689           * Params:
1690           * Returns:
1691           * Note:
1692           * ----------------------------------------------------------------------------
1693           */
1694          static S16_T clicmd_SetFilenameHelp(CONSOLE_Inst *pInst)
1695          {
1696   1          CONSOLE_PutMessage(pInst, "Usage: filename <type> <file name>\r\n");
1697   1          CONSOLE_PutMessage(pInst, "       <type>: 0: Bldr    1: MCPU    2: WCPU\r\n");
1698   1          return 1;
1699   1      } /* End of clicmd_SetFilenameHelp() */
1700          
1701          /*
1702           * ----------------------------------------------------------------------------
1703           * Function Name: clicmd_UpdateFirmware()
1704           * Purpose:
1705           * Params:
1706           * Returns:
1707           * Note:
1708           * ----------------------------------------------------------------------------
1709           */
1710          static S16_T clicmd_UpdateFirmware(CONSOLE_Inst *pInst)
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 29  

1711          {
1712   1          U8_T value;
1713   1      
1714   1          argc = pInst->Argc;
1715   1          argv = pInst->Argv;
1716   1      
1717   1          if (argc != 1)
1718   1              return -1;
1719   1      
1720   1          value = atoi(argv[0]);
1721   1          if (value > 2)
1722   1              return -1;
1723   1      
1724   1          CONSOLE_PutMessage(pInst, "Download Firmware: ");
1725   1          if (value == GCONFIG_FTYPE_BLDR)
1726   1              CONSOLE_PutMessage(pInst, "Bldr\r\n");
1727   1          else if (value == GCONFIG_FTYPE_MCPU)
1728   1              CONSOLE_PutMessage(pInst, "MCPU\r\n");
1729   1          else
1730   1              CONSOLE_PutMessage(pInst, "WCPU\r\n");
1731   1               
1732   1          GCONFIG_EnableFirmwareUpgrade(value);
1733   1              GCONFIG_WriteConfigData();
1734   1              MCPU_SoftReboot();
1735   1      
1736   1          return 1;
1737   1      } /* End of clicmd_UpdateFirmware() */
1738          
1739          /*
1740           * ----------------------------------------------------------------------------
1741           * Function Name: clicmd_UpdateFirmwareHelp()
1742           * Purpose:
1743           * Params:
1744           * Returns:
1745           * Note:
1746           * ----------------------------------------------------------------------------
1747           */
1748          static S16_T clicmd_UpdateFirmwareHelp(CONSOLE_Inst *pInst)
1749          {
1750   1          CONSOLE_PutMessage(pInst, "Usage: dlfirmware <type>\r\n");
1751   1          CONSOLE_PutMessage(pInst, "       <type>: 0: Bldr    1: MCPU    2: WCPU\r\n");
1752   1          return 1;
1753   1      } /* End of clicmd_UpdateFirmwareHelp() */
1754          
1755          
1756          /*
1757           * ----------------------------------------------------------------------------
1758           * Function Name: clicmd_SetEEP()
1759           * Purpose:
1760           * Params:
1761           * Returns:
1762           * Note:
1763           * ----------------------------------------------------------------------------
1764           */
1765          static S16_T clicmd_SetEEP(CONSOLE_Inst *pInst)
1766          {
1767   1              U8_T    CntGrp, Value, DigNum;
1768   1              U16_T   RegLen = 0;
1769   1      
1770   1          argc = pInst->Argc;
1771   1          argv = pInst->Argv;
1772   1      
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 30  

1773   1          if (argc == 0) // current setting //
1774   1          {
1775   2                      CONSOLE_PutMessage(pInst,"Current EEPROM: \r\n");
1776   2                      CONSOLE_PutMessage(pInst,"     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");
1777   2                      for (RegLen = 0 ; RegLen <= 0x1FF ; RegLen ++)
1778   2                      {
1779   3                              if (!(RegLen & 0x0F))
1780   3                              {
1781   4                                      CONSOLE_PutMessage(pInst,"\r\n%03x: ", RegLen);
1782   4                              }
1783   3                              
1784   3                              EEPROM_Read(RegLen, 1, &DigNum);
1785   3                              CONSOLE_PutMessage(pInst,"%02bx ", DigNum);
1786   3                      }
1787   2                      CONSOLE_PutMessage(pInst,"\r\n");
1788   2              return 1;
1789   2          }
1790   1          else if (argc < 2)
1791   1              return -1;
1792   1      
1793   1              for (CntGrp = 0; CntGrp < argc; CntGrp ++)
1794   1              {
1795   2                      Value = 0;
1796   2                      if (strlen(argv[CntGrp]) > 2)  return -1;// Check hex digit length //
1797   2                                      
1798   2                      for (DigNum = 0 ; DigNum < strlen(argv[CntGrp]) ; DigNum ++)
1799   2                      {
1800   3                              if ((argv[CntGrp][DigNum] < 0x3a && argv[CntGrp][DigNum] > 0x2f) ? 1 : 0)// Check Digit //
1801   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x30);
1802   3                              else if ((argv[CntGrp][DigNum] < 0x47 && argv[CntGrp][DigNum] > 0x40) ? 1 : 0)// Check upper case chara
             -cter //
1803   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x37);
1804   3                              else if ((argv[CntGrp][DigNum] < 0x67 && argv[CntGrp][DigNum] > 0x60) ? 1 : 0)// Check lower case chara
             -cter //
1805   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x57);
1806   3                              else
1807   3                                      return -1;
1808   3                      }
1809   2                      StrBuf[CntGrp] = Value;
1810   2                      if (CntGrp)
1811   2                      {
1812   3                              RegLen ++;
1813   3                              CONSOLE_PutMessage(pInst, "0x%02bx-", StrBuf[CntGrp]);
1814   3                      }
1815   2                      else
1816   2                              CONSOLE_PutMessage(pInst, "RegAddr:0x%02bx|RegBuf:", StrBuf[CntGrp]);
1817   2              }
1818   1              CONSOLE_PutMessage(pInst, "|RegLen:%04u\n\r", RegLen);
1819   1              EEPROM_BatchWrite(StrBuf[0], RegLen, (U8_T*)&(StrBuf[1]));
1820   1      
1821   1          return 1;
1822   1      } /* End of clicmd_SetEEP() */
1823          
1824          /*
1825           * ----------------------------------------------------------------------------
1826           * Function Name: clicmd_SetEEPHelp()
1827           * Purpose:
1828           * Params:
1829           * Returns:
1830           * Note:
1831           * ----------------------------------------------------------------------------
1832           */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 31  

1833          static S16_T clicmd_SetEEPHelp(CONSOLE_Inst *pInst)
1834          {
1835   1          CONSOLE_PutMessage(pInst, "Usage: seteep <HEX RegStartAddr> <HEX Byte 0> <HEX Byte 1>...<HEX Byte N>\r
             -\n");
1836   1          return 1;
1837   1      } /* End of clicmd_SetEEPHelp() */
1838          
1839          /*
1840           * ----------------------------------------------------------------------------
1841           * Function Name: clicmd_DebugMsg()
1842           * Purpose:
1843           * Params:
1844           * Returns:
1845           * Note:
1846           * ----------------------------------------------------------------------------
1847           */
1848          static S16_T clicmd_DebugMsg(CONSOLE_Inst *pInst)
1849          {
1850   1          U8_T *argP, temp8;
1851   1          
1852   1          argc = pInst->Argc;
1853   1          argv = pInst->Argv;
1854   1      
1855   1          if (argc == 0) /* current setting */
1856   1          {
1857   2                      CONSOLE_PutMessage(pInst,"Display Debug Message: ");
1858   2              if (DEBUG_MsgEnable)
1859   2                          CONSOLE_PutMessage(pInst,"Enable\r\n");
1860   2              else
1861   2                  CONSOLE_PutMessage(pInst,"Disable\r\n");
1862   2              return 1;
1863   2          }
1864   1          else if (argc > 1)
1865   1              return -1;
1866   1      
1867   1         argP = argv[0];
1868   1         if ((strlen(argP) == 1) && IsDigit(*argP))
1869   1              temp8 = *argP - 0x30;
1870   1         else
1871   1              return -1;
1872   1      
1873   1          if (temp8 > 1)
1874   1              return -1;
1875   1      
1876   1          DEBUG_MsgEnable = temp8;
1877   1      
1878   1          return 1;   
1879   1      } /* End of clicmd_DebugMsg() */
1880          
1881          /*
1882           * ----------------------------------------------------------------------------
1883           * Function Name: clicmd_DebugMsgHelp()
1884           * Purpose:
1885           * Params:
1886           * Returns:
1887           * Note:
1888           * ----------------------------------------------------------------------------
1889           */
1890          static S16_T clicmd_DebugMsgHelp(CONSOLE_Inst *pInst)
1891          {
1892   1          CONSOLE_PutMessage(pInst, "Usage: dbgmsg <mode>\r\n");
1893   1          CONSOLE_PutMessage(pInst, "       <mode>: 0: Disable    1: Enable\r\n");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 32  

1894   1          return 1;
1895   1      } /* End of clicmd_DebugMsgHelp() */
1896          
1897          /*
1898           * ----------------------------------------------------------------------------
1899           * Function Name: clicmd_ConnectStatus()
1900           * Purpose:
1901           * Params:
1902           * Returns:
1903           * Note:
1904           * ----------------------------------------------------------------------------
1905           */
1906          static S16_T clicmd_ConnectStatus(CONSOLE_Inst *pInst)
1907          {
1908   1          argc = pInst->Argc;
1909   1      
1910   1          if (argc != 0) /* current setting */
1911   1              return -1;
1912   1      
1913   1          CONSOLE_PutMessage(pInst,"Connect Status: ");
1914   1          if (GS2W_GetTaskState() == GS2W_STATE_IDLE)
1915   1                  CONSOLE_PutMessage(pInst,"Idle\r\n");
1916   1          else
1917   1              CONSOLE_PutMessage(pInst,"Connected\r\n");
1918   1      
1919   1          CONSOLE_PutMessage(pInst,"TCP Tx Flag: %bu\r\n", GTCPDAT_GetTcpTxReady(0));
1920   1          return 1;
1921   1      
1922   1      } /* End of clicmd_DebugMsg() */
1923          
1924          /*
1925           * ----------------------------------------------------------------------------
1926           * Function Name: clicmd_ConnectStatusHelp()
1927           * Purpose:
1928           * Params:
1929           * Returns:
1930           * Note:
1931           * ----------------------------------------------------------------------------
1932           */
1933          static S16_T clicmd_ConnectStatusHelp(CONSOLE_Inst *pInst)
1934          {
1935   1          CONSOLE_PutMessage(pInst, "Usage: connstatus\r\n");
1936   1          
1937   1          return 1;
1938   1      } /* End of clicmd_ConnectStatus() */
1939          
1940          
1941          /*
1942           * ----------------------------------------------------------------------------
1943           * Function Name: clicmd_Ping()
1944           * Purpose:
1945           * Params:
1946           * Returns:
1947           * Note:
1948           * ----------------------------------------------------------------------------
1949           */
1950          static S16_T clicmd_Ping(CONSOLE_Inst *pInst)
1951          {
1952   1              tsPING_CONFIG_SET *pPing;
1953   1              
1954   1          argc = pInst->Argc;
1955   1          argv = pInst->Argv;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 33  

1956   1              
1957   1              pPing = (tsPING_CONFIG_SET*)&(pInst->Cmd.Buf);
1958   1              
1959   1              if (pInst->State == CLI_STATE_COMMAND)  
1960   1              {
1961   2                      if (argc != 1)
1962   2                      return -1;
1963   2              if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &(pPing->TargetIP)) < 0 || !clicmd_ValidIp(pPing->Ta
             -rgetIP))
1964   2                      {
1965   3                              CONSOLE_PutMessage(pInst, "Invalid host address \n\r");
1966   3                              return -1;
1967   3                      }
1968   2                      pPing->PatternLen = 32;// Set test pattern length //
1969   2                      pPing->TxCount = 0;
1970   2                      pPing->RxCount = 0;
1971   2                      CONSOLE_PutMessage(pInst, "Pinging from %bu.%bu.%bu.%bu: with %u bytes of data:\n\r\n\r",
1972   2                                                                              pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3],
1973   2                                                                              pPing->PatternLen);
1974   2                      PING_CmdEnQueue((tsPING_LINK*)&(pInst->Cmd));                                                                   
1975   2                      pInst->State = CLI_STATE_COMMAND_WAIT;
1976   2              }
1977   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
1978   1              {
1979   2                      if (pInst->Cmd.WaitTime)
1980   2                              return 1;
1981   2                      if (pInst->Cmd.ReplyLen)
1982   2                      {
1983   3                              CONSOLE_PutMessage(pInst, "Reply from %bu.%bu.%bu.%bu: bytes=%u time<%u0ms TTL=%bu\n\r",
1984   3                                                                                      pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3],
1985   3                                                                                      pPing->PatternLen, pPing->EchoTime+1, pPing->TTL);
1986   3                      }
1987   2                      else
1988   2                              CONSOLE_PutMessage(pInst, "Request timed out\n\r");
1989   2                              
1990   2                      PING_CmdDeQueue((tsPING_LINK*)&(pInst->Cmd));
1991   2                      
1992   2                      pPing->TxCount ++;
1993   2                      if (pPing->TxCount < 4)
1994   2                              PING_CmdEnQueue((tsPING_LINK*)&(pInst->Cmd));
1995   2                      else
1996   2                      {
1997   3                              CONSOLE_PutMessage(pInst, "\n\rPing statistics for %bu.%bu.%bu.%bu:\n\r",
1998   3                                                                                      pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3]);
1999   3                              CONSOLE_PutMessage(pInst, "     Packets:Sent=%bu, Received=%bu, lost=%bu\n\r\n\r", 
2000   3                                                                                      pPing->TxCount, pPing->RxCount, pPing->TxCount - pPing->RxCount);
2001   3                              pInst->State = CLI_STATE_COMMAND;
2002   3                      }
2003   2              }
2004   1              return 1;       
2005   1      } /* End of clicmd_Ping() */
2006          
2007          /*
2008           * ----------------------------------------------------------------------------
2009           * Function Name: clicmd_PingHelp()
2010           * Purpose:
2011           * Params:
2012           * Returns:
2013           * Note:
2014           * ----------------------------------------------------------------------------
2015           */
2016          static S16_T clicmd_PingHelp(CONSOLE_Inst *pInst)
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 34  

2017          {
2018   1          CONSOLE_PutMessage(pInst, "Usage: ping xxx.xxx.xxx.xxx \r\n");
2019   1          return 1;
2020   1      } /* End of clicmd_PingHelp() */
2021          
2022          /*
2023           * ----------------------------------------------------------------------------
2024           * Function Name: clicmd_SetDefault()
2025           * Purpose:
2026           * Params:
2027           * Returns:
2028           * Note:
2029           * ----------------------------------------------------------------------------
2030           */
2031          static S16_T clicmd_SetDefault(CONSOLE_Inst *pInst)
2032          {
2033   1          argc = pInst->Argc;
2034   1      
2035   1          if (argc == 0)
2036   1          {
2037   2                      GCONFIG_ReadDefaultConfigData();
2038   2                      GCONFIG_WriteConfigData();
2039   2                      DELAY_Ms(500);
2040   2                      MCPU_SoftReboot();      
2041   2                      return 1;
2042   2          }
2043   1          return -1;
2044   1      
2045   1      } /* End of clicmd_SetDefault() */
2046          
2047          /*
2048           * ----------------------------------------------------------------------------
2049           * Function Name: clicmd_SetDefaultHelp()
2050           * Purpose:
2051           * Params:
2052           * Returns:
2053           * Note:
2054           * ----------------------------------------------------------------------------
2055           */
2056          static S16_T clicmd_SetDefaultHelp(CONSOLE_Inst *pInst)
2057          {
2058   1          CONSOLE_PutMessage(pInst, "Usage: setdef\r\n");
2059   1          
2060   1          return 1;
2061   1      } /* End of clicmd_SetDefaultHelp() */
2062          
2063          /*
2064           * ----------------------------------------------------------------------------
2065           * Function Name: clicmd_SetBMCast()
2066           * Purpose:
2067           * Params:
2068           * Returns:
2069           * Note:
2070           * ----------------------------------------------------------------------------
2071           */
2072          static S16_T clicmd_SetBMCast(CONSOLE_Inst *pInst)
2073          {
2074   1          U16_T temp16;
2075   1          U8_T temp8, *argP;
2076   1      
2077   1          argc = pInst->Argc;
2078   1          argv = pInst->Argv;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 35  

2079   1      
2080   1          temp16 = GCONFIG_GetNetwork();
2081   1          if (argc == 0)
2082   1          {
2083   2              CONSOLE_PutMessage(pInst, "Bcast: ");
2084   2                      if (temp16 & GCONFIG_NETWORK_PROTO_UDP_BCAST)
2085   2                  CONSOLE_PutMessage(pInst, "On ");
2086   2                      else 
2087   2                  CONSOLE_PutMessage(pInst, "Off ");
2088   2      
2089   2              CONSOLE_PutMessage(pInst, "\r\nMcast: ");
2090   2                      if (temp16 & GCONFIG_NETWORK_PROTO_UDP_MCAST)
2091   2                  CONSOLE_PutMessage(pInst, "On\r\n");
2092   2                      else 
2093   2                  CONSOLE_PutMessage(pInst, "Off\r\n");
2094   2      
2095   2                      return 1;
2096   2          }
2097   1          else if (argc != 2)
2098   1              return -1;
2099   1      
2100   1          argP = argv[0];
2101   1          if ((strlen(argP) == 1) && IsDigit(*argP))
2102   1          {
2103   2              temp8 = *argP - 0x30;
2104   2              if (temp8 > 1)
2105   2                  return -1;
2106   2          }
2107   1          else
2108   1              return -1;
2109   1      
2110   1          if (temp8)
2111   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP_BCAST;
2112   1          else
2113   1              temp16 &= ~GCONFIG_NETWORK_PROTO_UDP_BCAST;
2114   1      
2115   1          argP = argv[1];
2116   1          if ((strlen(argP) == 1) && IsDigit(*argP))
2117   1          {
2118   2              temp8 = *argP - 0x30;
2119   2              if (temp8 > 1)
2120   2                  return -1;
2121   2          }
2122   1          else
2123   1              return -1;
2124   1      
2125   1         if (temp8)
2126   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP_MCAST;
2127   1          else
2128   1              temp16 &= ~GCONFIG_NETWORK_PROTO_UDP_MCAST;
2129   1      
2130   1          GCONFIG_SetNetwork(temp16);
2131   1      
2132   1          return 1;
2133   1      
2134   1      } /* End of clicmd_SetBMCast() */
2135          
2136          /*
2137           * ----------------------------------------------------------------------------
2138           * Function Name: clicmd_SetBMCastHelp()
2139           * Purpose:
2140           * Params:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 36  

2141           * Returns:
2142           * Note:
2143           * ----------------------------------------------------------------------------
2144           */
2145          static S16_T clicmd_SetBMCastHelp(CONSOLE_Inst *pInst)
2146          {
2147   1          CONSOLE_PutMessage(pInst, "Usage: bmcast <bcast> <mcast>\r\n");
2148   1          CONSOLE_PutMessage(pInst, "      <bcast>: 0: Off    1: On\r\n");
2149   1          CONSOLE_PutMessage(pInst, "      <mcast>: 0: Off    1: On\r\n");
2150   1          
2151   1          return 1;
2152   1      } /* End of clicmd_SetBMCastHelp() */
2153          
2154          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
2155          /*
2156           * ----------------------------------------------------------------------------
2157           * Function Name: clicmd_SetSSID()
2158           * Purpose:
2159           * Params:
2160           * Returns:
2161           * Note:
2162           * ----------------------------------------------------------------------------
2163           */
2164          static S16_T clicmd_SetSSID(CONSOLE_Inst *pInst)
2165          {
2166   1              U8_T    RegLen;
2167   1      
2168   1              argc = pInst->Argc;
2169   1          argv = pInst->Argv;
2170   1      
2171   1              if (argc == 0) // current setting //
2172   1              {
2173   2              RegLen = GCONFIG_GetSsid(StrBuf);
2174   2              StrBuf[RegLen] = 0;
2175   2              CONSOLE_PutMessage(pInst, "SSID: %s\r\n", StrBuf);
2176   2                      return 1;
2177   2              }
2178   1              else if (argc > 1)
2179   1              {
2180   2                      return -1;
2181   2              }
2182   1      
2183   1              // Check maximum 32 characters //
2184   1              if ((RegLen = strlen(argv[0])) >= 32)
2185   1              {
2186   2                      return -1;
2187   2              }
2188   1      
2189   1              GCONFIG_SetSsid(argv[0], RegLen);
2190   1              IO_SsidRW(1, RegLen, (U8_T XDATA*)argv[0]);
2191   1              return 1;
2192   1              
2193   1      } /* End of clicmd_SetSSID() */
2194          
2195          /*
2196           * ----------------------------------------------------------------------------
2197           * Function Name: clicmd_SetSSIDHelp()
2198           * Purpose:
2199           * Params:
2200           * Returns:
2201           * Note:
2202           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 37  

2203           */
2204          static S16_T clicmd_SetSSIDHelp(CONSOLE_Inst *pInst)
2205          {
2206   1          CONSOLE_PutMessage(pInst, "Usage: setssid <Maximum 31 characters>\r\n");
2207   1          return 1;
2208   1      
2209   1      } /* End of clicmd_SetSSIDHelp() */
2210          
2211          /*
2212           * ----------------------------------------------------------------------------
2213           * Function Name: clicmd_SetNetworkType()
2214           * Purpose:
2215           * Params:
2216           * Returns:
2217           * Note:
2218           * ----------------------------------------------------------------------------
2219           */
2220          static S16_T clicmd_SetNetworkType(CONSOLE_Inst *pInst)
2221          {
2222   1              U8_T value;
2223   1      
2224   1              argc = pInst->Argc;
2225   1          argv = pInst->Argv;
2226   1      
2227   1              if (argc == 0) /* current setting */
2228   1          {
2229   2              value = GCONFIG_GetWifiNetworkMode();
2230   2              CONSOLE_PutMessage(pInst, "Network Type: ");
2231   2              if (value == 1)
2232   2                  CONSOLE_PutMessage(pInst, "Ad-hoc mode\r\n");
2233   2              else if (value == 0)
2234   2                  CONSOLE_PutMessage(pInst, "Infra mode\r\n");
2235   2      
2236   2                      return 1;
2237   2              }
2238   1              else if (argc > 1 || strlen(argv[0]) > 1)
2239   1              {
2240   2                      return -1;
2241   2              }
2242   1      
2243   1          value =  *argv[0] - 0x30;
2244   1          if (value < 2)
2245   1          {
2246   2              GCONFIG_SetWifiNetworkMode(value);
2247   2                      IO_NetworkModeRW(1, value ? 2:3);/* 2/3: Ad-hoc/infra */
2248   2              }
2249   1              else
2250   1                      return -1;
2251   1      
2252   1              return 1;
2253   1      
2254   1      } /* End of clicmd_SetNetworkType() */
2255          
2256          /*
2257           * ----------------------------------------------------------------------------
2258           * Function Name: clicmd_SetNetworkTypeHelp()
2259           * Purpose:
2260           * Params:
2261           * Returns:
2262           * Note:
2263           * ----------------------------------------------------------------------------
2264           */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 38  

2265          static S16_T clicmd_SetNetworkTypeHelp(CONSOLE_Inst *pInst)
2266          {
2267   1          CONSOLE_PutMessage(pInst, "Usage: setnt <0 = Infra mode, 1 = Ad-hoc mode>\r\n");
2268   1          return 1;
2269   1      
2270   1      } /* End of clicmd_SetNetworkTypeHelp() */
2271          
2272          /*
2273           * ----------------------------------------------------------------------------
2274           * Function Name: clicmd_SetChannel()
2275           * Purpose:
2276           * Params:
2277           * Returns:
2278           * Note:
2279           * ----------------------------------------------------------------------------
2280           */
2281          static S16_T clicmd_SetChannel(CONSOLE_Inst *pInst)
2282          {
2283   1              U8_T RegLen, Value;
2284   1      
2285   1              argc = pInst->Argc;
2286   1          argv = pInst->Argv;
2287   1      
2288   1              if (argc == 0) /* current setting */
2289   1          {
2290   2              RegLen = GCONFIG_GetChannel();
2291   2              if (RegLen)
2292   2                 CONSOLE_PutMessage(pInst, "Channel(%bu): %bu\r\n", RegLen, IO_WiFiSupportedCh[RegLen]);
2293   2              else
2294   2                 CONSOLE_PutMessage(pInst, "Channel(%bu): auto\r\n", RegLen);
2295   2                      return 1;
2296   2              }
2297   1              else if (argc > 1 || (RegLen = strlen(argv[0])) > 3)
2298   1              {
2299   2                      return -1;
2300   2              }
2301   1      
2302   1              if (clicmd_DecText2Char((U8_T *)argv[0], &Value, RegLen) == 0xFF)
2303   1                      return -1;
2304   1          else if (Value > 11)
2305   1              return -1;
2306   1      
2307   1          GCONFIG_SetChannel(Value);
2308   1              IO_ChannelRW(1, IO_WiFiSupportedCh[Value]);
2309   1              return 1;
2310   1      
2311   1      } /* End of clicmd_SetChannel() */
2312          
2313          /*
2314           * ----------------------------------------------------------------------------
2315           * Function Name: clicmd_SetChannelHelp()
2316           * Purpose:
2317           * Params:
2318           * Returns:
2319           * Note:
2320           * ----------------------------------------------------------------------------
2321           */
2322          static S16_T clicmd_SetChannelHelp(CONSOLE_Inst *pInst)
2323          {
2324   1          CONSOLE_PutMessage(pInst, "Usage: setch <channel index>\r\n");
2325   1          CONSOLE_PutMessage(pInst, "     <channel index>\r\n");
2326   1          CONSOLE_PutMessage(pInst, "     0: Auto 1:  1   2:  2   3:  3   4:  4   5:  5   6:  6\r\n");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 39  

2327   1          CONSOLE_PutMessage(pInst, "     7:  7   8:  8   9:  9  10: 10  11: 11\r\n");
2328   1      // Support 802.11 b/g only
2329   1      //    CONSOLE_PutMessage(pInst, "     7:  7   8:  8   9:  9  10: 10  11: 11  12: 36  13: 40\r\n");
2330   1      //    CONSOLE_PutMessage(pInst, "    14: 44  15: 48  16:149  17:153  18:157  19:161  20:165\r\n");
2331   1      
2332   1          return 1;
2333   1      
2334   1      } /* End of clicmd_SetChannelHelp() */
2335          
2336          /*
2337           * ----------------------------------------------------------------------------
2338           * Function Name: clicmd_SetWep64Key()
2339           * Purpose:
2340           * Params:
2341           * Returns:
2342           * Note:
2343           * ----------------------------------------------------------------------------
2344           */
2345          static S16_T clicmd_SetWep64Key(CONSOLE_Inst *pInst)
2346          {
2347   1              U8_T i, j, Value[5];
2348   1      
2349   1              argc = pInst->Argc;
2350   1          argv = pInst->Argv;
2351   1      
2352   1              if (argc == 1 && strlen(argv[0]) == 1) /* current setting */
2353   1          {
2354   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF ||      j > 3)
2355   2                      {
2356   3                              return -1;
2357   3                      }
2358   2      
2359   2              GCONFIG_GetWifiWep64Key(j, Value);
2360   2              CONSOLE_PutMessage(pInst, "WEP 64 Key %bu: ", j);
2361   2              for (i = 0; i < 5; i++)
2362   2              {
2363   3                  CONSOLE_PutMessage(pInst, "%bx ", Value[i]);
2364   3              }
2365   2              CONSOLE_PutMessage(pInst, "\r\n");
2366   2              return 1;
2367   2              }
2368   1              else if (argc != 6)
2369   1              {
2370   2                      return -1;
2371   2              }
2372   1      
2373   1              if (strlen(argv[0]) == 1)
2374   1              {
2375   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF ||      j > 3)
2376   2                      {
2377   3                              return -1;
2378   3                      }
2379   2      
2380   2                      for (i = 0; i < 5; i++)
2381   2                      {
2382   3                              if (clicmd_HexText2Char(argv[i+1], &Value[i], 2) == 0xFF)
2383   3                              {
2384   4                                      return -1;
2385   4                              }
2386   3                      }
2387   2              GCONFIG_SetWifiWep64Key(j, Value);
2388   2                      IO_Wep64KeyRW (1, j, Value);
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 40  

2389   2              }
2390   1              else
2391   1              {
2392   2                      return -1;
2393   2              }
2394   1      
2395   1              return 1;
2396   1      
2397   1      } /* End of clicmd_SetWep64Key() */
2398          
2399          /*
2400           * ----------------------------------------------------------------------------
2401           * Function Name: clicmd_SetWep64KeyHelp()
2402           * Purpose:
2403           * Params:
2404           * Returns:
2405           * Note:
2406           * ----------------------------------------------------------------------------
2407           */
2408          static S16_T clicmd_SetWep64KeyHelp(CONSOLE_Inst *pInst)
2409          {
2410   1          CONSOLE_PutMessage(pInst, "Usage: setw64k <index = 0 ~ 3> <HEX Byte 0> <HEX Byte 1> ... <HEX Byte 4>\r
             -\n");
2411   1          return 1;
2412   1      
2413   1      } /* End of clicmd_SetWep64KeyHelp() */
2414          
2415          /*
2416           * ----------------------------------------------------------------------------
2417           * Function Name: clicmd_SetWep128Key()
2418           * Purpose:
2419           * Params:
2420           * Returns:
2421           * Note:
2422           * ----------------------------------------------------------------------------
2423           */
2424          static S16_T clicmd_SetWep128Key(CONSOLE_Inst *pInst)
2425          {
2426   1              U8_T    i, j, Value[13];
2427   1      
2428   1              argc = pInst->Argc;
2429   1          argv = pInst->Argv;
2430   1      
2431   1              if (argc == 1 && strlen(argv[0]) == 1) /* current setting */
2432   1          {
2433   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF || j > 3)
2434   2                      {
2435   3                              return -1;
2436   3                      }
2437   2              GCONFIG_GetWifiWep128Key(j, Value);
2438   2              CONSOLE_PutMessage(pInst, "WEP 128 Key %bu: ", j);
2439   2              for (i = 0; i < 13; i++)
2440   2              {
2441   3                  CONSOLE_PutMessage(pInst, "%bx ", Value[i]);
2442   3              }
2443   2              CONSOLE_PutMessage(pInst, "\r\n");
2444   2      
2445   2              return 1;
2446   2              }
2447   1              else if (argc != 14)
2448   1              {
2449   2                      return -1;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 41  

2450   2              }
2451   1      
2452   1              if (strlen(argv[0]) == 1)
2453   1              {
2454   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF || j > 3)
2455   2                      {
2456   3                              return -1;
2457   3                      }
2458   2      
2459   2                      for (i = 0; i < 13; i++)
2460   2                      {
2461   3                              if (clicmd_HexText2Char(argv[i+1], &Value[i], 2) == 0xFF)
2462   3                              {
2463   4                                      return -1;
2464   4                              }
2465   3                      }
2466   2      
2467   2              GCONFIG_SetWifiWep128Key(j, Value);
2468   2              IO_Wep128KeyRW (1, j, Value);   
2469   2              }
2470   1              else
2471   1              {
2472   2                      return -1;
2473   2              }
2474   1      
2475   1              return 1;
2476   1      
2477   1      } /* End of clicmd_SetWep128Key() */
2478          
2479          /*
2480           * ----------------------------------------------------------------------------
2481           * Function Name: clicmd_SetWep128KeyHelp()
2482           * Purpose:
2483           * Params:
2484           * Returns:
2485           * Note:
2486           * ----------------------------------------------------------------------------
2487           */
2488          static S16_T clicmd_SetWep128KeyHelp(CONSOLE_Inst *pInst)
2489          {
2490   1          CONSOLE_PutMessage(pInst, "Usage: setw128k <index = 0 ~ 3> <HEX Byte 0> <HEX Byte 1> ... <HEX Byte 12>
             -\r\n");
2491   1          return 1;
2492   1      
2493   1      } /* End of clicmd_SetWep128KeyHelp() */
2494          
2495          /*
2496           * ----------------------------------------------------------------------------
2497           * Function Name: clicmd_SetWepKeyIndex()
2498           * Purpose:
2499           * Params:
2500           * Returns:
2501           * Note:
2502           * ----------------------------------------------------------------------------
2503           */
2504          static S16_T clicmd_SetWepKeyIndex(CONSOLE_Inst *pInst)
2505          {
2506   1              U8_T    Value;
2507   1      
2508   1              argc = pInst->Argc;
2509   1          argv = pInst->Argv;
2510   1              if (argc == 0) /* Read current WEP key index */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 42  

2511   1          {
2512   2              CONSOLE_PutMessage(pInst, "WEP Key Index: %bu\r\n", GCONFIG_GetWifiWepKeyIndex());
2513   2              return 1;
2514   2              }
2515   1              else if (argc != 1 || strlen(argv[0]) != 1) /* Write user's WEP key index */
2516   1              return -1;
2517   1      
2518   1              if (clicmd_DecText2Char(argv[0], &Value, 1) == 0xFF)
2519   1              {
2520   2                      return -1;
2521   2              }
2522   1              if (Value < 4)
2523   1              {
2524   2              GCONFIG_SetWifiWepKeyIndex(Value);
2525   2              IO_WepKeyIndexRW(1, Value);
2526   2              }
2527   1              else
2528   1              {
2529   2                      return -1;
2530   2              }
2531   1      
2532   1              return 1;
2533   1      
2534   1      } /* End of clicmd_SetWepKeyIndex() */
2535          
2536          /*
2537           * ----------------------------------------------------------------------------
2538           * Function Name: clicmd_SetWepKeyIndexHelp()
2539           * Purpose:
2540           * Params:
2541           * Returns:
2542           * Note:
2543           * ----------------------------------------------------------------------------
2544           */
2545          static S16_T clicmd_SetWepKeyIndexHelp(CONSOLE_Inst *pInst)
2546          {
2547   1          CONSOLE_PutMessage(pInst, "Usage: setwki <WEP key index = 0 ~ 3>\r\n");
2548   1          return 1;
2549   1      
2550   1      } /* End of clicmd_SetWepKeyIndexHelp() */
2551          
2552          /*
2553           * ----------------------------------------------------------------------------
2554           * Function Name: clicmd_SetWPAPassphrase()
2555           * Purpose:
2556           * Params:
2557           * Returns:
2558           * Note:
2559           * ----------------------------------------------------------------------------
2560           */
2561          static S16_T clicmd_SetWPAPassphrase(CONSOLE_Inst *pInst)
2562          {
2563   1              U8_T    RegLen;
2564   1      
2565   1              argc = pInst->Argc;
2566   1          argv = pInst->Argv;
2567   1      
2568   1              if (argc == 0) /* current setting */
2569   1          {
2570   2              RegLen = GCONFIG_GetWifiPreShareKey(StrBuf);
2571   2              StrBuf[RegLen] = 0;
2572   2              CONSOLE_PutMessage(pInst, "Pre-Shared Key: %s\r\n", StrBuf);
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 43  

2573   2              return 1;
2574   2              }
2575   1              else if (argc != 1)
2576   1              {
2577   2                      return -1;
2578   2              }
2579   1      
2580   1              RegLen = strlen(argv[0]);
2581   1              if (RegLen >= 8 && RegLen <= 63)
2582   1              {
2583   2              GCONFIG_SetWifiPreShareKey(argv[0], RegLen);
2584   2              IO_TkipAesRW(1, RegLen, (U8_T *)argv[0]);
2585   2              }
2586   1              else
2587   1              {
2588   2                      return -1;
2589   2              }
2590   1      
2591   1              return 1;
2592   1      
2593   1      } /* End of clicmd_SetWPAPassphrase() */
2594          
2595          /*
2596           * ----------------------------------------------------------------------------
2597           * Function Name: clicmd_SetWPAPassphraseHelp()
2598           * Purpose:
2599           * Params:
2600           * Returns:
2601           * Note:
2602           * ----------------------------------------------------------------------------
2603           */
2604          static S16_T clicmd_SetWPAPassphraseHelp(CONSOLE_Inst *pInst)
2605          {
2606   1          CONSOLE_PutMessage(pInst, "Usage: setwp <WPA Passphrase, 8 ~ 63 characters>\r\n");
2607   1          return 1;
2608   1      
2609   1      } /* End of clicmd_SetWPAPassphraseHelp() */
2610          
2611          /*
2612           * ----------------------------------------------------------------------------
2613           * Function Name: clicmd_SetEncryptionType()
2614           * Purpose:
2615           * Params:
2616           * Returns:
2617           * Note:
2618           * ----------------------------------------------------------------------------
2619           */
2620          static S16_T clicmd_SetEncryptionType(CONSOLE_Inst *pInst)
2621          {
2622   1              U8_T    Value;
2623   1      
2624   1              argc = pInst->Argc;
2625   1          argv = pInst->Argv;
2626   1      
2627   1              if (argc == 0) /* current setting */
2628   1          {
2629   2              Value = GCONFIG_GetWifiEncryptMode();
2630   2              CONSOLE_PutMessage(pInst, "Encryption Type: ");
2631   2              switch(Value)
2632   2              {
2633   3                  case 0:
2634   3                      CONSOLE_PutMessage(pInst, "No Secuirty");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 44  

2635   3                      break;
2636   3                  case 1:
2637   3                      CONSOLE_PutMessage(pInst, "WEP 64 bits");
2638   3                      break;
2639   3                  case 2:
2640   3                      CONSOLE_PutMessage(pInst, "WEP 128 bits");
2641   3                      break;
2642   3                  case 3:
2643   3                      CONSOLE_PutMessage(pInst, "TKIP");
2644   3                      break;
2645   3                  case 4:
2646   3                      CONSOLE_PutMessage(pInst, "AES");
2647   3                      break;
2648   3      
2649   3              }
2650   2              CONSOLE_PutMessage(pInst, "\r\n");
2651   2              return 1;
2652   2              }
2653   1              else if (argc != 1 || strlen(argv[0]) != 1)
2654   1                      return -1;
2655   1      
2656   1              Value = *argv[0] - 0x30;
2657   1          if (Value > 4)
2658   1              return -1;
2659   1       
2660   1          GCONFIG_SetWifiEncryptMode(Value);
2661   1              if (Value == 2)
2662   1              {
2663   2                      IO_OpenSysRW(1, 0); /* open system */
2664   2                      IO_EncryptionRW(1, 5); /* wep128 */
2665   2              }
2666   1              else if (Value == 3)
2667   1              {
2668   2                      IO_OpenSysRW(1, 3); /* mixed mode */
2669   2                      IO_EncryptionRW(1, 2); /* tkip */
2670   2              }
2671   1              else if (Value == 1) /* do not know current encrypt mode */
2672   1              {
2673   2                      IO_OpenSysRW(1, 0); /* open system */
2674   2                      IO_EncryptionRW(1, 1); /* wep64 */
2675   2              }
2676   1              else if (Value == 4)
2677   1              {
2678   2                      IO_OpenSysRW(1, 3); /* mixed mode */
2679   2                      IO_EncryptionRW(1, 4);/* aes */
2680   2              }
2681   1              else
2682   1              {
2683   2                      IO_OpenSysRW(1, 0); /* open system */
2684   2                      IO_EncryptionRW(1, 0);/* no security */
2685   2              }
2686   1                              
2687   1              return 1;
2688   1      
2689   1      } /* End of clicmd_SetEncryptionType() */
2690          
2691          /*
2692           * ----------------------------------------------------------------------------
2693           * Function Name: clicmd_SetEncryptionTypeHelp()
2694           * Purpose:
2695           * Params:
2696           * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 45  

2697           * Note:
2698           * ----------------------------------------------------------------------------
2699           */
2700          static S16_T clicmd_SetEncryptionTypeHelp(CONSOLE_Inst *pInst)
2701          {
2702   1          CONSOLE_PutMessage(pInst, "Usage: setet <Encryption Type>\r\n");
2703   1              CONSOLE_PutMessage(pInst, "       <Encryption Type> 0: No Security    3: TKIP\r\n");
2704   1              CONSOLE_PutMessage(pInst, "                         1: WEP64          4: AES\r\n");
2705   1              CONSOLE_PutMessage(pInst, "                         2: WEP128\r\n");
2706   1      
2707   1          return 1;
2708   1      
2709   1      } /* End of clicmd_SetEncryptionTypeHelp() */
2710          
2711          /*
2712           * ----------------------------------------------------------------------------
2713           * Function Name: clicmd_SiteSurvey()
2714           * Purpose:
2715           * Params:
2716           * Returns:
2717           * Note:
2718           * ----------------------------------------------------------------------------
2719           */
2720          static S16_T clicmd_SiteSurvey(CONSOLE_Inst *pInst)
2721          {
2722   1              MWIFAPP_SITE_SURVEY_REPORT XDATA *pMsg;
2723   1              U8_T i, j;
2724   1              
2725   1              argc = pInst->Argc;
2726   1      
2727   1              if (pInst->State == CLI_STATE_COMMAND)
2728   1              {
2729   2                      if (argc == 0) /* Do sitesurvey */
2730   2              {
2731   3                              pInst->CmdId = 0;                       
2732   3                              pInst->Cmd.Buf[0] = IO_SITE_SURVEY;
2733   3                              pInst->Cmd.Buf[1] = ~IO_SITE_SURVEY;                    
2734   3                              pInst->Cmd.Buf[2] = 0;                  
2735   3                              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2736   3                              CONSOLE_PutMessage(pInst, "Please wait...\r\n");
2737   3                              pInst->State = CLI_STATE_COMMAND_WAIT;
2738   3                              return 1;
2739   3                      }
2740   2                      else
2741   2                              return -1;
2742   2              }
2743   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
2744   1              {
2745   2                      if (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF &&
2746   2                              pInst->Cmd.Buf[0] == IO_SITE_SURVEY_REPORT)             
2747   2                      {
2748   3                              if (!pInst->Cmd.Buf[2])
2749   3                              {
2750   4                                      CONSOLE_PutMessage(pInst, "Can not found any BSS\r\n");
2751   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2752   4                                      pInst->State = CLI_STATE_COMMAND;
2753   4                                      return 1;
2754   4                              }
2755   3                              if (!pInst->CmdId)
2756   3                              {
2757   4                                      CONSOLE_PutMessage(pInst, "INDEX "                                                      //6 digits //
2758   4                                                                                        "BSSID             "                          //18 digits //
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 46  

2759   4                                                                                        "SSID                          "      //30 digits //
2760   4                                                                                        "TYPE "       //5 digits //
2761   4                                                                                        "CH  "        //4 digits //
2762   4                                                                                        "RSSI "       //5 digits //
2763   4                                                                                        "SECURITY"//8 digits //
2764   4                                                                                        "\r\n");                                              
2765   4                              }
2766   3                                                              
2767   3                              // Update site survey table //
2768   3                              if (pInst->CmdId >= MWIFAPP_MAX_SITESURVEY_TABLE_MEMBER)
2769   3                              {
2770   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
2771   4                                      pInst->State = CLI_STATE_COMMAND;
2772   4                                      if (pInst->CmdId)
2773   4                                              CONSOLE_PutMessage(pInst, "Site survey table full!\r\n");
2774   4                                      return 1;                       
2775   4                              }
2776   3                                              
2777   3                              pMsg =  (MWIFAPP_SITE_SURVEY_REPORT XDATA*)&(pInst->Cmd.Buf[3]);
2778   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Index = pMsg->Index;                              
2779   3                              memcpy(MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID, pMsg->BSSID, 6);
2780   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Type = pMsg->Type;                                
2781   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Channel = pMsg->Channel;
2782   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].RSSI = pMsg->RSSI;                                
2783   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Security = pMsg->Security;
2784   3                              if ((pInst->Cmd.Buf[2] - 12) > (MWIFAPP_MAX_SSID_LENGTH - 1))
2785   3                                      i = MWIFAPP_MAX_SSID_LENGTH - 1;
2786   3                              else
2787   3                                      i = pInst->Cmd.Buf[2] - 12;
2788   3                              memcpy(MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID, pMsg->SSID, i);
2789   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID[i] = '\0';
2790   3                              
2791   3                              // Display site survey table //
2792   3                              CONSOLE_PutMessage(pInst, "%02bu    "   //6 digits //
2793   3                                                                                "%02bx-%02bx-%02bx-%02bx-%02bx-%02bx ",//18 digits //
2794   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Index,
2795   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[0],
2796   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[1],
2797   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[2], 
2798   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[3], 
2799   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[4], 
2800   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[5]);
2801   3                              for (j = 0; j < 30; j ++)                                                 
2802   3                              {
2803   4                                      if (j < i)
2804   4                                              CONSOLE_PutMessage(pInst, "%c", MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID[j]);//30 digits //
2805   4                                      else
2806   4                                              CONSOLE_PutMessage(pInst, " ");
2807   4                              }
2808   3                              CONSOLE_PutMessage(pInst, "%s  "                //5 digits //
2809   3                                                                                "%03bu "              //4 digits //
2810   3                                                                                "%02bx   "    //5 digits //
2811   3                                                                                "%bu|%s"              //8 digits //
2812   3                                                                                "\r\n",
2813   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Type ? "ap ":"sta",
2814   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Channel,
2815   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].RSSI,
2816   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Security,
2817   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Security ? "yes":"no ");
2818   3                              pInst->CmdId ++;
2819   3                  IO_SiteSurveyReportAck();
2820   3                              pInst->Cmd.WaitTime = 5;// Set packet timeout = 5x50(250) ms//
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 47  

2821   3                              pInst->Cmd.ReplyLen = 0;                                                                                           
2822   3                              return 1;
2823   3                      }
2824   2                      else if (pInst->Cmd.WaitTime == 0)
2825   2                      {
2826   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
2827   3                              pInst->State = CLI_STATE_COMMAND;
2828   3                              if (pInst->CmdId)
2829   3                                      return 1;
2830   3                              else
2831   3                              {
2832   4                                      CONSOLE_PutMessage(pInst, "Command Time out\r\n");              
2833   4                                      return -1;              
2834   4                              }
2835   3                      }
2836   2                      else
2837   2                              pInst->Cmd.ReplyLen = 0;
2838   2              }
2839   1              return 1;
2840   1      
2841   1      } /* End of clicmd_SiteSurvey() */
2842          
2843          /*
2844           * ----------------------------------------------------------------------------
2845           * Function Name: clicmd_SiteSurveyHelp()
2846           * Purpose:
2847           * Params:
2848           * Returns:
2849           * Note:
2850           * ----------------------------------------------------------------------------
2851           */
2852          static S16_T clicmd_SiteSurveyHelp(CONSOLE_Inst *pInst)
2853          {
2854   1          CONSOLE_PutMessage(pInst, "Usage: sisrvy\r\n");
2855   1          return 1;
2856   1      
2857   1      } /* End of clicmd_SiteSurveyHelp() */
2858          
2859          /*
2860           * ----------------------------------------------------------------------------
2861           * Function Name: clicmd_JoinBSS()
2862           * Purpose:
2863           * Params:
2864           * Returns:
2865           * Note:
2866           * ----------------------------------------------------------------------------
2867           */
2868          static S16_T clicmd_JoinBSS(CONSOLE_Inst *pInst)
2869          {
2870   1              U8_T    RegLen, Value, i;
2871   1      
2872   1              argc = pInst->Argc;
2873   1              argv = pInst->Argv;
2874   1      
2875   1              if (pInst->State == CLI_STATE_COMMAND)
2876   1              {
2877   2                      if (argc != 1 || (RegLen = strlen(argv[0])) > 2) // Join the selected BSS //
2878   2                      return -1;
2879   2       
2880   2                      if (clicmd_DecText2Char(argv[0], &Value, RegLen) == 0xFF)
2881   2                      {
2882   3                              return -1;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 48  

2883   3                      }
2884   2                      if (Value >= MWIFAPP_MAX_SITESURVEY_TABLE_MEMBER)
2885   2                              return -1;
2886   2                              
2887   2                      if (MWIFAPP_SiteSurveyTable[Value].Security == 2)
2888   2                              IO_OpenSysRW(1,3);
2889   2                      else
2890   2                              IO_OpenSysRW(1,0);
2891   2                      
2892   2                      if (MWIFAPP_SiteSurveyTable[Value].Security == 0)
2893   2                              IO_EncryptionRW(1,0);
2894   2                      else if (MWIFAPP_SiteSurveyTable[Value].Security == 1)
2895   2                              i = GCONFIG_GetWifiEncryptMode();
2896   2                              if (i == 2)
2897   2                                      IO_EncryptionRW(1,5);
2898   2                              else if (i == 3)
2899   2                                      IO_EncryptionRW(1,2);                   
2900   2                              else
2901   2                                      IO_EncryptionRW(1,i);                                           
2902   2                              
2903   2                      IO_WepKeyIndexRW(1,GCONFIG_GetWifiWepKeyIndex());
2904   2              
2905   2                      pInst->Cmd.Buf[0] = IO_JOIN_BSS;
2906   2                      pInst->Cmd.Buf[1] = ~IO_JOIN_BSS;                       
2907   2                      pInst->Cmd.Buf[2] = 1;                  
2908   2                      pInst->Cmd.Buf[3] = Value;                                      
2909   2                      pInst->CmdId = IO_MCPU_WCPU_CONNECT;// save index value //
2910   2                      MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2911   2                      CONSOLE_PutMessage(pInst, "Please wait...\r\n");                
2912   2                      pInst->State = CLI_STATE_COMMAND_WAIT;
2913   2              }
2914   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
2915   1              {
2916   2                      if (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF)
2917   2                      {
2918   3                              if (pInst->CmdId == IO_MCPU_WCPU_CONNECT && pInst->Cmd.Buf[0] != IO_MCPU_WCPU_CONNECT)
2919   3                              {
2920   4                                      pInst->Cmd.ReplyLen     = 0;
2921   4                                      return 1;
2922   4                              }
2923   3                              
2924   3                              switch (pInst->Cmd.Buf[0])
2925   3                              {
2926   4                              case (IO_MCPU_WCPU_CONNECT):
2927   4                                      pInst->CmdId = 0;
2928   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2929   4                                      CONSOLE_PutMessage(pInst, "Join BSS successful!\r\n");
2930   4                                      pInst->Cmd.Buf[0] = IO_OPERATE_MODE;
2931   4                                      goto CLICMD_JBSS_BY_READ;
2932   4                                      break;
2933   4                              case IO_OPERATE_MODE_RESP:
2934   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2935   4                                      CONSOLE_PutMessage(pInst, "Update base band|%bu= ",pInst->Cmd.Buf[4]);
2936   4                                      if (pInst->Cmd.Buf[4] == 1)
2937   4                                      {
2938   5                                              GCONFIG_SetWifiBasebandMode(1);
2939   5                                              CONSOLE_PutMessage(pInst, "802.11b/g mode\r\n");
2940   5                                      }
2941   4                                      else if (pInst->Cmd.Buf[4] == 4)
2942   4                                      {
2943   5                                              GCONFIG_SetWifiBasebandMode(2);
2944   5                                              CONSOLE_PutMessage(pInst, "802.11a mode\r\n");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 49  

2945   5                                      }
2946   4                                      else if (pInst->Cmd.Buf[4] == 5)
2947   4                                      {
2948   5                                              CONSOLE_PutMessage(pInst, "802.11a/b/g mode\r\n");              
2949   5                                      }
2950   4                                      else
2951   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                                                                                     
2952   4                                      pInst->Cmd.Buf[0] = IO_NETWORK_MODE;
2953   4                                      goto CLICMD_JBSS_BY_READ;                               
2954   4                                      break;
2955   4                              case IO_NETWORK_MODE_RESP:
2956   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2957   4                                      CONSOLE_PutMessage(pInst, "Update network mode|%bu= ",pInst->Cmd.Buf[4]);
2958   4                                      if (pInst->Cmd.Buf[4] == 2)
2959   4                                      {
2960   5                                              GCONFIG_SetWifiNetworkMode(1);
2961   5                                              CONSOLE_PutMessage(pInst, "Ad-hoc\r\n");
2962   5                                      }
2963   4                                      else if (pInst->Cmd.Buf[4] == 3)
2964   4                                      {
2965   5                                              GCONFIG_SetWifiNetworkMode(0);                          
2966   5                                              CONSOLE_PutMessage(pInst, "infrastructure\r\n");
2967   5                                      }
2968   4                                      else
2969   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                             
2970   4                                      pInst->Cmd.Buf[0] = IO_CHANNEL;
2971   4                                      goto CLICMD_JBSS_BY_READ;
2972   4                                      break;
2973   4                              case IO_CHANNEL_RESP:
2974   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2975   4                                      for (StrLen = 0; StrLen < IO_WiFiSupportedChBufSize; StrLen++)
2976   4                                      {
2977   5                                              if (IO_WiFiSupportedCh[StrLen] == pInst->Cmd.Buf[4])
2978   5                                                      break;
2979   5                                      }
2980   4                                      if (StrLen != IO_WiFiSupportedChBufSize)
2981   4                                      {       
2982   5                                      GCONFIG_SetChannel(StrLen);                             
2983   5                                              CONSOLE_PutMessage(pInst, "Update channel= %bu\r\n",pInst->Cmd.Buf[4]);
2984   5                                      }
2985   4                                      else
2986   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
2987   4                                      pInst->Cmd.Buf[0] = IO_SSID_READ;
2988   4                                      goto CLICMD_JBSS_NO_OPTION;
2989   4                                      break;
2990   4                              case IO_SSID_READ_RESP:
2991   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
2992   4                                      CONSOLE_PutMessage(pInst, "Update ssid");                               
2993   4                                      if (pInst->Cmd.Buf[2] > 32)
2994   4                                              CONSOLE_PutMessage(pInst, " length error\r\n");
2995   4                                      else
2996   4                                      {
2997   5      #if (INCLUDE_DHCP_CLIENT)
2998   5                                              pInst->CmdId = 0xFF;
2999   5      #endif                                                                  
3000   5                                              GCONFIG_SetSsid((U8_T *)&(pInst->Cmd.Buf[3]), pInst->Cmd.Buf[2]);
3001   5                                              pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';
3002   5                                              CONSOLE_PutMessage(pInst, "= %s\r\n", (U8_T *)&(pInst->Cmd.Buf[3]));
3003   5                                              
3004   5                                      }
3005   4                                      pInst->Cmd.Buf[0] = IO_OPEN_SYSTEM;
3006   4                                      goto CLICMD_JBSS_BY_READ;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 50  

3007   4                                      break;
3008   4                              case IO_OPEN_SYSTEM_RESP:
3009   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));   
3010   4                                      
3011   4                                      CONSOLE_PutMessage(pInst, "Authentication type|%bu: ",pInst->Cmd.Buf[4]);
3012   4                                      if (pInst->Cmd.Buf[4] == 0)
3013   4                                              CONSOLE_PutMessage(pInst, "open system\r\n");
3014   4                                      else if (pInst->Cmd.Buf[4] == 1)
3015   4                                              CONSOLE_PutMessage(pInst, "share key\r\n");
3016   4                                      else if (pInst->Cmd.Buf[4] == 2)
3017   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 only\r\n");
3018   4                                      else if (pInst->Cmd.Buf[4] == 3)
3019   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 mixed\r\n");
3020   4                                      else
3021   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3022   4                                                                      
3023   4                                      pInst->Cmd.Buf[0] = IO_ENCRYPTION_TYPE;                         
3024   4                                      goto CLICMD_JBSS_BY_READ;
3025   4                                      break;
3026   4                              case IO_ENCRYPTION_TYPE_RESP:
3027   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3028   4                                      CONSOLE_PutMessage(pInst, "Update encryption type|%bu=",pInst->Cmd.Buf[4]);
3029   4                                      if (pInst->Cmd.Buf[4] == 0x00)
3030   4                                      {
3031   5                                              GCONFIG_SetWifiEncryptMode(0);
3032   5                                              CONSOLE_PutMessage(pInst, "no security\r\n");
3033   5                                      }
3034   4                                      else if (pInst->Cmd.Buf[4] == 0x01)
3035   4                                      {
3036   5                                              GCONFIG_SetWifiEncryptMode(1);                          
3037   5                                              CONSOLE_PutMessage(pInst, "WEP64 bits\r\n");
3038   5                                      }
3039   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
3040   4                                      {
3041   5                                              GCONFIG_SetWifiEncryptMode(3);                          
3042   5                                              CONSOLE_PutMessage(pInst, "TKIP\r\n");                          
3043   5                                      }
3044   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
3045   4                                      {
3046   5                                              GCONFIG_SetWifiEncryptMode(4);                          
3047   5                                              CONSOLE_PutMessage(pInst, "AES\r\n");                           
3048   5                                      }
3049   4                                      else if (pInst->Cmd.Buf[4] == 0x05)
3050   4                                      {
3051   5                                              GCONFIG_SetWifiEncryptMode(2);                          
3052   5                                              CONSOLE_PutMessage(pInst, "WEP128 bits\r\n");
3053   5                                      }
3054   4                                      else
3055   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                     
3056   4                                      pInst->Cmd.Buf[0] = IO_TX_DATA_RATE;
3057   4                                      goto CLICMD_JBSS_BY_READ;
3058   4                                      break;
3059   4                              case IO_TX_DATA_RATE_RESP:
3060   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3061   4                                      CONSOLE_PutMessage(pInst, "Update Tx Rate|%bu= ",pInst->Cmd.Buf[4]);
3062   4                                      if (pInst->Cmd.Buf[4] == 0x00)
3063   4                                      {
3064   5                                              GCONFIG_SetWifiTxRate(0);
3065   5                                              CONSOLE_PutMessage(pInst, "Auto\r\n");
3066   5                                      }
3067   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
3068   4                                      {
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 51  

3069   5                                              GCONFIG_SetWifiTxRate(1);
3070   5                                              CONSOLE_PutMessage(pInst, "1 Mbps\r\n");
3071   5                                      }
3072   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
3073   4                                      {
3074   5                                              GCONFIG_SetWifiTxRate(2);                               
3075   5                                              CONSOLE_PutMessage(pInst, "2 Mbps\r\n");
3076   5                                      }
3077   4                                      else if (pInst->Cmd.Buf[4] == 0x0B)
3078   4                                      {
3079   5                                              GCONFIG_SetWifiTxRate(3);
3080   5                                              CONSOLE_PutMessage(pInst, "5.5 Mbps\r\n");
3081   5                                      }
3082   4                                      else if (pInst->Cmd.Buf[4] == 0x0C)
3083   4                                      {
3084   5                                              GCONFIG_SetWifiTxRate(4);                               
3085   5                                              CONSOLE_PutMessage(pInst, "6 Mbps\r\n");
3086   5                                      }
3087   4                                      else if (pInst->Cmd.Buf[4] == 0x12)
3088   4                                      {
3089   5                                              GCONFIG_SetWifiTxRate(5);                               
3090   5                                              CONSOLE_PutMessage(pInst, "9 Mbps\r\n");
3091   5                                      }
3092   4                                      else if (pInst->Cmd.Buf[4] == 0x16)
3093   4                                      {
3094   5                                              GCONFIG_SetWifiTxRate(6);                               
3095   5                                              CONSOLE_PutMessage(pInst, "11 Mbps\r\n");
3096   5                                      }
3097   4                                      else if (pInst->Cmd.Buf[4] == 0x18)
3098   4                                      {
3099   5                                              GCONFIG_SetWifiTxRate(7);                               
3100   5                                              CONSOLE_PutMessage(pInst, "12 Mbps\r\n");
3101   5                                      }
3102   4                                      else if (pInst->Cmd.Buf[4] == 0x24)
3103   4                                      {
3104   5                                              GCONFIG_SetWifiTxRate(8);                               
3105   5                                              CONSOLE_PutMessage(pInst, "18 Mbps\r\n");
3106   5                                      }
3107   4                                      else if (pInst->Cmd.Buf[4] == 0x30)
3108   4                                      {
3109   5                                              GCONFIG_SetWifiTxRate(9);
3110   5                                              CONSOLE_PutMessage(pInst, "24 Mbps\r\n");
3111   5                                      }
3112   4                                      else if (pInst->Cmd.Buf[4] == 0x48)
3113   4                                      {
3114   5                                              GCONFIG_SetWifiTxRate(10);                              
3115   5                                              CONSOLE_PutMessage(pInst, "36 Mbps\r\n");
3116   5                                      }                                       
3117   4                                      else if (pInst->Cmd.Buf[4] == 0x60)
3118   4                                      {
3119   5                                              GCONFIG_SetWifiTxRate(11);                              
3120   5                                              CONSOLE_PutMessage(pInst, "48 Mbps\r\n");
3121   5                                      }
3122   4                                      else if (pInst->Cmd.Buf[4] == 0x6C)
3123   4                                      {
3124   5                                              GCONFIG_SetWifiTxRate(12);
3125   5                                              CONSOLE_PutMessage(pInst, "54 Mbps\r\n");
3126   5                                      }                                       
3127   4                                      else
3128   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3129   4                                      
3130   4                                      GCONFIG_WriteConfigData();
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 52  

3131   4                                      CONSOLE_PutMessage(pInst, "Save WiFi config to flash ROM\r\n");
3132   4                      pInst->State = CLI_STATE_COMMAND;
3133   4      #if (INCLUDE_DHCP_CLIENT)
3134   4                                      if (pInst->CmdId)       
3135   4                                              MAIN_RestartDhcpClient();
3136   4      #endif                          
3137   4                                      break;
3138   4                              default:
3139   4                                      pInst->Cmd.ReplyLen     = 0;                    
3140   4                                      break;
3141   4                              }
3142   3                              return 1;
3143   3                      }
3144   2                      else if (pInst->Cmd.WaitTime == 0)
3145   2                      {
3146   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
3147   3                              pInst->State = CLI_STATE_COMMAND;
3148   3                              CONSOLE_PutMessage(pInst, "Join fail!\r\n");            
3149   3                              return -1;              
3150   3                      }
3151   2                      else
3152   2                              pInst->Cmd.ReplyLen = 0;        
3153   2              }
3154   1              return 1;
3155   1      
3156   1      CLICMD_JBSS_NO_OPTION:
3157   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
3158   1              pInst->Cmd.Buf[2] = 0;
3159   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3160   1              return 1;
3161   1      CLICMD_JBSS_BY_READ:
3162   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
3163   1              pInst->Cmd.Buf[2] = 1;
3164   1              pInst->Cmd.Buf[3] = 0;  
3165   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3166   1              return 1;
3167   1      
3168   1      } /* End of clicmd_JoinBSS() */
3169          
3170          /*
3171           * ----------------------------------------------------------------------------
3172           * Function Name: clicmd_JoinBSSHelp()
3173           * Purpose:
3174           * Params:
3175           * Returns:
3176           * Note:
3177           * ----------------------------------------------------------------------------
3178           */
3179          static S16_T clicmd_JoinBSSHelp(CONSOLE_Inst *pInst)
3180          {
3181   1          CONSOLE_PutMessage(pInst, "Usage: jbss <ID in sitesurvey table>\r\n");
3182   1          return 1;
3183   1      
3184   1      } /* End of clicmd_JoinBSSHelp() */
3185          
3186          #if 0 /* Support 802.11 b/g only */
              /*
               * ----------------------------------------------------------------------------
               * Function Name: clicmd_SetOperationMode()
               * Purpose:
               * Params:
               * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 53  

               * Note:
               * ----------------------------------------------------------------------------
               */
              static S16_T clicmd_SetOperationMode(CONSOLE_Inst *pInst)
              {
                  U8_T value;
              
                      argc = pInst->Argc;
                      argv = pInst->Argv;
              
                      if (argc == 0) /* Read current operation mode */
                  {
                      value = GCONFIG_GetWifiBasebandMode();
                      CONSOLE_PutMessage(pInst, "Operation Mode: ");
                      if (value == 1)
                          CONSOLE_PutMessage(pInst, "802.11 b/g\r\n");
                      else if (value == 2)
                          CONSOLE_PutMessage(pInst, "802.11 a\r\n");
                      return 1;
                      }
                      else if (argc != 1 || strlen(argv[0]) != 1)
                      return -1;
              
                  value = atoi(argv[0]);
                  if (value == 1 || value == 2)
                      {
                      GCONFIG_SetWifiBasebandMode(value);
                              IOCTLM2W_SendOperateMode(WIFI_WRITE, value);
                      }
                      else
                      {
                              return -1;
                      }
              
                      return 1;
              
              } /* End of clicmd_SetOperationMode() */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: clicmd_SetOperationModeHelp()
               * Purpose:
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              static S16_T clicmd_SetOperationModeHelp(CONSOLE_Inst *pInst)
              {
                  CONSOLE_PutMessage(pInst, "Usage: setopm <1 = 802.11 b/g mixde mode, 2 = 802.11 a mode>\r\n");
                  return 1;
              
              } /* End of clicmd_SetOperationModeHelp() */
              #endif
3247          /*
3248           * ----------------------------------------------------------------------------
3249           * Function Name: clicmd_SetWepKeyLength()
3250           * Purpose:
3251           * Params:
3252           * Returns:
3253           * Note:
3254           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 54  

3255           */
3256          static S16_T clicmd_SetWepKeyLength(CONSOLE_Inst *pInst)
3257          {
3258   1          U8_T value;
3259   1      
3260   1              argc = pInst->Argc;
3261   1              argv = pInst->Argv;
3262   1      
3263   1              if (argc == 0) /* Read current operation mode */
3264   1          {
3265   2              value = GCONFIG_GetWifiWepKeyLength();
3266   2              CONSOLE_PutMessage(pInst, "WEP key length: ");
3267   2              if (value == 0)
3268   2                  CONSOLE_PutMessage(pInst, "64 bits\r\n");
3269   2              else if (value == 1)
3270   2                  CONSOLE_PutMessage(pInst, "128 bits\r\n");
3271   2              return 1;
3272   2              }
3273   1              else if (argc != 1 || strlen(argv[0]) != 1)
3274   1              return -1;
3275   1      
3276   1          value = atoi(argv[0]);
3277   1          if (value > 1)
3278   1              return -1;
3279   1      
3280   1          GCONFIG_SetWifiWepKeyLength(value);
3281   1      
3282   1              return 1;
3283   1      
3284   1      } /* End of clicmd_SetWepKeyLength() */
3285          
3286          /*
3287           * ----------------------------------------------------------------------------
3288           * Function Name: clicmd_SetWepKeyLengthHelp()
3289           * Purpose:
3290           * Params:
3291           * Returns:
3292           * Note:
3293           * ----------------------------------------------------------------------------
3294           */
3295          static S16_T clicmd_SetWepKeyLengthHelp(CONSOLE_Inst *pInst)
3296          {
3297   1          CONSOLE_PutMessage(pInst, "Usage: wepklen <0:64 bits, 1:128 bits>\r\n");
3298   1          return 1;
3299   1      
3300   1      } /* End of clicmd_SetWepKeyLengthHelp() */
3301          
3302          /*
3303           * ----------------------------------------------------------------------------
3304           * Function Name: clicmd_SetPreamble()
3305           * Purpose:
3306           * Params:
3307           * Returns:
3308           * Note:
3309           * ----------------------------------------------------------------------------
3310           */
3311          static S16_T clicmd_SetPreamble(CONSOLE_Inst *pInst)
3312          {
3313   1          U8_T value;
3314   1      
3315   1              argc = pInst->Argc;
3316   1              argv = pInst->Argv;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 55  

3317   1      
3318   1              if (argc == 0) /* Read current preamble */
3319   1          {
3320   2              value = GCONFIG_GetWifiPreambleMode();
3321   2              CONSOLE_PutMessage(pInst, "Preamble: ");
3322   2              if (value)
3323   2                  CONSOLE_PutMessage(pInst, "Auto\r\n");
3324   2              else
3325   2                  CONSOLE_PutMessage(pInst, "Long\r\n");
3326   2      
3327   2              return 1;
3328   2              }
3329   1              else if (argc != 1 || strlen(argv[0]) != 1)
3330   1              return -1;
3331   1      
3332   1          value = atoi(argv[0]);
3333   1          if (value > 1)
3334   1              return -1;
3335   1      
3336   1          GCONFIG_SetWifiPreambleMode(value);
3337   1              IO_PreambleRW(1, value ? 0x20:0); /* 0/0x20: long/auto */
3338   1              return 1;
3339   1      
3340   1      } /* End of clicmd_SetPreamble() */
3341          
3342          /*
3343           * ----------------------------------------------------------------------------
3344           * Function Name: clicmd_SetPreambleHelp()
3345           * Purpose:
3346           * Params:
3347           * Returns:
3348           * Note:
3349           * ----------------------------------------------------------------------------
3350           */
3351          static S16_T clicmd_SetPreambleHelp(CONSOLE_Inst *pInst)
3352          {
3353   1          CONSOLE_PutMessage(pInst, "Usage: setpmb <0 = Long preamble, 1 = Auto>\r\n");
3354   1          return 1;
3355   1      
3356   1      } /* End of clicmd_SetPreambleHelp() */
3357          
3358          /*
3359           * ----------------------------------------------------------------------------
3360           * Function Name: clicmd_SetRTSThreshold()
3361           * Purpose:
3362           * Params:
3363           * Returns:
3364           * Note:
3365           * ----------------------------------------------------------------------------
3366           */
3367          static S16_T clicmd_SetRTSThreshold(CONSOLE_Inst *pInst)
3368          {
3369   1              U8_T    RegLen;
3370   1              U16_T   Value;
3371   1      
3372   1              argc = pInst->Argc;
3373   1              argv = pInst->Argv;
3374   1      
3375   1              if (argc == 0) /* Read current RTS threshold */
3376   1          {
3377   2              Value = GCONFIG_GetWifiRtsThreshold();
3378   2              CONSOLE_PutMessage(pInst, "RTS Threahold: %u\r\n", Value);
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 56  

3379   2              return 1;
3380   2              }
3381   1              else if (argc != 1 || (RegLen = strlen(argv[0])) > 4)
3382   1              return -1;
3383   1      
3384   1              if (clicmd_DecText2Short(argv[0], &Value, RegLen) == 0xFF)
3385   1              {
3386   2                      return -1;
3387   2              }
3388   1              if (Value > 2432)
3389   1              {
3390   2                      return -1;
3391   2              }
3392   1      
3393   1          GCONFIG_SetWifiRtsThreshold(Value);
3394   1              IO_RtsThresholdRW(1, (U8_T XDATA*)&Value);
3395   1              return 1;
3396   1      
3397   1      } /* End of clicmd_SetRTSThreshold() */
3398          
3399          /*
3400           * ----------------------------------------------------------------------------
3401           * Function Name: clicmd_SetRTSThresholdHelp()
3402           * Purpose:
3403           * Params:
3404           * Returns:
3405           * Note:
3406           * ----------------------------------------------------------------------------
3407           */
3408          static S16_T clicmd_SetRTSThresholdHelp(CONSOLE_Inst *pInst)
3409          {
3410   1          CONSOLE_PutMessage(pInst, "Usage: setrts <RTS threshold, 0 ~ 2432>\r\n");
3411   1          return 1;
3412   1      
3413   1      } /* End of clicmd_SetRTSThresholdHelp() */
3414          
3415          /*
3416           * ----------------------------------------------------------------------------
3417           * Function Name: clicmd_SetTxPowerLevel()
3418           * Purpose:
3419           * Params:
3420           * Returns:
3421           * Note:
3422           * ----------------------------------------------------------------------------
3423           */
3424          static S16_T clicmd_SetTxPowerLevel(CONSOLE_Inst *pInst)
3425          {
3426   1              U8_T    Value;
3427   1      
3428   1              argc = pInst->Argc;
3429   1              argv = pInst->Argv;
3430   1              if (argc == 0) /* Read current power level */
3431   1          {
3432   2              Value = GCONFIG_GetWifiTxPowerLevel();
3433   2              CONSOLE_PutMessage(pInst, "Transmit Power Level: ");
3434   2              switch(Value)
3435   2              {
3436   3                  case 0:
3437   3                      CONSOLE_PutMessage(pInst, "100%%");
3438   3                      break;
3439   3                  case 1:
3440   3                      CONSOLE_PutMessage(pInst, "50%%");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 57  

3441   3                      break;
3442   3                  case 2:
3443   3                      CONSOLE_PutMessage(pInst, "25%%");
3444   3                      break;
3445   3                  case 3:
3446   3                      CONSOLE_PutMessage(pInst, "12.5%%");
3447   3                      break;
3448   3                  case 4:
3449   3                      CONSOLE_PutMessage(pInst, "6.25%%");
3450   3                      break;
3451   3              }
3452   2              CONSOLE_PutMessage(pInst, "\r\n");
3453   2              return 1;
3454   2              }
3455   1              else if (argc != 1 || strlen(argv[0]) != 1)
3456   1              return -1;
3457   1      
3458   1          /* Write user's power level */
3459   1              if (clicmd_DecText2Char(argv[0], &Value, 1) == 0xFF)
3460   1              {
3461   2                      return -1;
3462   2              }
3463   1              if (Value < 5)
3464   1              {
3465   2              GCONFIG_SetWifiTxPowerLevel(Value);
3466   2                      IO_TxDefaultPowerLevelRW(1, Value);
3467   2              }
3468   1              else
3469   1              {
3470   2                      return -1;
3471   2              }
3472   1      
3473   1              return 1;
3474   1      
3475   1      } /* End of clicmd_SetTxPowerLevel() */
3476          
3477          /*
3478           * ----------------------------------------------------------------------------
3479           * Function Name: clicmd_SetTxPowerLevelHelp()
3480           * Purpose:
3481           * Params:
3482           * Returns:
3483           * Note:
3484           * ----------------------------------------------------------------------------
3485           */
3486          static S16_T clicmd_SetTxPowerLevelHelp(CONSOLE_Inst *pInst)
3487          {
3488   1          CONSOLE_PutMessage(pInst, "Usage: settpl <Power level>\r\n");
3489   1              CONSOLE_PutMessage(pInst, "       <Power level> 0: 100%%     3: 12.5%%\r\n");
3490   1              CONSOLE_PutMessage(pInst, "                     1: 50%%      4: 6.25%%\r\n");
3491   1              CONSOLE_PutMessage(pInst, "                     2: 25%%\r\n");
3492   1      
3493   1          return 1;
3494   1      
3495   1      } /* End of clicmd_SetTxPowerLevelHelp() */
3496          
3497          /*
3498           * ----------------------------------------------------------------------------
3499           * Function Name: clicmd_SetDataRate()
3500           * Purpose:
3501           * Params:
3502           * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 58  

3503           * Note:
3504           * ----------------------------------------------------------------------------
3505           */
3506          static S16_T clicmd_SetDataRate(CONSOLE_Inst *pInst)
3507          {
3508   1              U8_T Value;
3509   1      
3510   1              argc = pInst->Argc;
3511   1              argv = pInst->Argv;
3512   1              if (argc == 0) /* Read current data rate */
3513   1              {
3514   2              Value = GCONFIG_GetWifiTxRate();
3515   2              CONSOLE_PutMessage(pInst, "Transmit Rate: ");
3516   2              switch(Value)
3517   2              {
3518   3                  case 0:
3519   3                      CONSOLE_PutMessage(pInst, "Auto");
3520   3                      break;
3521   3                  case 1:
3522   3                      CONSOLE_PutMessage(pInst, "1 Mbps");
3523   3                      break;
3524   3                  case 2:
3525   3                      CONSOLE_PutMessage(pInst, "2 Mbps");
3526   3                      break;
3527   3                  case 3:
3528   3                      CONSOLE_PutMessage(pInst, "5.5 Mbps");
3529   3                      break;
3530   3                  case 4:
3531   3                      CONSOLE_PutMessage(pInst, "6 Mbps");
3532   3                      break;
3533   3                  case 5:
3534   3                      CONSOLE_PutMessage(pInst, "9 Mbps");
3535   3                      break;
3536   3                  case 6:
3537   3                      CONSOLE_PutMessage(pInst, "11 Mbps");
3538   3                      break;
3539   3                  case 7:
3540   3                      CONSOLE_PutMessage(pInst, "12 Mbps");
3541   3                      break;
3542   3                  case 8:
3543   3                      CONSOLE_PutMessage(pInst, "18 Mbps");
3544   3                      break;
3545   3                  case 9:
3546   3                      CONSOLE_PutMessage(pInst, "24 Mbps");
3547   3                      break;
3548   3                  case 10:
3549   3                      CONSOLE_PutMessage(pInst, "36 Mbps");
3550   3                      break;
3551   3                  case 11:
3552   3                      CONSOLE_PutMessage(pInst, "48 Mbps");
3553   3                      break;
3554   3                  case 12:
3555   3                      CONSOLE_PutMessage(pInst, "54 Mbps");
3556   3                      break;
3557   3              }
3558   2              CONSOLE_PutMessage(pInst, "\r\n");
3559   2      
3560   2              return 1;
3561   2              }
3562   1              else if (argc != 1 || strlen(argv[0]) > 2) /* Write user's data rate */
3563   1              return -1;
3564   1      
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 59  

3565   1          Value = atoi(argv[0]);
3566   1          if (Value > 12)
3567   1                      return -1;
3568   1      
3569   1              if (IO_TxDataRateRW(1, IO_WiFiSupportTxRate[Value]))
3570   1              {
3571   2                      return -1;
3572   2              }
3573   1      
3574   1          GCONFIG_SetWifiTxRate(Value);
3575   1      
3576   1              return 1;
3577   1      
3578   1      } /* End of clicmd_SetDataRate() */
3579          
3580          /*
3581           * ----------------------------------------------------------------------------
3582           * Function Name: clicmd_SetDataRateHelp()
3583           * Purpose:
3584           * Params:
3585           * Returns:
3586           * Note:
3587           * ----------------------------------------------------------------------------
3588           */
3589          static S16_T clicmd_SetDataRateHelp(CONSOLE_Inst *pInst)
3590          {
3591   1          CONSOLE_PutMessage(pInst, "Usage: setdr <Data rate>\r\n");
3592   1              CONSOLE_PutMessage(pInst, "       <Data rate> 0: Auto        7: 12Mbps\r\n");
3593   1              CONSOLE_PutMessage(pInst, "                   1: 1Mbps       8: 18Mbps\r\n");
3594   1              CONSOLE_PutMessage(pInst, "                   2: 2Mbps       9: 24Mbps\r\n");
3595   1              CONSOLE_PutMessage(pInst, "                   3: 5.5Mbps    10: 36Mbps\r\n");
3596   1              CONSOLE_PutMessage(pInst, "                   4: 6Mbps      11: 48Mbps\r\n");
3597   1              CONSOLE_PutMessage(pInst, "                   5: 9Mbps      12: 54Mbps\r\n");
3598   1              CONSOLE_PutMessage(pInst, "                   6: 11Mbps\r\n");
3599   1      
3600   1          return 1;
3601   1      
3602   1      } /* End of clicmd_SetDataRateHelp() */
3603          
3604          /*
3605           * ----------------------------------------------------------------------------
3606           * Function Name: clicmd_SetAutoPowerControl()
3607           * Purpose:
3608           * Params:
3609           * Returns:
3610           * Note:
3611           * ----------------------------------------------------------------------------
3612           */
3613          static S16_T clicmd_SetAutoPowerControl(CONSOLE_Inst *pInst)
3614          {
3615   1              U8_T    RegLen;
3616   1      
3617   1              argc = pInst->Argc;
3618   1              argv = pInst->Argv;
3619   1              if (argc == 0) /* Read current state of auto power control */
3620   1              {
3621   2              RegLen = GCONFIG_GetWifiAutoPowerCtrl();
3622   2              CONSOLE_PutMessage(pInst, "Auto Power Control: ");
3623   2              if (RegLen == 0)
3624   2                  CONSOLE_PutMessage(pInst, "Disable\r\n");
3625   2              else
3626   2                  CONSOLE_PutMessage(pInst, "Enable\r\n");
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 60  

3627   2      
3628   2              return 1;
3629   2              }
3630   1              else if (argc != 1 || strlen(argv[0]) != 1) /* Write user's setting of auto power control */
3631   1              return -1;
3632   1      
3633   1          RegLen = atoi(argv[0]);
3634   1          if (RegLen < 2)
3635   1          {
3636   2              GCONFIG_SetWifiAutoPowerCtrl(RegLen);
3637   2              IO_AutoPowerCtrlRW(1, RegLen ? 1:0);
3638   2              }
3639   1          else
3640   1                      return -1;
3641   1      
3642   1              return 1;
3643   1      
3644   1      } /* End of clicmd_SetAutoPowerControl() */
3645          
3646          /*
3647           * ----------------------------------------------------------------------------
3648           * Function Name: clicmd_SetAutoPowerControlHelp()
3649           * Purpose:
3650           * Params:
3651           * Returns:
3652           * Note:
3653           * ----------------------------------------------------------------------------
3654           */
3655          static S16_T clicmd_SetAutoPowerControlHelp(CONSOLE_Inst *pInst)
3656          {
3657   1          CONSOLE_PutMessage(pInst, "Usage: setapc <Auto power control>\r\n");
3658   1              CONSOLE_PutMessage(pInst, "       <Auto power control> 0: Disable   1: Enable\r\n");
3659   1      
3660   1          return 1;
3661   1      
3662   1      } /* End of clicmd_SetAutoPowerControlHelp() */
3663          
3664          /*
3665           * ----------------------------------------------------------------------------
3666           * Function Name: clicmd_SetBeaconInterval()
3667           * Purpose:
3668           * Params:
3669           * Returns:
3670           * Note:
3671           * ----------------------------------------------------------------------------
3672           */
3673          static S16_T clicmd_SetBeaconInterval(CONSOLE_Inst *pInst)
3674          {
3675   1              U16_T   Value;
3676   1      
3677   1              argc = pInst->Argc;
3678   1              argv = pInst->Argv;
3679   1              if (argc == 0) /* Read current beacon interval */
3680   1              {
3681   2              Value = GCONFIG_GetWifiBcnInterval();
3682   2              CONSOLE_PutMessage(pInst, "Beacon: %u ms\r\n", Value);
3683   2      
3684   2              return 1;
3685   2              }
3686   1              else if (argc != 1) /* Write user's beacon interval */
3687   1              return -1;
3688   1      
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 61  

3689   1          Value = atoi(argv[0]);
3690   1              if (Value < 20 || Value > 1000)
3691   1                      return -1;
3692   1      
3693   1              GCONFIG_SetWifiBcnInterval(Value);
3694   1              IO_BeaconIntervalRW(1, (U8_T XDATA*)&Value);
3695   1              return 1;
3696   1      
3697   1      } /* End of clicmd_SetBeaconInterval() */
3698          
3699          /*
3700           * ----------------------------------------------------------------------------
3701           * Function Name: clicmd_SetBeaconIntervalHelp()
3702           * Purpose:
3703           * Params:
3704           * Returns:
3705           * Note:
3706           * ----------------------------------------------------------------------------
3707           */
3708          static S16_T clicmd_SetBeaconIntervalHelp(CONSOLE_Inst *pInst)
3709          {
3710   1          CONSOLE_PutMessage(pInst, "Usage: setbi <Beacon interval(ms)>\r\n");
3711   1              CONSOLE_PutMessage(pInst, "       <Beacon interval(ms)> 20 ~ 1000\r\n");
3712   1          return 1;
3713   1      
3714   1      } /* End of clicmd_SetBeaconIntervalHelp() */
3715          
3716          /*
3717           * ----------------------------------------------------------------------------
3718           * Function Name: clicmd_GetWifiConfig()
3719           * Purpose:
3720           * Params:
3721           * Returns:
3722           * Note:
3723           * ----------------------------------------------------------------------------
3724           */
3725          static S16_T clicmd_GetWifiConfig(CONSOLE_Inst *pInst)
3726          {
3727   1          argc = pInst->Argc;
3728   1          argv = pInst->Argv;
3729   1      
3730   1              if (pInst->State == CLI_STATE_COMMAND)
3731   1              {
3732   2                  if (argc == 0)
3733   2                      {
3734   3                              CONSOLE_PutMessage(pInst, "Please wait...\r\n");                
3735   3                  CONSOLE_PutMessage(pInst, "Current WiFi Settings\r\n");
3736   3                              pInst->Cmd.Buf[0] = IO_MCPU_WCPU_READY;
3737   3                              pInst->State = CLI_STATE_COMMAND_WAIT;
3738   3                              goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
3739   3                      }
3740   2                      return -1;
3741   2          }
3742   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
3743   1              {
3744   2                      if  (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF)
3745   2                      {
3746   3                              switch (pInst->Cmd.Buf[0])
3747   3                              {
3748   4                              case IO_MCPU_WCPU_READY_ACK:                    
3749   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3750   4                                      pInst->Cmd.Buf[0] = IO_WIFI_DRIVER_VER_READ;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 62  

3751   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
3752   4                                      break;
3753   4                                      
3754   4                              case IO_WIFI_DRIVER_VER_READ_RESP:
3755   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3756   4                                      if (pInst->Cmd.Buf[2] > 29)
3757   4                                              pInst->Cmd.Buf[2] = 29;
3758   4                                      pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';                                     
3759   4                                      CONSOLE_PutMessage(pInst, "* WCPU F/W version: %s\r\n",&(pInst->Cmd.Buf[3]));
3760   4                                              
3761   4                                      pInst->Cmd.Buf[0] = IO_WIFI_MAC_ADDR_SET;
3762   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
3763   4                                      break;
3764   4                                      
3765   4                              case IO_WIFI_MAC_ADDR_SET_RESP:
3766   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3767   4                                      CONSOLE_PutMessage(pInst, "* WiFi MAC address: 0x%02bx%02bx%02bx%02bx%02bx%02bx\r\n"
3768   4                                                                                              ,pInst->Cmd.Buf[4]
3769   4                                                                                              ,pInst->Cmd.Buf[5]
3770   4                                                                                              ,pInst->Cmd.Buf[6]
3771   4                                                                                              ,pInst->Cmd.Buf[7]
3772   4                                                                                              ,pInst->Cmd.Buf[8]
3773   4                                                                                              ,pInst->Cmd.Buf[9]);
3774   4                                              
3775   4                                      pInst->Cmd.Buf[0] = IO_OPERATE_MODE;
3776   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
3777   4                                      break;
3778   4                              
3779   4                              case IO_OPERATE_MODE_RESP:
3780   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3781   4                                      
3782   4                                      CONSOLE_PutMessage(pInst, "* Baseband|%bu: ",pInst->Cmd.Buf[4]);
3783   4                                      if (pInst->Cmd.Buf[4] == 1)
3784   4                                              CONSOLE_PutMessage(pInst, "802.11b/g mode\r\n");
3785   4                                      else if (pInst->Cmd.Buf[4] == 4)
3786   4                                              CONSOLE_PutMessage(pInst, "802.11a mode\r\n");
3787   4                                      else if (pInst->Cmd.Buf[4] == 5)
3788   4                                              CONSOLE_PutMessage(pInst, "802.11a/b/g mode\r\n");                                      
3789   4                                      else
3790   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3791   4                                              
3792   4                                      pInst->Cmd.Buf[0] = IO_NETWORK_MODE;
3793   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
3794   4                                      break;
3795   4                                      
3796   4                              case IO_NETWORK_MODE_RESP:
3797   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3798   4                                      
3799   4                                      CONSOLE_PutMessage(pInst, "* Network|%bu: ",pInst->Cmd.Buf[4]);
3800   4                                      if (pInst->Cmd.Buf[4] == 2)
3801   4                                              CONSOLE_PutMessage(pInst, "Ad-hoc\r\n");
3802   4                                      else if (pInst->Cmd.Buf[4] == 3)
3803   4                                              CONSOLE_PutMessage(pInst, "infrastructure\r\n");
3804   4                                      else
3805   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3806   4                                                              
3807   4                                      pInst->Cmd.Buf[0] = IO_CHANNEL;
3808   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
3809   4                                      break;
3810   4                                      
3811   4                              case IO_CHANNEL_RESP:
3812   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 63  

3813   4                                      
3814   4                                      CONSOLE_PutMessage(pInst, "* Channel: %bu\r\n",pInst->Cmd.Buf[4]);
3815   4                                              
3816   4                                      pInst->Cmd.Buf[0] = IO_SSID_READ;
3817   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
3818   4                                      break;
3819   4                                      
3820   4                              case IO_SSID_READ_RESP:
3821   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3822   4                                      
3823   4                                      CONSOLE_PutMessage(pInst, "* SSID: ");
3824   4                                      if (pInst->Cmd.Buf[2] > 32)
3825   4                                              CONSOLE_PutMessage(pInst, "\r\nLength error\r\n");
3826   4                                      pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';
3827   4                                      CONSOLE_PutMessage(pInst, "%s\r\n", (U8_T *)&(pInst->Cmd.Buf[3]));
3828   4                                                                      
3829   4                                      pInst->Cmd.Buf[0] = IO_ENCRYPTION_TYPE;
3830   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                    
3831   4                                      break;
3832   4                                      
3833   4                              case IO_ENCRYPTION_TYPE_RESP:
3834   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3835   4                                      
3836   4                                      CONSOLE_PutMessage(pInst, "* Security|%bu: ",pInst->Cmd.Buf[4]);
3837   4                                      if (pInst->Cmd.Buf[4] == 0)
3838   4                                              CONSOLE_PutMessage(pInst, "no security\r\n");
3839   4                                      else if (pInst->Cmd.Buf[4] == 1)
3840   4                                              CONSOLE_PutMessage(pInst, "WEP64 bits\r\n");
3841   4                                      else if (pInst->Cmd.Buf[4] == 5)
3842   4                                              CONSOLE_PutMessage(pInst, "WEP128 bits\r\n");
3843   4                                      else if (pInst->Cmd.Buf[4] == 2)
3844   4                                              CONSOLE_PutMessage(pInst, "TKIP\r\n");
3845   4                                      else if (pInst->Cmd.Buf[4] == 4)
3846   4                                              CONSOLE_PutMessage(pInst, "AES\r\n");
3847   4                                      else
3848   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3849   4                                                                      
3850   4                                      pInst->Cmd.Buf[0] = IO_WEP_KEY_INDEX;
3851   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                    
3852   4                                      break;
3853   4                                      
3854   4                              case IO_WEP_KEY_INDEX_RESP:
3855   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3856   4                                      
3857   4                                      CONSOLE_PutMessage(pInst, "* WEP Key Index: %bu\r\n", pInst->Cmd.Buf[4]);
3858   4                                      pInst->CmdId = 0;                               
3859   4                                      pInst->Cmd.Buf[0] = IO_WEP64_KEY_READ;
3860   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;                              
3861   4                                      break;
3862   4                                      
3863   4                              case IO_WEP64_KEY_READ_RESP:
3864   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3865   4                                      
3866   4                                      CONSOLE_PutMessage(pInst, "* WEP64 bits key index %bu: ", pInst->CmdId);
3867   4                                      for (StrLen = 0; StrLen < 5; StrLen ++)
3868   4                                      {
3869   5                                              CONSOLE_PutMessage(pInst, "%02bx", pInst->Cmd.Buf[3+StrLen]);
3870   5                                      }
3871   4                                      CONSOLE_PutMessage(pInst, "\r\n");
3872   4      
3873   4                                      if (pInst->CmdId < 3)
3874   4                                      {
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 64  

3875   5                                              pInst->CmdId ++;
3876   5                                              pInst->Cmd.Buf[0] = IO_WEP64_KEY_READ;
3877   5                                      }
3878   4                                      else
3879   4                                      {
3880   5                                              pInst->CmdId = 0;
3881   5                                              pInst->Cmd.Buf[0] = IO_WEP128_KEY_READ;
3882   5                                      }
3883   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;
3884   4                                      break;
3885   4                                      
3886   4                              case IO_WEP128_KEY_READ_RESP:
3887   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3888   4                                      
3889   4                                      CONSOLE_PutMessage(pInst, "* WEP128 bits key index %bu: ", pInst->CmdId);
3890   4                                      for (StrLen = 0; StrLen < 13; StrLen ++)
3891   4                                      {
3892   5                                              CONSOLE_PutMessage(pInst, "%02bx", pInst->Cmd.Buf[3+StrLen]);
3893   5                                      }
3894   4                                      CONSOLE_PutMessage(pInst, "\r\n");
3895   4      
3896   4                                      if (pInst->CmdId < 3)
3897   4                                      {
3898   5                                              pInst->CmdId ++;
3899   5                                              pInst->Cmd.Buf[0] = IO_WEP128_KEY_READ;
3900   5                                              goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;                                      
3901   5                                      }
3902   4                                      else
3903   4                                      {
3904   5                                              pInst->CmdId = 0;
3905   5                                              pInst->Cmd.Buf[0] = IO_TKIP_AES_PASSPHASE_STRING_READ;
3906   5                                              goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
3907   5                                      }                                                               
3908   4                                      break;
3909   4                                      
3910   4                              case IO_TKIP_AES_PASSPHASE_STRING_READ_RESP:
3911   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3912   4                                      
3913   4                                      CONSOLE_PutMessage(pInst, "* AES/TKIP Passphrase: ");
3914   4                                      for (StrLen = 0; StrLen < pInst->Cmd.Buf[2]; StrLen ++)
3915   4                                      {
3916   5                                              CONSOLE_PutMessage(pInst, "%c", pInst->Cmd.Buf[3+StrLen]);
3917   5                                      }
3918   4                                      CONSOLE_PutMessage(pInst, "\r\n");
3919   4                                                                      
3920   4                                      pInst->Cmd.Buf[0] = IO_TX_DATA_RATE;
3921   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                                    
3922   4                                      break;
3923   4                                      
3924   4                              case IO_TX_DATA_RATE_RESP:
3925   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3926   4                                      
3927   4                                      CONSOLE_PutMessage(pInst, "* Tx Rate|%bu: ",pInst->Cmd.Buf[4]);
3928   4                                      if (pInst->Cmd.Buf[4] == 0x00)
3929   4                                              CONSOLE_PutMessage(pInst, "Auto\r\n");
3930   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
3931   4                                              CONSOLE_PutMessage(pInst, "1 Mbps\r\n");
3932   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
3933   4                                              CONSOLE_PutMessage(pInst, "2 Mbps\r\n");
3934   4                                      else if (pInst->Cmd.Buf[4] == 0x0B)
3935   4                                              CONSOLE_PutMessage(pInst, "5.5 Mbps\r\n");
3936   4                                      else if (pInst->Cmd.Buf[4] == 0x0C)
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 65  

3937   4                                              CONSOLE_PutMessage(pInst, "6 Mbps\r\n");
3938   4                                      else if (pInst->Cmd.Buf[4] == 0x12)
3939   4                                              CONSOLE_PutMessage(pInst, "9 Mbps\r\n");
3940   4                                      else if (pInst->Cmd.Buf[4] == 0x16)
3941   4                                              CONSOLE_PutMessage(pInst, "11 Mbps\r\n");
3942   4                                      else if (pInst->Cmd.Buf[4] == 0x18)
3943   4                                              CONSOLE_PutMessage(pInst, "12 Mbps\r\n");
3944   4                                      else if (pInst->Cmd.Buf[4] == 0x24)
3945   4                                              CONSOLE_PutMessage(pInst, "18 Mbps\r\n");
3946   4                                      else if (pInst->Cmd.Buf[4] == 0x30)
3947   4                                              CONSOLE_PutMessage(pInst, "24 Mbps\r\n");
3948   4                                      else if (pInst->Cmd.Buf[4] == 0x48)
3949   4                                              CONSOLE_PutMessage(pInst, "36 Mbps\r\n");
3950   4                                      else if (pInst->Cmd.Buf[4] == 0x60)
3951   4                                              CONSOLE_PutMessage(pInst, "48 Mbps\r\n");
3952   4                                      else if (pInst->Cmd.Buf[4] == 0x6C)
3953   4                                              CONSOLE_PutMessage(pInst, "54 Mbps\r\n");                                                                                                                                                                                                                                                                                                                                                                       
3954   4                                      else
3955   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3956   4                                                                      
3957   4                                      pInst->Cmd.Buf[0] = IO_TX_DEFAULT_POWER_LEVEL;
3958   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                            
3959   4                                      break;
3960   4                                      
3961   4                              case IO_TX_DEFAULT_POWER_LEVEL_RESP:
3962   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3963   4                                      
3964   4                                      CONSOLE_PutMessage(pInst, "* Transmission Power Level|%bu: ",pInst->Cmd.Buf[4]);
3965   4                                      if (pInst->Cmd.Buf[4] == 0)
3966   4                                              CONSOLE_PutMessage(pInst, "100%%\r\n");
3967   4                                      else if (pInst->Cmd.Buf[4] == 1)
3968   4                                              CONSOLE_PutMessage(pInst, "50%%\r\n");
3969   4                                      else if (pInst->Cmd.Buf[4] == 2)
3970   4                                              CONSOLE_PutMessage(pInst, "25%%\r\n");
3971   4                                      else if (pInst->Cmd.Buf[4] == 3)
3972   4                                              CONSOLE_PutMessage(pInst, "12.5%%\r\n");
3973   4                                      else if (pInst->Cmd.Buf[4] == 4)
3974   4                                              CONSOLE_PutMessage(pInst, "6.25%%\r\n");
3975   4                                      else
3976   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3977   4                                                                      
3978   4                                      pInst->Cmd.Buf[0] = IO_PREAMBLE;
3979   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
3980   4                                      break;
3981   4                                      
3982   4                              case IO_PREAMBLE_RESP:
3983   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3984   4                                      
3985   4                                      CONSOLE_PutMessage(pInst, "* Preamble Mode|%bu: ",pInst->Cmd.Buf[4]);
3986   4                                      if (pInst->Cmd.Buf[4] == 0)
3987   4                                              CONSOLE_PutMessage(pInst, "long\r\n");
3988   4                                      else if (pInst->Cmd.Buf[4] == 0x20)
3989   4                                              CONSOLE_PutMessage(pInst, "auto\r\n");
3990   4                                      else
3991   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3992   4                                                                      
3993   4                                      pInst->Cmd.Buf[0] = IO_BEACON_INTERVAL_READ;
3994   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;                                  
3995   4                                      break;
3996   4                                      
3997   4                              case IO_BEACON_INTERVAL_READ_RESP:
3998   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 66  

3999   4                                      
4000   4                                      CONSOLE_PutMessage(pInst, "* Beacon Interval: %u ms\r\n", *((U16_T*)&(pInst->Cmd.Buf[3])));
4001   4                                                                      
4002   4                                      pInst->Cmd.Buf[0] = IO_RTS_THRESHOLD_READ;
4003   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;                                  
4004   4                                      break;
4005   4                                      
4006   4                              case IO_RTS_THRESHOLD_READ_RESP:
4007   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4008   4                                      
4009   4                                      CONSOLE_PutMessage(pInst, "* RTS Threshold: %u\r\n", *((U16_T*)&(pInst->Cmd.Buf[3])));
4010   4                                                                      
4011   4                                      pInst->Cmd.Buf[0] = IO_OPEN_SYSTEM;
4012   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
4013   4                                      break;
4014   4      
4015   4                              case IO_OPEN_SYSTEM_RESP:
4016   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4017   4                                      
4018   4                                      CONSOLE_PutMessage(pInst, "* Authentication type|%bu: ",pInst->Cmd.Buf[4]);
4019   4                                      if (pInst->Cmd.Buf[4] == 0)
4020   4                                              CONSOLE_PutMessage(pInst, "open system\r\n");
4021   4                                      else if (pInst->Cmd.Buf[4] == 1)
4022   4                                              CONSOLE_PutMessage(pInst, "share key\r\n");
4023   4                                      else if (pInst->Cmd.Buf[4] == 2)
4024   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 only\r\n");
4025   4                                      else if (pInst->Cmd.Buf[4] == 3)
4026   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 mixed\r\n");
4027   4                                      else
4028   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4029   4                                                                      
4030   4                                      pInst->Cmd.Buf[0] = IO_AUTO_POWER_CONTROL;
4031   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
4032   4                                      break;
4033   4                                      
4034   4                              case IO_AUTO_POWER_CONTROL_RESP:
4035   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4036   4                                      
4037   4                                      CONSOLE_PutMessage(pInst, "* Auto Power Control|%bu: ",pInst->Cmd.Buf[4]);
4038   4                                      if (pInst->Cmd.Buf[4] == 0)
4039   4                                              CONSOLE_PutMessage(pInst, "disable\r\n");
4040   4                                      else if (pInst->Cmd.Buf[4] == 1)
4041   4                                              CONSOLE_PutMessage(pInst, "enable\r\n");
4042   4                                      else
4043   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4044   4                                                              
4045   4                                      pInst->Cmd.Buf[0] = IO_SELF_CTS;
4046   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;    
4047   4      
4048   4                                      break;
4049   4                              case IO_SELF_CTS_RESP:
4050   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4051   4                                      
4052   4                                      CONSOLE_PutMessage(pInst, "* Protection Frame Type|%bu: ",pInst->Cmd.Buf[4]);
4053   4                                      if (pInst->Cmd.Buf[4] == 0)
4054   4                                              CONSOLE_PutMessage(pInst, "RTS\r\n");
4055   4                                      else if (pInst->Cmd.Buf[4] == 1)
4056   4                                              CONSOLE_PutMessage(pInst, "Self-CTS\r\n");
4057   4                                      else
4058   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4059   4                                                              
4060   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 67  

4061   4                                      pInst->State = CLI_STATE_COMMAND;
4062   4                                      break;
4063   4                                      
4064   4                              default:
4065   4                                      pInst->Cmd.ReplyLen     = 0;
4066   4                                      break;
4067   4                              }
4068   3                              return 1;
4069   3                      }
4070   2                      else if (pInst->Cmd.WaitTime == 0)
4071   2                      {
4072   3                              CONSOLE_PutMessage(pInst, "Command Time out\r\n");              
4073   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4074   3                              pInst->State = CLI_STATE_COMMAND;
4075   3                              return -1;              
4076   3                      }
4077   2                      else
4078   2                              pInst->Cmd.ReplyLen = 0;        
4079   2              }
4080   1              return 1;
4081   1              
4082   1      CLICMD_GET_WIFI_CONFIG_NO_OPTION:
4083   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4084   1              pInst->Cmd.Buf[2] = 0;
4085   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4086   1              return 1;
4087   1      CLICMD_GET_WIFI_CONFIG_BY_READ:
4088   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4089   1              pInst->Cmd.Buf[2] = 1;
4090   1              pInst->Cmd.Buf[3] = 0;  
4091   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4092   1              return 1;
4093   1      CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ:
4094   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4095   1              pInst->Cmd.Buf[2] = 1;
4096   1              pInst->Cmd.Buf[3] = pInst->CmdId;       
4097   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4098   1              return 1;       
4099   1      } /* End of clicmd_GetWifiConfig() */
4100          
4101          /*
4102           * ----------------------------------------------------------------------------
4103           * Function Name: clicmd_GetWifiConfigHelp()
4104           * Purpose:
4105           * Params:
4106           * Returns:
4107           * Note:
4108           * ----------------------------------------------------------------------------
4109           */
4110          static S16_T clicmd_GetWifiConfigHelp(CONSOLE_Inst *pInst)
4111          {
4112   1          CONSOLE_PutMessage(pInst, "Usage: wificonfig\r\n");
4113   1      
4114   1          return 1;
4115   1      } /* End of clicmd_GetWifiConfigHelp() */
4116          
4117          /*
4118           * ----------------------------------------------------------------------------
4119           * Function Name: clicmd_SetProtectFrame()
4120           * Purpose:
4121           * Params:
4122           * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 68  

4123           * Note:
4124           * ----------------------------------------------------------------------------
4125           */
4126          static S16_T clicmd_SetProtectFrame(CONSOLE_Inst *pInst)
4127          {
4128   1          argc = pInst->Argc;
4129   1          argv = pInst->Argv;
4130   1              if (argc == 0) /* Read current beacon interval */
4131   1              {
4132   2              StrLen = GCONFIG_GetProtectionFrameType();
4133   2              CONSOLE_PutMessage(pInst, "Protection frame type: ");
4134   2              if (StrLen)
4135   2                  CONSOLE_PutMessage(pInst, "Self-CTS\r\n");
4136   2              else
4137   2                  CONSOLE_PutMessage(pInst, "RTS\r\n");
4138   2              return 1;
4139   2              }
4140   1              else if (argc != 1 || strlen(argv[0]) != 1)
4141   1              return -1;
4142   1          
4143   1          StrLen = atoi(argv[0]);
4144   1              if (StrLen > 1)
4145   1                      return -1;
4146   1      
4147   1              GCONFIG_SetProtectionFrameType(StrLen);
4148   1              IO_SelfCtsRW(1, StrLen);
4149   1              return 1;
4150   1      
4151   1      } /* End of clicmd_SetProtectFrame() */
4152          
4153          /*
4154           * ----------------------------------------------------------------------------
4155           * Function Name: clicmd_SetProtectFrameHelp()
4156           * Purpose:
4157           * Params:
4158           * Returns:
4159           * Note:
4160           * ----------------------------------------------------------------------------
4161           */
4162          static S16_T clicmd_SetProtectFrameHelp(CONSOLE_Inst *pInst)
4163          {
4164   1          CONSOLE_PutMessage(pInst, "Usage: setpft <Protection frame type>\r\n");
4165   1          CONSOLE_PutMessage(pInst, "       <Protection frame type>: 0: RTS    1: Self-CTS\r\n");
4166   1      
4167   1          return 1;
4168   1      } /* End of clicmd_SetProtectFrameHelp() */
4169          #endif
4170          
4171          /*
4172           * ----------------------------------------------------------------------------
4173           * Function Name: clicmd_SetDhcpServer()
4174           * Purpose:
4175           * Params:
4176           * Returns:
4177           * Note:
4178           * ----------------------------------------------------------------------------
4179           */
4180          static S16_T clicmd_SetDhcpServer(CONSOLE_Inst *pInst)
4181          {
4182   1          U32_T addr, *pAddr;
4183   1      
4184   1          argc = pInst->Argc;
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 69  

4185   1          argv = pInst->Argv;
4186   1          if (argc == 0) /* current setting */
4187   1          {
4188   2              addr = GCONFIG_GetDhcpSrvStartIp();
4189   2              CONSOLE_PutMessage(pInst, "Start IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4190   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4191   2              addr = GCONFIG_GetDhcpSrvEndIp();
4192   2              CONSOLE_PutMessage(pInst, "End IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4193   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4194   2              addr = GCONFIG_GetDhcpSrvNetmask();
4195   2              CONSOLE_PutMessage(pInst, "Netmask: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4196   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4197   2              addr = GCONFIG_GetDhcpSrvDefGateway();
4198   2              CONSOLE_PutMessage(pInst, "Gateway: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4199   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4200   2              CONSOLE_PutMessage(pInst, "Lease Time: %u\r\n", GCONFIG_GetDhcpSrvLeaseTime());
4201   2      
4202   2              return 1;
4203   2          }
4204   1          else if (argc != 5)
4205   1              return -1;
4206   1      
4207   1          /* Check data validation */
4208   1          pAddr = (U32_T)StrBuf;
4209   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) < 0 || !clicmd_ValidIp(addr))
4210   1              return -1;
4211   1          pAddr[0] = addr;
4212   1      
4213   1          if (clicmd_GetIp2Ulong(argv[1], strlen(argv[1]), &addr) < 0 || !clicmd_ValidIp(addr))
4214   1              return -1;
4215   1          pAddr[1] = addr;
4216   1      
4217   1          if (clicmd_GetIp2Ulong(argv[2], strlen(argv[2]), &addr) < 0)
4218   1              return -1;
4219   1          pAddr[2] = addr;
4220   1      
4221   1          if (clicmd_GetIp2Ulong(argv[3], strlen(argv[3]), &addr) < 0 || !clicmd_ValidIp(addr))
4222   1              return -1;
4223   1          pAddr[3] = addr;
4224   1      
4225   1          argc = atoi(argv[4]);
4226   1          if (argc == 0 || argc > 65535)
4227   1              return -1;
4228   1      
4229   1          if ((pAddr[0] >= pAddr[1]) || (pAddr[0]&pAddr[2]) != (pAddr[1]&pAddr[2]))
4230   1              return -1;
4231   1              
4232   1          GCONFIG_SetDhcpSrvStartIp(pAddr[0]);
4233   1          GCONFIG_SetDhcpSrvEndIp(pAddr[1]);
4234   1          GCONFIG_SetDhcpSrvNetmask(pAddr[2]);
4235   1          GCONFIG_SetDhcpSrvDefGateway(pAddr[3]);
4236   1          GCONFIG_SetDhcpSrvLeaseTime(argc);
4237   1      
4238   1          return 1;
4239   1      } /* End of clicmd_SetDhcpServer() */
4240          
4241          /*
4242           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 70  

4243           * Function Name: clicmd_SetDhcpServerHelp()
4244           * Purpose:
4245           * Params:
4246           * Returns:
4247           * Note:
4248           * ----------------------------------------------------------------------------
4249           */
4250          static S16_T clicmd_SetDhcpServerHelp(CONSOLE_Inst *pInst)
4251          {
4252   1          CONSOLE_PutMessage(pInst, "Usage: dhcpsrv <start addr> <end addr> <netmask> <gateway> <lease>\r\n");
4253   1          return 1;
4254   1      } /* End of clicmd_SetDhcpServerHelp() */
4255          
4256          /*
4257           * ----------------------------------------------------------------------------
4258           * Function Name: clicmd_EnableDhcpServer()
4259           * Purpose:
4260           * Params:
4261           * Returns:
4262           * Note:
4263           * ----------------------------------------------------------------------------
4264           */
4265          static S16_T clicmd_EnableDhcpServer(CONSOLE_Inst *pInst)
4266          {
4267   1          U8_T temp8, *argP;
4268   1      
4269   1          argc = pInst->Argc;
4270   1          argv = pInst->Argv;
4271   1      
4272   1          if (argc == 0) /* current setting */
4273   1          {
4274   2              temp8 = GCONFIG_GetDhcpSrvStatus();
4275   2              if (temp8)
4276   2                  CONSOLE_PutMessage(pInst, "DHCP Server: enable\r\n");
4277   2              else
4278   2                  CONSOLE_PutMessage(pInst, "DHCP Server: disable\r\n");
4279   2              return 1;
4280   2          }
4281   1          else if (argc > 1)
4282   1              return -1;
4283   1          
4284   1          argP = argv[0];
4285   1          if ((strlen(argP) == 1) && IsDigit(*argP))
4286   1              temp8 = *argP - 0x30;
4287   1          else
4288   1              return -1;
4289   1           
4290   1          if (temp8 > 1)
4291   1              return -1;
4292   1      
4293   1          GCONFIG_SetDhcpSrvStatus(temp8);
4294   1      
4295   1          return 1;
4296   1      
4297   1      } /* End of clicmd_EnableDhcpServer() */
4298          
4299          /*
4300           * ----------------------------------------------------------------------------
4301           * Function Name: clicmd_EnableDhcpServerHelp()
4302           * Purpose:
4303           * Params:
4304           * Returns:
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 71  

4305           * Note:
4306           * ----------------------------------------------------------------------------
4307           */
4308          static S16_T clicmd_EnableDhcpServerHelp(CONSOLE_Inst *pInst)
4309          {
4310   1          CONSOLE_PutMessage(pInst, "Usage: setdhcpsrv <status>\r\n");
4311   1          CONSOLE_PutMessage(pInst, "       <status>: 0: disable     1: enable\r\n");
4312   1      
4313   1          return 1;
4314   1      
4315   1      } /* End of clicmd_EnableDhcpServerHelp() */
4316          
4317          
4318          //zwh.add bellow 20120302
4319          /*
4320           * ----------------------------------------------------------------------------
4321           * Function Name: clicmd_Show()
4322           * Purpose:
4323           * Params:
4324           * Returns:
4325           * Note:
4326           * ----------------------------------------------------------------------------
4327           */
4328          static S16_T clicmd_Show(CONSOLE_Inst *pInst)
4329          {
4330   1          U8_T temp8, *argP;
4331   1      
4332   1          argc = pInst->Argc;
4333   1          argv = pInst->Argv;
4334   1      
4335   1              if ((argc == 1) && (strcmp(argv[0], "counter")==0))
4336   1              {
4337   2                      CONSOLE_PutMessage(pInst, "connect try     = %lu\r\n", COUNTER_GET_CONNECT_TRY);
4338   2                      CONSOLE_PutMessage(pInst, "connect failed  = %lu\r\n", COUNTER_GET_CONNECT_FAILED);
4339   2                      CONSOLE_PutMessage(pInst, "connect success = %lu\r\n", COUNTER_GET_CONNECT_SUCCESS);
4340   2                      CONSOLE_PutMessage(pInst, "connect closed  = %lu\r\n", COUNTER_GET_CONNECT_CLOSED);
4341   2                      return 1;
4342   2              }
4343   1              return -1;
4344   1      } /* End of clicmd_EnableDhcpServer() */
*** WARNING C280 IN LINE 4330 OF ..\src\mconsole\clicmd.c: 'temp8': unreferenced local variable
*** WARNING C280 IN LINE 4330 OF ..\src\mconsole\clicmd.c: 'argP': unreferenced local variable
4345          
4346          /*
4347           * ----------------------------------------------------------------------------
4348           * Function Name: clicmd_EnableDhcpServerHelp()
4349           * Purpose:
4350           * Params:
4351           * Returns:
4352           * Note:
4353           * ----------------------------------------------------------------------------
4354           */
4355          static S16_T clicmd_ShowHelp(CONSOLE_Inst *pInst)
4356          {
4357   1          CONSOLE_PutMessage(pInst, "Usage: show <item> \r\n");
4358   1          CONSOLE_PutMessage(pInst, "       <item>: counter \r\n");
4359   1      
4360   1          return 1;
4361   1      
4362   1      } /* End of clicmd_EnableDhcpServerHelp() */                      //zwh.add above 20120302
4363          
4364          /* End of clicmd.c */
C51 COMPILER V9.05   CLICMD                                                                04/11/2012 16:46:57 PAGE 72  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  34209    ----
   CONSTANT SIZE    =   7272    ----
   XDATA SIZE       =    167     419
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   1457    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
