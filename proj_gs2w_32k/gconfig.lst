C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE GCONFIG
OBJECT MODULE PLACED IN .\gconfig.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mgs2wifi\gconfig.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INC
                    -DIR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\
                    -mping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\
                    -src\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\src\counter) DEFIN
                    -E(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\gconfig.lst) OBJECT(.\gconfig.obj)

line level    source

   1          
   2          
   3          /* INCLUDE FILE DECLARATIONS */
   4          #include "adapter.h"
   5          #include "gconfig.h"
   6          #include "gs2w.h"
   7          #include "tcpip.h"
   8          #include "mstimer.h"
   9          #include "stoe.h"
  10          #include "uart0.h"
  11          #include "ax22000.h"
  12          #include "mcpu.h"
  13          #include "printd.h"
  14          #include "hsuart.h"
  15          #include "hsuart2.h"
  16          #include "filesys.h"
  17          #include "mwioctl.h"
  18          #include <absacc.h>
  19          #include <string.h>
  20          
  21          #include "main.h"
  22          #if (INCLUDE_DNS_CLIENT)
  23          #include "dnsc.h"
  24          #endif
  25          /* NAMING CONSTANT DECLARATIONS */
  26          #define DEVICE_STATUS_IDLE                      0
  27          #define DEVICE_STATUS_CONNECTED         1
  28          
  29          /* MACRO DECLARATIONS */
  30          
  31          /* TYPE DECLARATIONS */
  32          typedef U8_T (*pFlashParaData)(U8_T * addr, U16_T len);
  33          
  34          /* GLOBAL VARIABLES DECLARATIONS */
  35          GCONFIG_GID XDATA GCONFIG_Gid = {'A','S','I','X','X','I','S','A'};
  36          static const U8_T default_Wep64Key[4][5] = {0x12,0x34,0x56,0x78,0x90, 0x09,0x87,0x65,0x43,0x21,
  37                                                      0xA1,0xB2,0xC3,0xD4,0xE5, 0x01,0x23,0x45,0x67,0x89};
  38          static const U8_T default_Wep128Key[4][13] = {
  39          0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
  40          0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
  41          0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
  42          0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34};
  43          
  44          /* LOCAL VARIABLES DECLARATIONS */
  45          U8_T XDATA gconfig_SysClock;
  46          GCONFIG_CFG_DATA XDATA gconfig_ConfigData;
  47          U8_T IDATA FirmwareUpgradeFlag[4] _at_ 0x31;
  48          static GCONFIG_MAC_ADDR macAddr;
  49          
  50          /* LOCAL SUBPROGRAM DECLARATIONS */
  51          static BOOL     gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len);
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 2   

  52          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pSramBase, U16_T len);
  53          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length);
  54          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfig);
  55          
  56          /*
  57           * ----------------------------------------------------------------------------
  58           * Function Name: GCONFIG_Task
  59           * Purpose: Main function
  60           * Params:
  61           * Returns:
  62           * Note:
  63           * ----------------------------------------------------------------------------
  64           */
  65          void GCONFIG_Task(void)
  66          {
  67   1      
  68   1      } /* End of GCONFIG_Task() */
  69          
  70          /*
  71           * ----------------------------------------------------------------------------
  72           * Function Name: GCONFIG_Init
  73           * Purpose: Initialization
  74           * Params:
  75           * Returns:
  76           * Note:
  77           * ----------------------------------------------------------------------------
  78           */
  79          void GCONFIG_Init(void)
  80          {
  81   1              U16_T portCfg;
  82   1              U16_T baudRateDiv;
  83   1              U8_T  dataStopParityBits = 0;
  84   1              U16_T val;
  85   1              U8_T  flowCtrl, rs485;
  86   1              
  87   1              // Restore last-saved configuration if applicable       
  88   1              GS2W_SetTaskState(GS2W_STATE_IDLE);
  89   1          memcpy((char *)&macAddr, (char *)MAC_GetMacAddr(), MAC_ADDRESS_LEN);
  90   1              GCONFIG_ReadConfigData();
  91   1          
  92   1              // UART 2 parameters setting
  93   1              portCfg = GCONFIG_GetSerialPort();
  94   1              
  95   1              gconfig_SysClock = MCPU_GetSysClk();
  96   1              
  97   1              val = (portCfg >> 11) & 0x001F;
  98   1       
  99   1              baudRateDiv = GCONFIG_GetBaudRate(val);
 100   1      
 101   1              val = (portCfg >> 8) & 0x0007; 
 102   1              if (val == 0)           dataStopParityBits |= HSLCR_CHAR_5;
 103   1              else if (val == 1)      dataStopParityBits |= HSLCR_CHAR_6;
 104   1              else if (val == 2)      dataStopParityBits |= HSLCR_CHAR_7;
 105   1              else                            dataStopParityBits |= HSLCR_CHAR_8;
 106   1      
 107   1              val = (portCfg >> 5) & 0x0007; 
 108   1              if (val == 0 || val == 1) dataStopParityBits |= HSLCR_PE_ENB;
 109   1              if (val == 1)                     dataStopParityBits |= HSLCR_EPS_EVEN;
 110   1      
 111   1              val = portCfg & 0x0003; 
 112   1              if (val == 0)   dataStopParityBits |= HSLCR_STOP_10;
 113   1              else                    dataStopParityBits |= HSLCR_STOP_15;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 3   

 114   1              
 115   1              val = (portCfg >> 2) & 0x0007; 
 116   1              if (val == 0)           flowCtrl = UR2_FLOW_CTRL_X;
 117   1              else if (val == 1)      flowCtrl = UR2_FLOW_CTRL_HW;
 118   1              else                            flowCtrl = UR2_FLOW_CTRL_NO;
 119   1      
 120   1          rs485 = (HSMCR_DTR | HSMCR_RTS);
 121   1          val = GCONFIG_GetRs485Mode();
 122   1      
 123   1          if (val == 1)
 124   1              rs485 |= UR2_RS485_RECEIVE;
 125   1          else if (val == 2)
 126   1              rs485 |= UR2_RS485_DRIVE;
 127   1          else if (val == 3)
 128   1              rs485 |= (UR2_RS485_DRIVE | UR2_RS485_RECEIVE);
 129   1      
 130   1              HSUR2_Setup((baudRateDiv),
 131   1                                      (dataStopParityBits),
 132   1                                      (HSIER_RDI_ENB|HSIER_RLSI_ENB|HSIER_RBRFI_ENB|HSIER_DOEI_ENB|HSIER_FCCRI_ENB|HSIER_TDCI_ENB),
 133   1                                      (HSFCR_HSUART_ENB|HSFCR_FIFOE|HSFCR_RFR|HSFCR_TFR|HSFCR_TRIG_08),
 134   1                                      (rs485));
 135   1       
 136   1              /* Config the Flow Control Mode */
 137   1              if (flowCtrl == UR2_FLOW_CTRL_HW)
 138   1                      HSUR2_AutoCtsRtsFlowCtrl(1);
 139   1          else if (flowCtrl == UR2_FLOW_CTRL_X)
 140   1                      HSUR2_AutoSoftwareFlowCtrl(1, (HSAFCSR_ASFCE_ENB), ASCII_XON, ASCII_XOFF, 0);
 141   1          else
 142   1          {
 143   2                      HSUR2_AutoCtsRtsFlowCtrl(0);
 144   2              HSUR2_AutoSoftwareFlowCtrl(0, 0, 0, 0, 0);
 145   2          }
 146   1      
 147   1      } /* End of GCONFIG_Init() */
 148          
 149          /////////////////////////////////////////////////////////////////////////////////
 150          
 151          /*
 152           * ----------------------------------------------------------------------------
 153           * Function Name: GCONFIG_SetConfigPacket
 154           * Purpose: 
 155           * Params:
 156           * Returns:
 157           * Note:
 158           * ----------------------------------------------------------------------------
 159           */
 160          void GCONFIG_SetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 161          {
 162   1              gconfig_ConfigData.Option = pCfgPkt->Option;
 163   1              gconfig_ConfigData.DevName = pCfgPkt->DevName;
 164   1              gconfig_ConfigData.Network = pCfgPkt->Network;
 165   1              gconfig_ConfigData.ServerStaticIP = pCfgPkt->ServerStaticIP;
 166   1              gconfig_ConfigData.ServerDataPktListenPort = pCfgPkt->ServerDataPktListenPort;
 167   1              gconfig_ConfigData.ServerMulticastListenPort = pCfgPkt->ServerMulticastListenPort;
 168   1              gconfig_ConfigData.ServerBroadcastListenPort = pCfgPkt->ServerBroadcastListenPort;
 169   1              gconfig_ConfigData.ClientDestIP = pCfgPkt->ClientDestIP;
 170   1              gconfig_ConfigData.ClientDestPort = pCfgPkt->ClientDestPort; 
 171   1              gconfig_ConfigData.Netmask = pCfgPkt->Netmask;
 172   1              gconfig_ConfigData.Gateway = pCfgPkt->Gateway;
 173   1              gconfig_ConfigData.Dns = pCfgPkt->Dns;
 174   1              gconfig_ConfigData.SerialPort = pCfgPkt->SerialPort;            
 175   1              gconfig_ConfigData.EthernetTxTimer = pCfgPkt->EthernetTxTimer;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 4   

 176   1      
 177   1          gconfig_ConfigData.Rs485Mode = pCfgPkt->Rs485Mode;
 178   1        
 179   1          memcpy((char *)gconfig_ConfigData.DestHostName, (char *)pCfgPkt->DestHostName, 36);
 180   1              
 181   1          gconfig_ConfigData.UpgradeCfg.TftpServerIpForMcpu = pCfgPkt->TftpServerIp;
 182   1          memcpy((char *)gconfig_ConfigData.UpgradeCfg.FileNameMcpu, (char *)pCfgPkt->Filename, 63);
 183   1          gconfig_ConfigData.UpgradeCfg.FileNameMcpu[63] = 0;
 184   1          gconfig_ConfigData.UpgradeCfg.FileNameLenMcpu = strlen(gconfig_ConfigData.UpgradeCfg.FileNameMcpu);
 185   1      #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 186   1          gconfig_ConfigData.WifiConfig.WifiBasebandMode = pCfgPkt->WifiConfig.WifiBasebandMode;
 187   1          gconfig_ConfigData.WifiConfig.WifiNetworkMode = pCfgPkt->WifiConfig.WifiNetworkMode;
 188   1          gconfig_ConfigData.WifiConfig.WifiChannel = pCfgPkt->WifiConfig.WifiChannel;
 189   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiSsid, (char *)pCfgPkt->WifiConfig.WifiSsid, 32);
 190   1          gconfig_ConfigData.WifiConfig.WifiSsidLen = pCfgPkt->WifiConfig.WifiSsidLen;
 191   1          gconfig_ConfigData.WifiConfig.WifiTxRate = pCfgPkt->WifiConfig.WifiTxRate;
 192   1          gconfig_ConfigData.WifiConfig.WifiTxPowerLevel = pCfgPkt->WifiConfig.WifiTxPowerLevel;
 193   1          gconfig_ConfigData.WifiConfig.WifiPreambleMode = pCfgPkt->WifiConfig.WifiPreambleMode;
 194   1          gconfig_ConfigData.WifiConfig.WifiBcnInterval = pCfgPkt->WifiConfig.WifiBcnInterval;
 195   1          gconfig_ConfigData.WifiConfig.WifiRtsThreshold = pCfgPkt->WifiConfig.WifiRtsThreshold;
 196   1          gconfig_ConfigData.WifiConfig.WifiAutoPowerCtrl = pCfgPkt->WifiConfig.WifiAutoPowerCtrl;
 197   1          gconfig_ConfigData.WifiConfig.WifiEncryptMode = pCfgPkt->WifiConfig.WifiEncryptMode;
 198   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep64Key[0], (char *)pCfgPkt->WifiConfig.WifiWep64Key
             -[0],  5);
 199   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep64Key[1], (char *)pCfgPkt->WifiConfig.WifiWep64Key
             -[1], 5);
 200   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep64Key[2], (char *)pCfgPkt->WifiConfig.WifiWep64Key
             -[2], 5);
 201   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep64Key[3], (char *)pCfgPkt->WifiConfig.WifiWep64Key
             -[3], 5);
 202   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep128Key[0], (char *)pCfgPkt->WifiConfig.WifiWep128K
             -ey[0], 13);
 203   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep128Key[1], (char *)pCfgPkt->WifiConfig.WifiWep128K
             -ey[1], 13);
 204   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep128Key[2], (char *)pCfgPkt->WifiConfig.WifiWep128K
             -ey[2], 13);
 205   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiWep128Key[3], (char *)pCfgPkt->WifiConfig.WifiWep128K
             -ey[3], 13);
 206   1          gconfig_ConfigData.WifiConfig.WifiWepKeyIndex = pCfgPkt->WifiConfig.WifiWepKeyIndex;
 207   1          gconfig_ConfigData.WifiConfig.WifiWepKeyLength = pCfgPkt->WifiConfig.WifiWepKeyLength;
 208   1          memcpy((char *)gconfig_ConfigData.WifiConfig.WifiPreShareKey, (char *)pCfgPkt->WifiConfig.WifiPreShare
             -Key, 64);
 209   1          gconfig_ConfigData.WifiConfig.WifiPreShareKeyLen = pCfgPkt->WifiConfig.WifiPreShareKeyLen;
 210   1          gconfig_ConfigData.WifiConfig.WifiProtectFrame = pCfgPkt->WifiConfig.WifiProtectFrame;
 211   1      
 212   1      #endif
 213   1          gconfig_ConfigData.DhcpSrv.IpPoolAddrStart = pCfgPkt->DhcpSrv.IpPoolAddrStart;
 214   1          gconfig_ConfigData.DhcpSrv.IpPoolAddrEnd = pCfgPkt->DhcpSrv.IpPoolAddrEnd;
 215   1          gconfig_ConfigData.DhcpSrv.Netmask = pCfgPkt->DhcpSrv.Netmask;
 216   1          gconfig_ConfigData.DhcpSrv.DefaultGateway = pCfgPkt->DhcpSrv.DefaultGateway;
 217   1          gconfig_ConfigData.DhcpSrv.LeaseTime = pCfgPkt->DhcpSrv.LeaseTime;
 218   1          gconfig_ConfigData.DhcpSrv.Status = pCfgPkt->DhcpSrv.Status;
 219   1      
 220   1          gconfig_ConfigData.UpgradeCfg.TftpServerIpForBldr = pCfgPkt->TftpServerIpForBldr;
 221   1          memcpy((char *)gconfig_ConfigData.UpgradeCfg.FileNameBldr, (char *)pCfgPkt->FileNameBldr, 63);
 222   1          gconfig_ConfigData.UpgradeCfg.FileNameBldr[63] = 0;
 223   1          gconfig_ConfigData.UpgradeCfg.FileNameLenBldr = strlen(gconfig_ConfigData.UpgradeCfg.FileNameBldr);
 224   1      
 225   1          gconfig_ConfigData.UpgradeCfg.TftpServerIpForWcpu = pCfgPkt->TftpServerIpForWcpu;
 226   1          memcpy((char *)gconfig_ConfigData.UpgradeCfg.FileNameWcpu, (char *)pCfgPkt->FileNameWcpu, 63);
 227   1          gconfig_ConfigData.UpgradeCfg.FileNameWcpu[63] = 0;
 228   1          gconfig_ConfigData.UpgradeCfg.FileNameLenWcpu = strlen(gconfig_ConfigData.UpgradeCfg.FileNameWcpu);
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 5   

 229   1                      
 230   1              GCONFIG_WriteConfigData();
 231   1      } /* End of GCONFIG_SetConfigPacket() */
 232          
 233          /*
 234           * ----------------------------------------------------------------------------
 235           * Function Name: GCONFIG_GetConfigPacket
 236           * Purpose: 
 237           * Params:
 238           * Returns:
 239           * Note:
 240           * ----------------------------------------------------------------------------
 241           */
 242          void GCONFIG_GetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 243          {
 244   1          memcpy((char *)&pCfgPkt->Gid, (char *)&GCONFIG_Gid, sizeof(GCONFIG_Gid));
 245   1              pCfgPkt->Option = gconfig_ConfigData.Option;
 246   1          pCfgPkt->DevName = gconfig_ConfigData.DevName;
 247   1          pCfgPkt->MacAddr = macAddr;
 248   1              pCfgPkt->Network = gconfig_ConfigData.Network;
 249   1          pCfgPkt->ServerDynamicIP = STOE_GetIPAddr();
 250   1              pCfgPkt->ServerStaticIP = gconfig_ConfigData.ServerStaticIP;
 251   1              pCfgPkt->ServerDataPktListenPort = gconfig_ConfigData.ServerDataPktListenPort;
 252   1              pCfgPkt->ServerMulticastListenPort = gconfig_ConfigData.ServerMulticastListenPort;
 253   1              pCfgPkt->ServerBroadcastListenPort = gconfig_ConfigData.ServerBroadcastListenPort;
 254   1              pCfgPkt->ClientDestIP = gconfig_ConfigData.ClientDestIP;
 255   1              pCfgPkt->ClientDestPort = gconfig_ConfigData.ClientDestPort; 
 256   1              pCfgPkt->Netmask = gconfig_ConfigData.Netmask;
 257   1              pCfgPkt->Gateway = gconfig_ConfigData.Gateway;
 258   1              pCfgPkt->Dns = gconfig_ConfigData.Dns;
 259   1              pCfgPkt->SerialPort = gconfig_ConfigData.SerialPort;            
 260   1              pCfgPkt->EthernetTxTimer = gconfig_ConfigData.EthernetTxTimer;
 261   1      
 262   1          pCfgPkt->Rs485Mode = gconfig_ConfigData.Rs485Mode;
 263   1          memcpy((char *)pCfgPkt->DestHostName, (char *)gconfig_ConfigData.DestHostName, 36);
 264   1              
 265   1          pCfgPkt->TftpServerIp = gconfig_ConfigData.UpgradeCfg.TftpServerIpForMcpu;
 266   1          memcpy((char *)&pCfgPkt->Filename[0], (char *)&gconfig_ConfigData.UpgradeCfg.FileNameMcpu[0], 64);
 267   1      
 268   1              if (GS2W_GetTaskState() == GS2W_STATE_IDLE)
 269   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_IDLE;
 270   1              else
 271   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_CONNECTED;
 272   1      
 273   1      #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 274   1          pCfgPkt->WifiConfig.WifiBasebandMode = gconfig_ConfigData.WifiConfig.WifiBasebandMode;
 275   1          pCfgPkt->WifiConfig.WifiNetworkMode = gconfig_ConfigData.WifiConfig.WifiNetworkMode;
 276   1          pCfgPkt->WifiConfig.WifiChannel = gconfig_ConfigData.WifiConfig.WifiChannel;
 277   1          memcpy((char *)pCfgPkt->WifiConfig.WifiSsid, (char *)gconfig_ConfigData.WifiConfig.WifiSsid, 32);
 278   1          pCfgPkt->WifiConfig.WifiSsidLen = gconfig_ConfigData.WifiConfig.WifiSsidLen;
 279   1          pCfgPkt->WifiConfig.WifiTxRate = gconfig_ConfigData.WifiConfig.WifiTxRate;
 280   1          pCfgPkt->WifiConfig.WifiTxPowerLevel = gconfig_ConfigData.WifiConfig.WifiTxPowerLevel;
 281   1          pCfgPkt->WifiConfig.WifiPreambleMode = gconfig_ConfigData.WifiConfig.WifiPreambleMode;
 282   1          pCfgPkt->WifiConfig.WifiBcnInterval = gconfig_ConfigData.WifiConfig.WifiBcnInterval;
 283   1          pCfgPkt->WifiConfig.WifiRtsThreshold = gconfig_ConfigData.WifiConfig.WifiRtsThreshold;
 284   1          pCfgPkt->WifiConfig.WifiAutoPowerCtrl = gconfig_ConfigData.WifiConfig.WifiAutoPowerCtrl;
 285   1          pCfgPkt->WifiConfig.WifiEncryptMode = gconfig_ConfigData.WifiConfig.WifiEncryptMode;
 286   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep64Key[0], (char *)gconfig_ConfigData.WifiConfig.WifiWep64Key
             -[0], 5);
 287   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep64Key[1], (char *)gconfig_ConfigData.WifiConfig.WifiWep64Key
             -[1], 5);
 288   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep64Key[2], (char *)gconfig_ConfigData.WifiConfig.WifiWep64Key
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 6   

             -[2], 5);
 289   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep64Key[3], (char *)gconfig_ConfigData.WifiConfig.WifiWep64Key
             -[3], 5);
 290   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep128Key[0], (char *)gconfig_ConfigData.WifiConfig.WifiWep128K
             -ey[0], 13);
 291   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep128Key[1], (char *)gconfig_ConfigData.WifiConfig.WifiWep128K
             -ey[1], 13);
 292   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep128Key[2], (char *)gconfig_ConfigData.WifiConfig.WifiWep128K
             -ey[2], 13);
 293   1          memcpy((char *)pCfgPkt->WifiConfig.WifiWep128Key[3], (char *)gconfig_ConfigData.WifiConfig.WifiWep128K
             -ey[3], 13);
 294   1          pCfgPkt->WifiConfig.WifiWepKeyIndex = gconfig_ConfigData.WifiConfig.WifiWepKeyIndex;
 295   1          pCfgPkt->WifiConfig.WifiWepKeyLength = gconfig_ConfigData.WifiConfig.WifiWepKeyLength;
 296   1          memcpy((char *)pCfgPkt->WifiConfig.WifiPreShareKey, (char *)gconfig_ConfigData.WifiConfig.WifiPreShare
             -Key, 64);
 297   1          pCfgPkt->WifiConfig.WifiPreShareKeyLen = gconfig_ConfigData.WifiConfig.WifiPreShareKeyLen;
 298   1          pCfgPkt->WifiConfig.WifiProtectFrame = gconfig_ConfigData.WifiConfig.WifiProtectFrame;
 299   1      #endif
 300   1          pCfgPkt->DhcpSrv.IpPoolAddrStart = gconfig_ConfigData.DhcpSrv.IpPoolAddrStart;
 301   1          pCfgPkt->DhcpSrv.IpPoolAddrEnd = gconfig_ConfigData.DhcpSrv.IpPoolAddrEnd;
 302   1          pCfgPkt->DhcpSrv.Netmask = gconfig_ConfigData.DhcpSrv.Netmask;
 303   1          pCfgPkt->DhcpSrv.DefaultGateway = gconfig_ConfigData.DhcpSrv.DefaultGateway;
 304   1          pCfgPkt->DhcpSrv.LeaseTime = gconfig_ConfigData.DhcpSrv.LeaseTime;
 305   1          pCfgPkt->DhcpSrv.Status = gconfig_ConfigData.DhcpSrv.Status;
 306   1      
 307   1          pCfgPkt->TftpServerIpForBldr = gconfig_ConfigData.UpgradeCfg.TftpServerIpForBldr;
 308   1          memcpy((char *)&pCfgPkt->FileNameBldr[0], (char *)&gconfig_ConfigData.UpgradeCfg.FileNameBldr[0], 64);
 309   1      
 310   1          pCfgPkt->TftpServerIpForWcpu = gconfig_ConfigData.UpgradeCfg.TftpServerIpForWcpu;
 311   1          memcpy((char *)&pCfgPkt->FileNameWcpu[0], (char *)&gconfig_ConfigData.UpgradeCfg.FileNameWcpu[0], 64);
 312   1      
 313   1      } /* End of GCONFIG_GetConfigPacket() */
 314          
 315          /*
 316           * ----------------------------------------------------------------------------
 317           * Function Name: GCONFIG_ReadConfigData
 318           * Purpose: 
 319           * Params:
 320           * Returns:
 321           * Note:
 322           * ----------------------------------------------------------------------------
 323           */
 324          void GCONFIG_ReadConfigData(void)
 325          {
 326   1      #ifdef RuntimeCodeAt32KH
 327   1              BOOL bRet;
 328   1      
 329   1              printd("Read configuration data");
 330   1              bRet = gconfig_ReStoreParameter(0, &gconfig_ConfigData, sizeof(gconfig_ConfigData));
 331   1      
 332   1              if (bRet == FALSE || (gconfig_ConfigData.ServerStaticIP & 0x000000FF) == 0)
 333   1              {
 334   2                      GCONFIG_ReadDefaultConfigData();
 335   2                      GCONFIG_WriteConfigData();
 336   2                      gconfig_DisplayConfigData(&gconfig_ConfigData);
 337   2              }
 338   1      
 339   1      #else
                              GCONFIG_ReadDefaultConfigData();
                              gconfig_DisplayConfigData(&gconfig_ConfigData);
              #endif
 343   1      
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 7   

 344   1      } /* End of GCONFIG_ReadConfigData() */
 345          
 346          /*
 347           * ----------------------------------------------------------------------------
 348           * Function Name: GCONFIG_WriteConfigData
 349           * Purpose: 
 350           * Params:
 351           * Returns:
 352           * Note:
 353           * ----------------------------------------------------------------------------
 354           */
 355          void GCONFIG_WriteConfigData(void)
 356          {
 357   1      #ifdef RuntimeCodeAt32KH
 358   1              gconfig_StoreParameter(&gconfig_ConfigData, (U16_T)sizeof(gconfig_ConfigData));
 359   1      #endif  
 360   1      } /* End of GCONFIG_WriteConfigData() */
 361          
 362          /*
 363           * ----------------------------------------------------------------------------
 364           * Function Name: GCONFIG_ReadDefaultConfigData
 365           * Purpose: 
 366           * Params:
 367           * Returns:
 368           * Note:
 369           * ----------------------------------------------------------------------------
 370           */
 371          void GCONFIG_ReadDefaultConfigData(void)
 372          {
 373   1          U8_T i;
 374   1      
 375   1              printd("Read default configuration data. \n\r");
 376   1      
 377   1              gconfig_ConfigData.Signature[0] = 'A';
 378   1              gconfig_ConfigData.Signature[1] = 'S';
 379   1              gconfig_ConfigData.Signature[2] = 'I';
 380   1              gconfig_ConfigData.Signature[3] = 'X';
 381   1          memset((char *)&gconfig_ConfigData.UpgradeCfg, 0, sizeof(GCONFIG_UPGRADE));
 382   1      
 383   1      #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 384   1          gconfig_ConfigData.WifiConfig.WifiBasebandMode = 1;       /* mixed mode, 802.11b+g mode, 802.11a mode 
             -*/
 385   1          gconfig_ConfigData.WifiConfig.WifiNetworkMode = 1;        /* ad hoc mode, infrastructure mode */
 386   1          gconfig_ConfigData.WifiConfig.WifiChannel = 11;
 387   1          strcpy(gconfig_ConfigData.WifiConfig.WifiSsid, "R2WiFi");
 388   1          gconfig_ConfigData.WifiConfig.WifiSsidLen = 6;
 389   1          gconfig_ConfigData.WifiConfig.WifiTxRate = 0;             /* auto, 1, 2, .... 48, 54M */
 390   1          gconfig_ConfigData.WifiConfig.WifiTxPowerLevel = 0;
 391   1          gconfig_ConfigData.WifiConfig.WifiPreambleMode = 1;       /* auto, long preamble, short preamble */
 392   1          gconfig_ConfigData.WifiConfig.WifiBcnInterval = 100;      /* beacon interval, only for IBSS mode */
 393   1          gconfig_ConfigData.WifiConfig.WifiRtsThreshold = 2432;
 394   1          gconfig_ConfigData.WifiConfig.WifiAutoPowerCtrl = 1;      /* auto power control enable or disable*/
 395   1          gconfig_ConfigData.WifiConfig.WifiEncryptMode = 0;        /* 0:disable, 1:wep64, 2:wep128, 3:tkip, 4:a
             -es */
 396   1          gconfig_ConfigData.WifiConfig.WifiWepKeyIndex = 0;
 397   1          gconfig_ConfigData.WifiConfig.WifiWepKeyLength = 0;       /* wep key length, 0:64 bits, 1:128 bits*/
 398   1      
 399   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep64Key[0][0], (char *)&default_Wep64Key[0][0], 5);
 400   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep64Key[1][0], (char *)&default_Wep64Key[1][0], 5);
 401   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep64Key[2][0], (char *)&default_Wep64Key[2][0], 5);
 402   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep64Key[3][0], (char *)&default_Wep64Key[3][0], 5);
 403   1      
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 8   

 404   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep128Key[0][0], (char *)&default_Wep128Key[0][0], 1
             -3);
 405   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep128Key[1][0], (char *)&default_Wep128Key[1][0], 1
             -3);
 406   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep128Key[2][0], (char *)&default_Wep128Key[2][0], 1
             -3);
 407   1          memcpy((char *)&gconfig_ConfigData.WifiConfig.WifiWep128Key[3][0], (char *)&default_Wep128Key[3][0], 1
             -3);
 408   1      
 409   1          strcpy((char *)gconfig_ConfigData.WifiConfig.WifiPreShareKey,"12345678");
 410   1          gconfig_ConfigData.WifiConfig.WifiPreShareKeyLen = strlen(gconfig_ConfigData.WifiConfig.WifiPreShareKe
             -y);
 411   1          gconfig_ConfigData.WifiConfig.WifiProtectFrame = 0;
 412   1      #endif
 413   1      
 414   1              gconfig_ConfigData.Checksum = 0x00;
 415   1          gconfig_ConfigData.SwCfgLength = sizeof(gconfig_ConfigData);
 416   1              gconfig_ConfigData.UdpAutoConnectClientIp = 0x00000000;
 417   1              gconfig_ConfigData.UdpAutoConnectClientPort = 0x0000;
 418   1      
 419   1              gconfig_ConfigData.Option = 0;
 420   1              memset(&gconfig_ConfigData.DevName, 0, sizeof(GCONFIG_DEV_NAME));
 421   1      
 422   1              gconfig_ConfigData.Network = (GCONFIG_NETWORK_SERVER | GCONFIG_NETWORK_DHCP_ENABLE |
 423   1                                        GCONFIG_NETWORK_PROTO_TCP | GCONFIG_NETWORK_PROTO_UDP_BCAST);
 424   1      
 425   1              gconfig_ConfigData.ServerStaticIP = 0xc0a80203; // 192.168.2.3
 426   1              gconfig_ConfigData.ServerDataPktListenPort = GCONFIG_DEFAULT_DATA_PORT;
 427   1              gconfig_ConfigData.ServerMulticastListenPort = GCONFIG_UDP_MCAST_SERVER_PORT;
 428   1              gconfig_ConfigData.ServerBroadcastListenPort = GCONFIG_UDP_BCAST_SERVER_PORT;
 429   1              gconfig_ConfigData.ClientDestIP = 0xc0a80202;   // 192.168.2.2
 430   1              gconfig_ConfigData.ClientDestPort = GCONFIG_DEFAULT_DATA_PORT; 
 431   1              gconfig_ConfigData.Netmask = 0xffffff00;                // 255.255.255.0
 432   1              gconfig_ConfigData.Gateway = 0xc0a80203;                // 192.168.2.1                                          //zwh.20120209
 433   1              gconfig_ConfigData.Dns = 0xa85f0101;                    // 168.95.1.1
 434   1      
 435   1              gconfig_ConfigData.SerialPort = (GCONFIG_SPORT_BRATE_115200 |
 436   1                                                         GCONFIG_SPORT_DATABIT_8 |
 437   1                                                                         GCONFIG_SPORT_PARITY_NONE |
 438   1                                                                         GCONFIG_SPORT_FLOWC_NONE |
 439   1                                                                         GCONFIG_SPORT_STOPBIT_1
 440   1                                                                        );
 441   1      
 442   1              gconfig_ConfigData.EthernetTxTimer = 100; // 100 ms
 443   1      
 444   1          strcpy(gconfig_ConfigData.Admin.Username, "admin");
 445   1          strcpy(gconfig_ConfigData.Admin.Passwd, "admin");
 446   1          gconfig_ConfigData.Admin.Level = 5;
 447   1          gconfig_ConfigData.Rs485Mode = 0;
 448   1      
 449   1          strcpy(gconfig_ConfigData.DestHostName, "192.168.2.2"); /* 192.168.2.2 */
 450   1      
 451   1          /* DHCP server configuration */
 452   1          gconfig_ConfigData.DhcpSrv.IpPoolAddrStart = 0xc0a80204; /* 192.168.2.4  */
 453   1          gconfig_ConfigData.DhcpSrv.IpPoolAddrEnd = 0xc0a8020a;   /* 192.168.2.10 */
 454   1          gconfig_ConfigData.DhcpSrv.Netmask = 0xFFFFFF00;
 455   1          gconfig_ConfigData.DhcpSrv.DefaultGateway = 0xc0a80203;  /* 0.0.0.0  */                     //zwh.20120209
 456   1          gconfig_ConfigData.DhcpSrv.LeaseTime = 1440;
 457   1          gconfig_ConfigData.DhcpSrv.Status = 1;                   /* 0: disable  1: enable */
 458   1      
 459   1      } /* End of GCONFIG_ReadDefaultConfigData */
*** WARNING C280 IN LINE 373 OF ..\src\mgs2wifi\gconfig.c: 'i': unreferenced local variable
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 9   

 460          
 461          /////////////////////////////////////////////////////////////////////////////////
 462          
 463          /*
 464           * ----------------------------------------------------------------------------
 465           * Function Name: GCONFIG_EnableUdpAutoConnectAfterReboot
 466           * Purpose: 
 467           * Params:
 468           * Returns:
 469           * Note:
 470           * ----------------------------------------------------------------------------
 471           */
 472          U8_T GCONFIG_EnableUdpAutoConnectAfterReboot(void)
 473          {
 474   1              if ((gconfig_ConfigData.Option & GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT) 
 475   1                   == GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT)
 476   1                      return TRUE;
 477   1              
 478   1              return FALSE;
 479   1      } /* End of GCONFIG_EnableUdpAutoConnectAfterReboot() */
 480          
 481          /*
 482           * ----------------------------------------------------------------------------
 483           * Function Name: GCONFIG_EnableFirmwareUpgrade
 484           * Purpose: 
 485           * Params:
 486           * Returns:
 487           * Note:
 488           * ----------------------------------------------------------------------------
 489           */
 490          void GCONFIG_EnableFirmwareUpgrade(U8_T type)
 491          {
 492   1              FirmwareUpgradeFlag[0] = 'a';
 493   1              FirmwareUpgradeFlag[1] = 'x';
 494   1              FirmwareUpgradeFlag[2] = '_';
 495   1      
 496   1          if (type == GCONFIG_FTYPE_BLDR)
 497   1                  FirmwareUpgradeFlag[3] = 'b';
 498   1          else if (type == GCONFIG_FTYPE_WCPU)
 499   1                  FirmwareUpgradeFlag[3] = 'w';
 500   1          else
 501   1              FirmwareUpgradeFlag[3] = 'm';
 502   1      
 503   1          /* save the network configuration for boot loader */
 504   1          gconfig_ConfigData.UpgradeCfg.DeviceIp = STOE_GetIPAddr();
 505   1          gconfig_ConfigData.UpgradeCfg.DeviceNetmask = STOE_GetSubnetMask();
 506   1          gconfig_ConfigData.UpgradeCfg.DeviceGateway = STOE_GetGateway();
 507   1      
 508   1      } /* End of GCONFIG_EnableFirmwareUpgrade() */
 509          
 510          /*
 511           * ----------------------------------------------------------------------------
 512           * Function Name: GCONFIG_IpAddr2Ulong()
 513           * Purpose:
 514           * Params:
 515           * Returns:
 516           * Note:
 517           * ----------------------------------------------------------------------------
 518           */
 519          U32_T GCONFIG_IpAddr2Ulong(U8_T* pBuf, U8_T len)
 520          {
 521   1              U32_T   ip = 0;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 10  

 522   1              U8_T*   point = (U8_T*)&ip;
 523   1              U8_T    count = 0;
 524   1              U8_T    count2 = 0;
 525   1      
 526   1              while (1)
 527   1              {
 528   2                      count2 = 0;
 529   2                      while ((*pBuf != '.') && len)
 530   2                      {
 531   3                              count2++;
 532   3                              if (count2 > 3) return 0xffffffff;
 533   3      
 534   3                              *point *= 10;
 535   3        
 536   3                              if ((*pBuf < 0x3a) && (*pBuf > 0x2f))
 537   3                                      *point += (*pBuf - 0x30);
 538   3                              else
 539   3                                      return 0xffffffff;
 540   3      
 541   3                              pBuf++;
 542   3                              len--;
 543   3                      }
 544   2        
 545   2                      if (len == 0) break;
 546   2      
 547   2                      pBuf++;
 548   2                      len--;
 549   2                      count++;
 550   2                      point++;
 551   2      
 552   2                      if (count > 3) return 0xffffffff;
 553   2              }
 554   1      
 555   1              if (count != 3) return 0xffffffff;
 556   1      
 557   1              return ip;
 558   1      } /* End of GCONFIG_IpAddr2Ulong() */
 559          /////////////////////////////////////////////////////////////////////////////////
 560          // Get Functions
 561          
 562          /*
 563           * ----------------------------------------------------------------------------
 564           * Function Name: GCONFIG_GetDeviceName
 565           * Purpose: 
 566           * Params:
 567           * Returns:
 568           * Note:
 569           * ----------------------------------------------------------------------------
 570           */
 571          void GCONFIG_SetDeviceName(GCONFIG_DEV_NAME* pDevName)
 572          {
 573   1              memcpy(&gconfig_ConfigData.DevName, pDevName, sizeof(GCONFIG_DEV_NAME)); 
 574   1      } /* End of GCONFIG_GetDeviceName() */
 575          
 576          /*
 577           * ----------------------------------------------------------------------------
 578           * Function Name: GCONFIG_SetNetwork
 579           * Purpose: 
 580           * Params:
 581           * Returns:
 582           * Note:
 583           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 11  

 584           */
 585          void GCONFIG_SetNetwork(U16_T val)
 586          {
 587   1              gconfig_ConfigData.Network = val;       
 588   1      } /* End of GCONFIG_SetNetwork() */
 589          
 590          /*
 591           * ----------------------------------------------------------------------------
 592           * Function Name: GCONFIG_SetServerStaticIP
 593           * Purpose: 
 594           * Params:
 595           * Returns:
 596           * Note:
 597           * ----------------------------------------------------------------------------
 598           */
 599          void GCONFIG_SetServerStaticIP(U32_T ip)
 600          {
 601   1              gconfig_ConfigData.ServerStaticIP = ip; 
 602   1              GCONFIG_SetGateway(ip); //zwh.20120209
 603   1      } /* End of GCONFIG_SetServerStaticIP() */
 604          
 605          /*
 606           * ----------------------------------------------------------------------------
 607           * Function Name: GCONFIG_SetServerDataPktListenPort
 608           * Purpose: 
 609           * Params:
 610           * Returns:
 611           * Note:
 612           * ----------------------------------------------------------------------------
 613           */
 614          void GCONFIG_SetServerDataPktListenPort(U16_T port)
 615          {
 616   1              gconfig_ConfigData.ServerDataPktListenPort = port;
 617   1      } /* End of GCONFIG_SetServerDataPktListenPort() */
 618          
 619          /*
 620           * ----------------------------------------------------------------------------
 621           * Function Name: GCONFIG_SetServerMulticastListenPort
 622           * Purpose: 
 623           * Params:
 624           * Returns:
 625           * Note:
 626           * ----------------------------------------------------------------------------
 627           */
 628          void GCONFIG_SetServerMulticastListenPort(U16_T port)
 629          {
 630   1              gconfig_ConfigData.ServerMulticastListenPort = port;
 631   1      } /* End of GCONFIG_SetServerMulticastListenPort() */
 632          
 633          /*
 634           * ----------------------------------------------------------------------------
 635           * Function Name: GCONFIG_SetServerBroadcastListenPort
 636           * Purpose: 
 637           * Params:
 638           * Returns:
 639           * Note:
 640           * ----------------------------------------------------------------------------
 641           */
 642          void GCONFIG_SetServerBroadcastListenPort(U16_T port)
 643          {
 644   1              gconfig_ConfigData.ServerBroadcastListenPort = port;
 645   1      } /* End of GCONFIG_SetServerBroadcastListenPort() */
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 12  

 646          
 647          /*
 648           * ----------------------------------------------------------------------------
 649           * Function Name: GCONFIG_SetClientDestIP
 650           * Purpose: 
 651           * Params:
 652           * Returns:
 653           * Note:
 654           * ----------------------------------------------------------------------------
 655           */
 656          void GCONFIG_SetClientDestIP(U32_T ip)
 657          {
 658   1              gconfig_ConfigData.ClientDestIP = ip;
 659   1      } /* End of GCONFIG_SetClientDestIP() */
 660          
 661          /*
 662           * ----------------------------------------------------------------------------
 663           * Function Name: GCONFIG_SetClientDestPort
 664           * Purpose: 
 665           * Params:
 666           * Returns:
 667           * Note:
 668           * ----------------------------------------------------------------------------
 669           */
 670          void GCONFIG_SetClientDestPort(U16_T port)
 671          {
 672   1              gconfig_ConfigData.ClientDestPort = port;
 673   1      } /* End of GCONFIG_SetClientDestPort() */
 674          
 675          /*
 676           * ----------------------------------------------------------------------------
 677           * Function Name: GCONFIG_SetNetmask
 678           * Purpose: 
 679           * Params:
 680           * Returns:
 681           * Note:
 682           * ----------------------------------------------------------------------------
 683           */
 684          void GCONFIG_SetNetmask(U32_T netmask)
 685          {
 686   1              gconfig_ConfigData.Netmask = netmask;
 687   1      } /* End of GCONFIG_SetNetmask() */
 688          
 689          /*
 690           * ----------------------------------------------------------------------------
 691           * Function Name: GCONFIG_SetGateway
 692           * Purpose: 
 693           * Params:
 694           * Returns:
 695           * Note:
 696           * ----------------------------------------------------------------------------
 697           */
 698          void GCONFIG_SetGateway(U32_T gateway)
 699          {
 700   1              gconfig_ConfigData.Gateway = gateway;
 701   1              gconfig_ConfigData.DhcpSrv.DefaultGateway = gateway;       //zwh.20120209
 702   1      } /* End of GCONFIG_SetGateway() */
 703          
 704          /*
 705           * ----------------------------------------------------------------------------
 706           * Function Name: GCONFIG_SetDNS
 707           * Purpose: 
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 13  

 708           * Params:
 709           * Returns:
 710           * Note:
 711           * ----------------------------------------------------------------------------
 712           */
 713          void GCONFIG_SetDNS(U32_T dns)
 714          {
 715   1              gconfig_ConfigData.Dns = dns;
 716   1      } /* End of GCONFIG_SetDNS() */
 717          
 718          /*
 719           * ----------------------------------------------------------------------------
 720           * Function Name: GCONFIG_SetSerialPort
 721           * Purpose: 
 722           * Params:
 723           * Returns:
 724           * Note:
 725           * ----------------------------------------------------------------------------
 726           */
 727          void GCONFIG_SetSerialPort(U16_T sPort)
 728          {
 729   1              gconfig_ConfigData.SerialPort = sPort;
 730   1      } /* End of GCONFIG_SetSerialPort() */
 731          
 732          
 733          /*
 734           * ----------------------------------------------------------------------------
 735           * Function Name: GCONFIG_SetEthernetTxTimer
 736           * Purpose: 
 737           * Params:
 738           * Returns:
 739           * Note:
 740           * ----------------------------------------------------------------------------
 741           */
 742          void GCONFIG_SetEthernetTxTimer(U16_T timer)
 743          {
 744   1              gconfig_ConfigData.EthernetTxTimer = timer;
 745   1      } /* End of GCONFIG_SetEthernetTxTimer() */
 746          
 747          /*
 748           * ----------------------------------------------------------------------------
 749           * Function Name: GCONFIG_SetUdpAutoConnectClientIp
 750           * Purpose: 
 751           * Params:
 752           * Returns:
 753           * Note:
 754           * ----------------------------------------------------------------------------
 755           */
 756          void GCONFIG_SetUdpAutoConnectClientIp(U32_T ip)
 757          {
 758   1              gconfig_ConfigData.UdpAutoConnectClientIp = ip;
 759   1      } /* End of GCONFIG_SetUdpAutoConnectClientIp() */
 760          
 761          /*
 762           * ----------------------------------------------------------------------------
 763           * Function Name: GCONFIG_SetUdpAutoConnectRemotePort
 764           * Purpose: 
 765           * Params:
 766           * Returns:
 767           * Note:
 768           * ----------------------------------------------------------------------------
 769           */
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 14  

 770          void GCONFIG_SetUdpAutoConnectClientPort(U16_T port)
 771          {
 772   1              gconfig_ConfigData.UdpAutoConnectClientPort = port;
 773   1      } /* End of GCONFIG_SetUdpAutoConnectClientPort() */
 774          
 775          /*
 776           * ----------------------------------------------------------------------------
 777           * Function Name: GCONFIG_SetTftpServerIp
 778           * Purpose: 
 779           * Params:
 780           * Returns:
 781           * Note:
 782           * ----------------------------------------------------------------------------
 783           */
 784          void GCONFIG_SetTftpServerIp(U32_T ip, U8_T type)
 785          {
 786   1          if (type == GCONFIG_FTYPE_BLDR)
 787   1                  gconfig_ConfigData.UpgradeCfg.TftpServerIpForBldr = ip;
 788   1          else if (type == GCONFIG_FTYPE_MCPU)
 789   1              gconfig_ConfigData.UpgradeCfg.TftpServerIpForMcpu = ip;
 790   1          else if (type == GCONFIG_FTYPE_WCPU)
 791   1                  gconfig_ConfigData.UpgradeCfg.TftpServerIpForWcpu = ip;
 792   1      
 793   1      } /* End of GCONFIG_SetTftpServerIp() */
 794          
 795          /*
 796           * ----------------------------------------------------------------------------
 797           * Function Name: GCONFIG_SetFilename
 798           * Purpose: 
 799           * Params:
 800           * Returns:
 801           * Note:
 802           * ----------------------------------------------------------------------------
 803           */
 804          U8_T GCONFIG_SetFilename(U8_T *filename, U8_T len, U8_T type)
 805          {
 806   1              if (len > (GCONFIG_MAX_FILENAME_LEN - 1))
 807   1                      len = (GCONFIG_MAX_FILENAME_LEN - 1);
 808   1      
 809   1          if (type == GCONFIG_FTYPE_BLDR)
 810   1          {
 811   2                  memcpy(gconfig_ConfigData.UpgradeCfg.FileNameBldr, filename, len); 
 812   2                  gconfig_ConfigData.UpgradeCfg.FileNameBldr[len] = '\0';
 813   2              gconfig_ConfigData.UpgradeCfg.FileNameLenBldr = len;
 814   2          }
 815   1          else if (type == GCONFIG_FTYPE_MCPU)
 816   1          {
 817   2              memcpy(gconfig_ConfigData.UpgradeCfg.FileNameMcpu, filename, len); 
 818   2              gconfig_ConfigData.UpgradeCfg.FileNameMcpu[len] = '\0';
 819   2          gconfig_ConfigData.UpgradeCfg.FileNameLenMcpu = len;        
 820   2          }
 821   1          else if (type == GCONFIG_FTYPE_WCPU)
 822   1          {
 823   2                  memcpy(gconfig_ConfigData.UpgradeCfg.FileNameWcpu, filename, len); 
 824   2                  gconfig_ConfigData.UpgradeCfg.FileNameWcpu[len] = '\0';
 825   2              gconfig_ConfigData.UpgradeCfg.FileNameLenWcpu = len;
 826   2          }
 827   1          else
 828   1              return 0;
 829   1      
 830   1          return len;
 831   1      } /* End of GCONFIG_SetFilename() */
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 15  

 832          
 833          /////////////////////////////////////////////////////////////////////////////////
 834          // Get Functions
 835          
 836          /*
 837           * ----------------------------------------------------------------------------
 838           * Function Name: GCONFIG_GetTftpServerIp
 839           * Purpose: 
 840           * Params:
 841           * Returns:
 842           * Note:
 843           * ----------------------------------------------------------------------------
 844           */
 845          U32_T GCONFIG_GetTftpServerIp(U8_T type)
 846          {
 847   1          if (type > GCONFIG_FTYPE_WCPU)
 848   1              return 0;
 849   1      
 850   1          if (type == GCONFIG_FTYPE_BLDR)
 851   1                  return gconfig_ConfigData.UpgradeCfg.TftpServerIpForBldr;
 852   1          else if (type == GCONFIG_FTYPE_MCPU)
 853   1              return gconfig_ConfigData.UpgradeCfg.TftpServerIpForMcpu; 
 854   1      
 855   1          return gconfig_ConfigData.UpgradeCfg.TftpServerIpForWcpu;
 856   1      
 857   1      } /* End of GCONFIG_GetTftpServerIp() */
 858          
 859          /*
 860           * ----------------------------------------------------------------------------
 861           * Function Name: GCONFIG_GetFilename
 862           * Purpose: 
 863           * Params:
 864           * Returns:
 865           * Note:
 866           * ----------------------------------------------------------------------------
 867           */
 868          U8_T GCONFIG_GetFilename(U8_T *filename, U8_T len, U8_T type)
 869          {
 870   1          if (!filename || len < GCONFIG_MAX_FILENAME_LEN || type > GCONFIG_FTYPE_WCPU)
 871   1              return 0;
 872   1      
 873   1          if (type == GCONFIG_FTYPE_BLDR)
 874   1          {
 875   2                  memcpy(filename, gconfig_ConfigData.UpgradeCfg.FileNameBldr, GCONFIG_MAX_FILENAME_LEN);
 876   2              len = gconfig_ConfigData.UpgradeCfg.FileNameLenBldr;
 877   2          }
 878   1          else if (type == GCONFIG_FTYPE_MCPU)
 879   1              {
 880   2              memcpy(filename, gconfig_ConfigData.UpgradeCfg.FileNameMcpu, GCONFIG_MAX_FILENAME_LEN);
 881   2              len = gconfig_ConfigData.UpgradeCfg.FileNameLenMcpu;
 882   2          }
 883   1          else if (type == GCONFIG_FTYPE_WCPU)
 884   1          {
 885   2                  memcpy(filename, gconfig_ConfigData.UpgradeCfg.FileNameWcpu, GCONFIG_MAX_FILENAME_LEN); 
 886   2              len = gconfig_ConfigData.UpgradeCfg.FileNameLenWcpu;
 887   2          }
 888   1      
 889   1          return len; 
 890   1      } /* End of GCONFIG_GetFilename() */
 891          
 892          /*
 893           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 16  

 894           * Function Name: GCONFIG_GetDeviceName
 895           * Purpose: 
 896           * Params:
 897           * Returns:
 898           * Note:
 899           * ----------------------------------------------------------------------------
 900           */
 901          GCONFIG_DEV_NAME* GCONFIG_GetDeviceName(void)
 902          {
 903   1              return &gconfig_ConfigData.DevName;
 904   1      } /* End of GCONFIG_GetDeviceName() */
 905          
 906          /*
 907           * ----------------------------------------------------------------------------
 908           * Function Name: GCONFIG_GetMacAddress
 909           * Purpose: 
 910           * Params:
 911           * Returns:
 912           * Note:
 913           * ----------------------------------------------------------------------------
 914           */
 915          GCONFIG_MAC_ADDR GCONFIG_GetMacAddress(void)
 916          {
 917   1              return macAddr;
 918   1      } /* End of GCONFIG_GetMacAddress() */
 919          
 920          /*
 921           * ----------------------------------------------------------------------------
 922           * Function Name: GCONFIG_GetNetwork
 923           * Purpose: 
 924           * Params:
 925           * Returns:
 926           * Note:
 927           * ----------------------------------------------------------------------------
 928           */
 929          U16_T GCONFIG_GetNetwork(void)
 930          {
 931   1              return gconfig_ConfigData.Network;
 932   1      } /* End of GCONFIG_GetNetwork() */
 933          
 934          /*
 935           * ----------------------------------------------------------------------------
 936           * Function Name: GCONFIG_GetServerStaticIP
 937           * Purpose: 
 938           * Params:
 939           * Returns:
 940           * Note:
 941           * ----------------------------------------------------------------------------
 942           */
 943          U32_T GCONFIG_GetServerStaticIP(void)
 944          {
 945   1              return gconfig_ConfigData.ServerStaticIP;
 946   1      } /* End of GCONFIG_GetServerStaticIP() */
 947          
 948          /*
 949           * ----------------------------------------------------------------------------
 950           * Function Name: GCONFIG_GetServerDataPktListenPort
 951           * Purpose: 
 952           * Params:
 953           * Returns:
 954           * Note:
 955           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 17  

 956           */
 957          U16_T GCONFIG_GetServerDataPktListenPort(void)
 958          {
 959   1              return gconfig_ConfigData.ServerDataPktListenPort;
 960   1      } /* End of GCONFIG_GetServerDataPktListenPort() */
 961          
 962          /*
 963           * ----------------------------------------------------------------------------
 964           * Function Name: GCONFIG_GetServerMulticastListenPort
 965           * Purpose: 
 966           * Params:
 967           * Returns:
 968           * Note:
 969           * ----------------------------------------------------------------------------
 970           */
 971          U16_T GCONFIG_GetServerMulticastListenPort(void)
 972          {
 973   1              return gconfig_ConfigData.ServerMulticastListenPort;
 974   1      } /* End of GCONFIG_GetServerMulticastListenPort() */
 975          
 976          /*
 977           * ----------------------------------------------------------------------------
 978           * Function Name: GCONFIG_GetServerBroadcastListenPort
 979           * Purpose: 
 980           * Params:
 981           * Returns:
 982           * Note:
 983           * ----------------------------------------------------------------------------
 984           */
 985          U16_T GCONFIG_GetServerBroadcastListenPort(void)
 986          {
 987   1              return gconfig_ConfigData.ServerBroadcastListenPort;
 988   1      } /* End of GCONFIG_GetServerBroadcastListenPort() */
 989          
 990          /*
 991           * ----------------------------------------------------------------------------
 992           * Function Name: GCONFIG_GetClientDestIP
 993           * Purpose: 
 994           * Params:
 995           * Returns:
 996           * Note:
 997           * ----------------------------------------------------------------------------
 998           */
 999          U32_T GCONFIG_GetClientDestIP(void)
1000          {
1001   1      #if (INCLUDE_DNS_CLIENT)
1002   1              U32_T   DestIP, DestNameLen;
1003   1          DNSC_STATE state;
1004   1      
1005   1              DestNameLen = strlen(gconfig_ConfigData.DestHostName);
1006   1              DestIP = GCONFIG_IpAddr2Ulong(gconfig_ConfigData.DestHostName, DestNameLen);
1007   1              if (DestIP == 0xffffffff)
1008   1              {
1009   2                      if ((state = DNSC_Query(gconfig_ConfigData.DestHostName, &DestIP)) == DNSC_QUERY_OK)
1010   2                              return DestIP;
1011   2                      else if (state == DNSC_QUERY_FREE)
1012   2                              DNSC_Start(gconfig_ConfigData.DestHostName);
1013   2                      return 0;               
1014   2              }
1015   1              return DestIP;
1016   1      #else
                      return gconfig_ConfigData.ClientDestIP;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 18  

              #endif                  
1019   1      } /* End of GCONFIG_GetClientDestIP() */
1020          
1021          /*
1022           * ----------------------------------------------------------------------------
1023           * Function Name: GCONFIG_GetClientDestPort
1024           * Purpose: 
1025           * Params:
1026           * Returns:
1027           * Note:
1028           * ----------------------------------------------------------------------------
1029           */
1030          U16_T GCONFIG_GetClientDestPort(void)
1031          {
1032   1              return gconfig_ConfigData.ClientDestPort;
1033   1      } /* End of GCONFIG_GetClientDestPort() */
1034          
1035          /*
1036           * ----------------------------------------------------------------------------
1037           * Function Name: GCONFIG_GetNetmask
1038           * Purpose: 
1039           * Params:
1040           * Returns:
1041           * Note:
1042           * ----------------------------------------------------------------------------
1043           */
1044          U32_T GCONFIG_GetNetmask(void)
1045          {
1046   1              return gconfig_ConfigData.Netmask;
1047   1      } /* End of GCONFIG_GetNetmask() */
1048          
1049          /*
1050           * ----------------------------------------------------------------------------
1051           * Function Name: GCONFIG_GetGateway
1052           * Purpose: 
1053           * Params:
1054           * Returns:
1055           * Note:
1056           * ----------------------------------------------------------------------------
1057           */
1058          U32_T GCONFIG_GetGateway(void)
1059          {
1060   1              return gconfig_ConfigData.Gateway;
1061   1      } /* End of GCONFIG_GetGateway() */
1062          
1063          /*
1064           * ----------------------------------------------------------------------------
1065           * Function Name: GCONFIG_GetDNS
1066           * Purpose: 
1067           * Params:
1068           * Returns:
1069           * Note:
1070           * ----------------------------------------------------------------------------
1071           */
1072          U32_T GCONFIG_GetDNS(void)
1073          {
1074   1              return gconfig_ConfigData.Dns;
1075   1      } /* End of GCONFIG_GetDNS() */
1076          
1077          /*
1078           * ----------------------------------------------------------------------------
1079           * Function Name: GCONFIG_GetSerialPort
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 19  

1080           * Purpose: 
1081           * Params:
1082           * Returns:
1083           * Note:
1084           * ----------------------------------------------------------------------------
1085           */
1086          U16_T GCONFIG_GetSerialPort(void)
1087          {
1088   1              return gconfig_ConfigData.SerialPort;
1089   1      } /* End of GCONFIG_GetSerialPort() */
1090          
1091          /*
1092           * ----------------------------------------------------------------------------
1093           * Function Name: GCONFIG_GetEthernetTxTimer
1094           * Purpose: 
1095           * Params:
1096           * Returns:
1097           * Note:
1098           * ----------------------------------------------------------------------------
1099           */
1100          U16_T GCONFIG_GetEthernetTxTimer(void)
1101          {
1102   1              return gconfig_ConfigData.EthernetTxTimer;
1103   1      } /* End of GCONFIG_GetEthernetTxTimer() */
1104          
1105          /*
1106           * ----------------------------------------------------------------------------
1107           * Function Name: GCONFIG_GetUdpAutoConnectClientIp
1108           * Purpose: 
1109           * Params:
1110           * Returns:
1111           * Note:
1112           * ----------------------------------------------------------------------------
1113           */
1114          U32_T GCONFIG_GetUdpAutoConnectClientIp(void)
1115          {
1116   1              return gconfig_ConfigData.UdpAutoConnectClientIp;
1117   1      } /* End of GCONFIG_GetUdpAutoConnectClientIp() */
1118          
1119          /*
1120           * ----------------------------------------------------------------------------
1121           * Function Name: GCONFIG_GetUdpAutoConnectClientPort
1122           * Purpose: 
1123           * Params:
1124           * Returns:
1125           * Note:
1126           * ----------------------------------------------------------------------------
1127           */
1128          U16_T GCONFIG_GetUdpAutoConnectClientPort(void)
1129          {
1130   1              return gconfig_ConfigData.UdpAutoConnectClientPort;
1131   1      } /* End of GCONFIG_GetUdpAutoConnectClientPort() */
1132          
1133          /*
1134           * ----------------------------------------------------------------------------
1135           * Function Name: GCONFIG_GetBaudRate
1136           * Purpose: 
1137           * Params:
1138           * Returns:
1139           * Note:
1140           * ----------------------------------------------------------------------------
1141           */
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 20  

1142          U16_T GCONFIG_GetBaudRate(U8_T index)
1143          {
1144   1              U16_T baudRate = 0;
1145   1      
1146   1              switch(gconfig_SysClock)
1147   1              {
1148   2                      case SCS_80M:
1149   2                              if          (index == 0) baudRate = HS_BR80M_921600;
1150   2                              else if (index == 1) baudRate = HS_BR80M_115200;
1151   2                              else if (index == 2) baudRate = HS_BR80M_57600;
1152   2                              else if (index == 3) baudRate = HS_BR80M_38400;
1153   2                              else if (index == 4) baudRate = HS_BR80M_19200;
1154   2                              else if (index == 5) baudRate = HS_BR80M_9600;
1155   2                              else if (index == 6) baudRate = HS_BR80M_4800;
1156   2                              else if (index == 7) baudRate = HS_BR80M_2400;
1157   2                              else if (index == 8) baudRate = HS_BR80M_1200;
1158   2                              break;
1159   2                      case SCS_40M:
1160   2                              if          (index == 0) baudRate = HS_BR40M_921600;
1161   2                              else if (index == 1) baudRate = HS_BR40M_115200;
1162   2                              else if (index == 2) baudRate = HS_BR40M_57600;
1163   2                              else if (index == 3) baudRate = HS_BR40M_38400;
1164   2                              else if (index == 4) baudRate = HS_BR40M_19200;
1165   2                              else if (index == 5) baudRate = HS_BR40M_9600;
1166   2                              else if (index == 6) baudRate = HS_BR40M_4800;
1167   2                              else if (index == 7) baudRate = HS_BR40M_2400;
1168   2                              else if (index == 8) baudRate = HS_BR40M_1200;
1169   2                              break;
1170   2                      default:
1171   2                              printd("Unknown system clock rate!\n\r");
1172   2                              break;
1173   2              }
1174   1              
1175   1              return baudRate;
1176   1      } /* End of GCONFIG_GetBaudRate() */
1177          
1178          /*
1179           * ----------------------------------------------------------------------------
1180           * Function Name: GCONFIG_GetAdmin
1181           * Purpose: 
1182           * Params:
1183           * Returns:
1184           * Note:
1185           * ----------------------------------------------------------------------------
1186           */
1187          S16_T GCONFIG_GetAdmin(U8_T *username, U8_T *passwd, U8_T *level)
1188          {
1189   1          if (!username || !passwd)
1190   1              return -1;
1191   1      
1192   1          memcpy(username, gconfig_ConfigData.Admin.Username, 16);
1193   1          memcpy(passwd, gconfig_ConfigData.Admin.Passwd, 16);
1194   1          *level = gconfig_ConfigData.Admin.Level;
1195   1      
1196   1          return 1;
1197   1      } /* End of GCONFIG_GetAdmin() */
1198          
1199          /*
1200           * ----------------------------------------------------------------------------
1201           * Function Name: GCONFIG_SetAdmin
1202           * Purpose: 
1203           * Params:
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 21  

1204           * Returns:
1205           * Note:
1206           * ----------------------------------------------------------------------------
1207           */
1208          S16_T GCONFIG_SetAdmin(U8_T *username, U8_T *passwd)
1209          {
1210   1          if (!username || !passwd)
1211   1              return -1;
1212   1      
1213   1          memcpy(gconfig_ConfigData.Admin.Username, username, 16);
1214   1          memcpy(gconfig_ConfigData.Admin.Passwd, passwd, 16);
1215   1      
1216   1          return 1;
1217   1      } /* End of GCONFIG_SetAdmin() */
1218          
1219          
1220          /*
1221           * ----------------------------------------------------------------------------
1222           * Function Name: GCONFIG_SetRs485Mode
1223           * Purpose: 
1224           * Params:
1225           * Returns:
1226           * Note:
1227           * ----------------------------------------------------------------------------
1228           */
1229          void GCONFIG_SetRs485Mode(U8_T mode)
1230          {
1231   1              gconfig_ConfigData.Rs485Mode = mode;
1232   1      } /* GCONFIG_SetAutoWarning() */
1233          /*
1234           * ----------------------------------------------------------------------------
1235           * Function Name: GCONFIG_GetRs485Mode
1236           * Purpose: 
1237           * Params:
1238           * Returns:
1239           * Note:
1240           * ----------------------------------------------------------------------------
1241           */
1242          U8_T GCONFIG_GetRs485Mode(void)
1243          {
1244   1              return gconfig_ConfigData.Rs485Mode;
1245   1      } /* GCONFIG_GetRs485Mode() */
1246          
1247          /*
1248           * ----------------------------------------------------------------------------
1249           * Function Name: GCONFIG_SetDestHostName
1250           * Purpose: 
1251           * Params:
1252           * Returns:
1253           * Note:
1254           * ----------------------------------------------------------------------------
1255           */
1256          void GCONFIG_SetDestHostName(U8_T *pIn, U8_T len)
1257          {
1258   1          if (len > (sizeof(gconfig_ConfigData.DestHostName)-1))
1259   1              len = sizeof(gconfig_ConfigData.DestHostName) - 1;
1260   1      
1261   1          memcpy(gconfig_ConfigData.DestHostName, pIn, len);
1262   1          gconfig_ConfigData.DestHostName[len] = '\0';
1263   1      
1264   1      } /* End of GCONFIG_SetDestHostName() */
1265          
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 22  

1266          /*
1267           * ----------------------------------------------------------------------------
1268           * Function Name: GCONFIG_GetDestHostName
1269           * Purpose: 
1270           * Params:
1271           * Returns:
1272           * Note:
1273           * ----------------------------------------------------------------------------
1274           */
1275          U8_T GCONFIG_GetDestHostName(U8_T *pOut)
1276          {
1277   1          gconfig_ConfigData.DestHostName[sizeof(gconfig_ConfigData.DestHostName) - 1] = '\0';
1278   1          strcpy(pOut, gconfig_ConfigData.DestHostName);
1279   1      
1280   1              return strlen(gconfig_ConfigData.DestHostName);
1281   1      } /* End of GCONFIG_GetDestHostName() */
1282          
1283          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
1284          /*
1285           * ----------------------------------------------------------------------------
1286           * Function Name: GCONFIG_GetSsid
1287           * Purpose: 
1288           * Params:
1289           * Returns:
1290           * Note:
1291           * ----------------------------------------------------------------------------
1292           */
1293          U8_T GCONFIG_GetSsid(U8_T *pOut)
1294          {
1295   1          if (!pOut)
1296   1              return 0;
1297   1      
1298   1          memcpy(pOut, gconfig_ConfigData.WifiConfig.WifiSsid, gconfig_ConfigData.WifiConfig.WifiSsidLen);
1299   1      
1300   1              return gconfig_ConfigData.WifiConfig.WifiSsidLen;
1301   1      } /* End of GCONFIG_GetSsid() */
1302          
1303          /*
1304           * ----------------------------------------------------------------------------
1305           * Function Name: GCONFIG_SetSsid
1306           * Purpose: 
1307           * Params:
1308           * Returns:
1309           * Note:
1310           * ----------------------------------------------------------------------------
1311           */
1312          void GCONFIG_SetSsid(U8_T *pIn, U8_T len)
1313          {
1314   1          if (len > (sizeof(gconfig_ConfigData.WifiConfig.WifiSsid)-1))
1315   1              len = sizeof(gconfig_ConfigData.WifiConfig.WifiSsid)-1;
1316   1      
1317   1          memcpy(gconfig_ConfigData.WifiConfig.WifiSsid, pIn, len);
1318   1          gconfig_ConfigData.WifiConfig.WifiSsid[len] = '\0';
1319   1          gconfig_ConfigData.WifiConfig.WifiSsidLen = len;
1320   1      
1321   1      } /* End of GCONFIG_SetSsid() */
1322          
1323          /*
1324           * ----------------------------------------------------------------------------
1325           * Function Name: GCONFIG_GetChannel
1326           * Purpose: 
1327           * Params:
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 23  

1328           * Returns:
1329           * Note:
1330           * ----------------------------------------------------------------------------
1331           */
1332          U8_T GCONFIG_GetChannel(void)
1333          {
1334   1              return gconfig_ConfigData.WifiConfig.WifiChannel;
1335   1      } /* End of GCONFIG_GetChannel() */
1336          
1337          /*
1338           * ----------------------------------------------------------------------------
1339           * Function Name: GCONFIG_SetChannel
1340           * Purpose: 
1341           * Params:
1342           * Returns:
1343           * Note:
1344           * ----------------------------------------------------------------------------
1345           */
1346          void GCONFIG_SetChannel(U8_T channel)
1347          {
1348   1          if (channel > 20)
1349   1              return;
1350   1      
1351   1          gconfig_ConfigData.WifiConfig.WifiChannel = channel;
1352   1      } /* End of GCONFIG_SetChannel() */
1353          
1354          /*
1355           * ----------------------------------------------------------------------------
1356           * Function Name: GCONFIG_GetWifiBasebandMode
1357           * Purpose: 
1358           * Params:
1359           * Returns:
1360           * Note:
1361           * ----------------------------------------------------------------------------
1362           */
1363          U8_T GCONFIG_GetWifiBasebandMode(void)
1364          {
1365   1              return gconfig_ConfigData.WifiConfig.WifiBasebandMode;
1366   1      } /* End of GCONFIG_GetWifiBasebandMode() */
1367          
1368          /*
1369           * ----------------------------------------------------------------------------
1370           * Function Name: GCONFIG_SetWifiBasebandMode
1371           * Purpose: 
1372           * Params:
1373           * Returns:
1374           * Note:
1375           * ----------------------------------------------------------------------------
1376           */
1377          U8_T GCONFIG_SetWifiBasebandMode(U8_T value)
1378          {
1379   1          if (value != 1 && value != 2)
1380   1              return 0;
1381   1      
1382   1          gconfig_ConfigData.WifiConfig.WifiBasebandMode = value;
1383   1          return 1;
1384   1      } /* End of GCONFIG_SetWifiBasebandMode() */
1385          
1386          /*
1387           * ----------------------------------------------------------------------------
1388           * Function Name: GCONFIG_GetWifiNetworkMode
1389           * Purpose: 
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 24  

1390           * Params:
1391           * Returns:
1392           * Note:
1393           * ----------------------------------------------------------------------------
1394           */
1395          U8_T GCONFIG_GetWifiNetworkMode(void)
1396          {
1397   1              return gconfig_ConfigData.WifiConfig.WifiNetworkMode;
1398   1      } /* End of GCONFIG_GetWifiNetworkMode() */
1399          
1400          /*
1401           * ----------------------------------------------------------------------------
1402           * Function Name: GCONFIG_SetWifiNetworkMode
1403           * Purpose: 
1404           * Params:
1405           * Returns:
1406           * Note:
1407           * ----------------------------------------------------------------------------
1408           */
1409          void GCONFIG_SetWifiNetworkMode(U8_T value)
1410          {
1411   1          if (value > 1)
1412   1              return;
1413   1      
1414   1          gconfig_ConfigData.WifiConfig.WifiNetworkMode = value;
1415   1      } /* End of GCONFIG_SetWifiNetworkMode() */
1416          
1417          /*
1418           * ----------------------------------------------------------------------------
1419           * Function Name: GCONFIG_GetWifiTxRate
1420           * Purpose: 
1421           * Params:
1422           * Returns:
1423           * Note:
1424           * ----------------------------------------------------------------------------
1425           */
1426          U8_T GCONFIG_GetWifiTxRate(void)
1427          {
1428   1              return gconfig_ConfigData.WifiConfig.WifiTxRate;
1429   1      } /* End of GCONFIG_GetWifiTxRate() */
1430          
1431          /*
1432           * ----------------------------------------------------------------------------
1433           * Function Name: GCONFIG_SetWifiTxRate
1434           * Purpose: 
1435           * Params:
1436           * Returns:
1437           * Note:
1438           * ----------------------------------------------------------------------------
1439           */
1440          void GCONFIG_SetWifiTxRate(U8_T value)
1441          {
1442   1          gconfig_ConfigData.WifiConfig.WifiTxRate = value;
1443   1      } /* End of GCONFIG_SetWifiTxRate() */
1444          
1445          /*
1446           * ----------------------------------------------------------------------------
1447           * Function Name: GCONFIG_GetWifiTxPowerLevel
1448           * Purpose: 
1449           * Params:
1450           * Returns:
1451           * Note:
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 25  

1452           * ----------------------------------------------------------------------------
1453           */
1454          U8_T GCONFIG_GetWifiTxPowerLevel(void)
1455          {
1456   1              return gconfig_ConfigData.WifiConfig.WifiTxPowerLevel;
1457   1      } /* End of GCONFIG_GetWifiTxPowerLevel() */
1458          
1459          /*
1460           * ----------------------------------------------------------------------------
1461           * Function Name: GCONFIG_SetWifiTxPowerLevel
1462           * Purpose: 
1463           * Params:
1464           * Returns:
1465           * Note:
1466           * ----------------------------------------------------------------------------
1467           */
1468          void GCONFIG_SetWifiTxPowerLevel(U8_T value)
1469          {
1470   1          gconfig_ConfigData.WifiConfig.WifiTxPowerLevel = value;
1471   1      } /* End of GCONFIG_SetWifiTxPowerLevel() */
1472          
1473          /*
1474           * ----------------------------------------------------------------------------
1475           * Function Name: GCONFIG_GetWifiPreambleMode
1476           * Purpose: 
1477           * Params:
1478           * Returns:
1479           * Note:
1480           * ----------------------------------------------------------------------------
1481           */
1482          U8_T GCONFIG_GetWifiPreambleMode(void)
1483          {
1484   1              return gconfig_ConfigData.WifiConfig.WifiPreambleMode;
1485   1      } /* End of GCONFIG_GetWifiPreambleMode() */
1486          
1487          /*
1488           * ----------------------------------------------------------------------------
1489           * Function Name: GCONFIG_SetWifiPreambleMode
1490           * Purpose: 
1491           * Params:
1492           * Returns:
1493           * Note:
1494           * ----------------------------------------------------------------------------
1495           */
1496          U8_T GCONFIG_SetWifiPreambleMode(U8_T value)
1497          {
1498   1          if (value > 2)
1499   1              return 0;
1500   1      
1501   1          gconfig_ConfigData.WifiConfig.WifiPreambleMode = value;
1502   1          return 1;
1503   1      } /* End of GCONFIG_SetWifiPreambleMode() */
1504          
1505          /*
1506           * ----------------------------------------------------------------------------
1507           * Function Name: GCONFIG_GetWifiBcnInterval
1508           * Purpose: 
1509           * Params:
1510           * Returns:
1511           * Note:
1512           * ----------------------------------------------------------------------------
1513           */
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 26  

1514          U16_T GCONFIG_GetWifiBcnInterval(void)
1515          {
1516   1              return gconfig_ConfigData.WifiConfig.WifiBcnInterval;
1517   1      } /* End of GCONFIG_GetWifiBcnInterval() */
1518          
1519          /*
1520           * ----------------------------------------------------------------------------
1521           * Function Name: GCONFIG_SetWifiBcnInterval
1522           * Purpose: 
1523           * Params:
1524           * Returns:
1525           * Note:
1526           * ----------------------------------------------------------------------------
1527           */
1528          void GCONFIG_SetWifiBcnInterval(U16_T value)
1529          {
1530   1          gconfig_ConfigData.WifiConfig.WifiBcnInterval = value;
1531   1      } /* End of GCONFIG_SetWifiBcnInterval() */
1532          
1533          /*
1534           * ----------------------------------------------------------------------------
1535           * Function Name: GCONFIG_GetWifiRtsThreshold
1536           * Purpose: 
1537           * Params:
1538           * Returns:
1539           * Note:
1540           * ----------------------------------------------------------------------------
1541           */
1542          U16_T GCONFIG_GetWifiRtsThreshold(void)
1543          {
1544   1              return gconfig_ConfigData.WifiConfig.WifiRtsThreshold;
1545   1      } /* End of GCONFIG_GetWifiRtsThreshold() */
1546          
1547          /*
1548           * ----------------------------------------------------------------------------
1549           * Function Name: GCONFIG_SetWifiRtsThreshold
1550           * Purpose: 
1551           * Params:
1552           * Returns:
1553           * Note:
1554           * ----------------------------------------------------------------------------
1555           */
1556          void GCONFIG_SetWifiRtsThreshold(U16_T value)
1557          {
1558   1          gconfig_ConfigData.WifiConfig.WifiRtsThreshold = value;
1559   1      } /* End of GCONFIG_SetWifiRtsThreshold() */
1560          
1561          /*
1562           * ----------------------------------------------------------------------------
1563           * Function Name: GCONFIG_GetWifiAutoPowerCtrl
1564           * Purpose: 
1565           * Params:
1566           * Returns:
1567           * Note:
1568           * ----------------------------------------------------------------------------
1569           */
1570          U8_T GCONFIG_GetWifiAutoPowerCtrl(void)
1571          {
1572   1              return gconfig_ConfigData.WifiConfig.WifiAutoPowerCtrl;
1573   1      } /* End of GCONFIG_GetWifiAutoPowerCtrl() */
1574          
1575          /*
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 27  

1576           * ----------------------------------------------------------------------------
1577           * Function Name: GCONFIG_SetWifiAutoPowerCtrl
1578           * Purpose: 
1579           * Params:
1580           * Returns:
1581           * Note:
1582           * ----------------------------------------------------------------------------
1583           */
1584          void GCONFIG_SetWifiAutoPowerCtrl(U8_T value)
1585          {
1586   1          gconfig_ConfigData.WifiConfig.WifiAutoPowerCtrl = value ? 1:0;
1587   1      } /* End of GCONFIG_SetWifiAutoPowerCtrl() */
1588          
1589          /*
1590           * ----------------------------------------------------------------------------
1591           * Function Name: GCONFIG_GetWifiEncryptMode
1592           * Purpose: 
1593           * Params:
1594           * Returns:
1595           * Note:
1596           * ----------------------------------------------------------------------------
1597           */
1598          U8_T GCONFIG_GetWifiEncryptMode(void)
1599          {
1600   1              return gconfig_ConfigData.WifiConfig.WifiEncryptMode;
1601   1      } /* End of GCONFIG_GetWifiEncryptMode() */
1602          
1603          /*
1604           * ----------------------------------------------------------------------------
1605           * Function Name: GCONFIG_SetWifiEncryptMode
1606           * Purpose: 
1607           * Params:
1608           * Returns:
1609           * Note:
1610           * ----------------------------------------------------------------------------
1611           */
1612          U8_T GCONFIG_SetWifiEncryptMode(U8_T value)
1613          {
1614   1          if (value > 4)
1615   1              return 0;
1616   1      
1617   1          if (value == 1)
1618   1              gconfig_ConfigData.WifiConfig.WifiWepKeyLength = 0;
1619   1          else if (value == 2)
1620   1              gconfig_ConfigData.WifiConfig.WifiWepKeyLength = 1;
1621   1      
1622   1          gconfig_ConfigData.WifiConfig.WifiEncryptMode = value;
1623   1          return 1;
1624   1      } /* End of GCONFIG_SetWifiEncryptMode() */
1625          
1626          /*
1627           * ----------------------------------------------------------------------------
1628           * Function Name: GCONFIG_GetWifiWepKeyIndex
1629           * Purpose: 
1630           * Params:
1631           * Returns:
1632           * Note:
1633           * ----------------------------------------------------------------------------
1634           */
1635          U8_T GCONFIG_GetWifiWepKeyIndex(void)
1636          {
1637   1              return gconfig_ConfigData.WifiConfig.WifiWepKeyIndex;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 28  

1638   1      } /* End of GCONFIG_GetWifiWepKeyIndex() */
1639          
1640          /*
1641           * ----------------------------------------------------------------------------
1642           * Function Name: GCONFIG_SetWifiWepKeyIndex
1643           * Purpose: 
1644           * Params:
1645           * Returns:
1646           * Note:
1647           * ----------------------------------------------------------------------------
1648           */
1649          U8_T GCONFIG_SetWifiWepKeyIndex(U8_T value)
1650          {
1651   1          if (value > 3)
1652   1              return 0;
1653   1      
1654   1          gconfig_ConfigData.WifiConfig.WifiWepKeyIndex = value;
1655   1          return 1;
1656   1      } /* End of GCONFIG_SetWifiWepKeyIndex() */
1657          
1658          /*
1659           * ----------------------------------------------------------------------------
1660           * Function Name: GCONFIG_GetWifiWepKeyLength
1661           * Purpose: 
1662           * Params:
1663           * Returns:
1664           * Note:
1665           * ----------------------------------------------------------------------------
1666           */
1667          U8_T GCONFIG_GetWifiWepKeyLength(void)
1668          {
1669   1              return gconfig_ConfigData.WifiConfig.WifiWepKeyLength;
1670   1      } /* End of GCONFIG_GetWifiWepKeyLength() */
1671          
1672          /*
1673           * ----------------------------------------------------------------------------
1674           * Function Name: GCONFIG_SetWifiWepKeyLength
1675           * Purpose: 
1676           * Params:
1677           * Returns:
1678           * Note:
1679           * ----------------------------------------------------------------------------
1680           */
1681          void GCONFIG_SetWifiWepKeyLength(U8_T value)
1682          {
1683   1          gconfig_ConfigData.WifiConfig.WifiWepKeyLength = value ? 1:0;
1684   1      } /* End of GCONFIG_SetWifiWepKeyLength() */
1685          
1686          /*
1687           * ----------------------------------------------------------------------------
1688           * Function Name: GCONFIG_GetWifiWep64Key
1689           * Purpose: 
1690           * Params:
1691           * Returns:
1692           * Note:
1693           * ----------------------------------------------------------------------------
1694           */
1695          U8_T GCONFIG_GetWifiWep64Key(U8_T index, U8_T *pBuf)
1696          {
1697   1          if (!pBuf)
1698   1              return 0;
1699   1          else if (index > 3)
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 29  

1700   1                      index = 0;
1701   1      
1702   1          memcpy(pBuf, gconfig_ConfigData.WifiConfig.WifiWep64Key[index], 5);
1703   1          return 5;
1704   1      } /* End of GCONFIG_GetWifiWep64Key() */
1705          
1706          /*
1707           * ----------------------------------------------------------------------------
1708           * Function Name: GCONFIG_SetWifiWep64Key
1709           * Purpose: 
1710           * Params:
1711           * Returns:
1712           * Note:
1713           * ----------------------------------------------------------------------------
1714           */
1715          void GCONFIG_SetWifiWep64Key(U8_T index, U8_T *pBuf)
1716          {
1717   1              if (index > 3)
1718   1              return;
1719   1                      
1720   1              memcpy(gconfig_ConfigData.WifiConfig.WifiWep64Key[index], pBuf, 5);
1721   1      } /* End of GCONFIG_SetWifiWep64Key() */
1722          
1723          /*
1724           * ----------------------------------------------------------------------------
1725           * Function Name: GCONFIG_GetWifiWep128Key
1726           * Purpose: 
1727           * Params:
1728           * Returns:
1729           * Note:
1730           * ----------------------------------------------------------------------------
1731           */
1732          U8_T GCONFIG_GetWifiWep128Key(U8_T index, U8_T *pBuf)
1733          {
1734   1          if (!pBuf)
1735   1              return 0;
1736   1          else if (index > 3)
1737   1                      index = 0;
1738   1      
1739   1          memcpy(pBuf, gconfig_ConfigData.WifiConfig.WifiWep128Key[index], 13);
1740   1          return 13;
1741   1      } /* End of GCONFIG_GetWifiWep128Key() */
1742          
1743          /*
1744           * ----------------------------------------------------------------------------
1745           * Function Name: GCONFIG_SetWifiWep128Key
1746           * Purpose: 
1747           * Params:
1748           * Returns:
1749           * Note:
1750           * ----------------------------------------------------------------------------
1751           */
1752          void GCONFIG_SetWifiWep128Key(U8_T index, U8_T *pBuf)
1753          {
1754   1              if (index > 3)
1755   1              return;
1756   1      
1757   1              memcpy(gconfig_ConfigData.WifiConfig.WifiWep128Key[index], pBuf, 13);   
1758   1      } /* End of GCONFIG_SetWifiWep128Key() */
1759          
1760          /*
1761           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 30  

1762           * Function Name: GCONFIG_GetWifiPreShareKey
1763           * Purpose: 
1764           * Params:
1765           * Returns:
1766           * Note:
1767           * ----------------------------------------------------------------------------
1768           */
1769          U8_T GCONFIG_GetWifiPreShareKey(U8_T *pBuf)
1770          {
1771   1          memcpy(pBuf, gconfig_ConfigData.WifiConfig.WifiPreShareKey, gconfig_ConfigData.WifiConfig.WifiPreShare
             -KeyLen);
1772   1      
1773   1              return gconfig_ConfigData.WifiConfig.WifiPreShareKeyLen;
1774   1      } /* End of GCONFIG_GetWifiPreShareKey() */
1775          
1776          /*
1777           * ----------------------------------------------------------------------------
1778           * Function Name: GCONFIG_SetWifiPreShareKey
1779           * Purpose: 
1780           * Params:
1781           * Returns:
1782           * Note:
1783           * ----------------------------------------------------------------------------
1784           */
1785          void GCONFIG_SetWifiPreShareKey(U8_T *pBuf, U8_T len)
1786          {
1787   1              if (len > sizeof(gconfig_ConfigData.WifiConfig.WifiPreShareKey))
1788   1                      len = sizeof(gconfig_ConfigData.WifiConfig.WifiPreShareKey);
1789   1              
1790   1              memcpy(gconfig_ConfigData.WifiConfig.WifiPreShareKey, pBuf, len);
1791   1              gconfig_ConfigData.WifiConfig.WifiPreShareKeyLen = len;
1792   1                      
1793   1      } /* End of GCONFIG_SetWifiPreShareKey() */
1794          
1795          /*
1796           * ----------------------------------------------------------------------------
1797           * Function Name: GCONFIG_GetProtectionFrameType
1798           * Purpose: 
1799           * Params:
1800           * Returns:
1801           * Note:
1802           * ----------------------------------------------------------------------------
1803           */
1804          U8_T GCONFIG_GetProtectionFrameType(void)
1805          {
1806   1              return gconfig_ConfigData.WifiConfig.WifiProtectFrame;
1807   1      } /* End of GCONFIG_GetProtectionFrameType() */
1808          
1809          /*
1810           * ----------------------------------------------------------------------------
1811           * Function Name: GCONFIG_SetProtectionFrameType
1812           * Purpose: 
1813           * Params:
1814           * Returns:
1815           * Note:
1816           * ----------------------------------------------------------------------------
1817           */
1818          void GCONFIG_SetProtectionFrameType(U8_T value)
1819          {
1820   1          if (value > 1)
1821   1              return;
1822   1      
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 31  

1823   1              gconfig_ConfigData.WifiConfig.WifiProtectFrame = value;
1824   1                      
1825   1      } /* End of GCONFIG_SetProtectionFrameType() */
1826          #endif
1827          
1828          /*
1829           * ----------------------------------------------------------------------------
1830           * Function Name: GCONFIG_GetDhcpSrvStartIp
1831           * Purpose: 
1832           * Params:
1833           * Returns:
1834           * Note:
1835           * ----------------------------------------------------------------------------
1836           */
1837          U32_T GCONFIG_GetDhcpSrvStartIp(void)
1838          {
1839   1              return gconfig_ConfigData.DhcpSrv.IpPoolAddrStart;
1840   1      } /* End of GCONFIG_GetDhcpSrvStartIp() */
1841          
1842          /*
1843           * ----------------------------------------------------------------------------
1844           * Function Name: GCONFIG_SetDhcpSrvStartIp
1845           * Purpose: 
1846           * Params:
1847           * Returns:
1848           * Note:
1849           * ----------------------------------------------------------------------------
1850           */
1851          void GCONFIG_SetDhcpSrvStartIp(U32_T startIp)
1852          {
1853   1              gconfig_ConfigData.DhcpSrv.IpPoolAddrStart = startIp;
1854   1      } /* End of GCONFIG_SetDhcpSrvStartIp() */
1855          
1856          /*
1857           * ----------------------------------------------------------------------------
1858           * Function Name: GCONFIG_GetDhcpSrvEndIp
1859           * Purpose: 
1860           * Params:
1861           * Returns:
1862           * Note:
1863           * ----------------------------------------------------------------------------
1864           */
1865          U32_T GCONFIG_GetDhcpSrvEndIp(void)
1866          {
1867   1              return gconfig_ConfigData.DhcpSrv.IpPoolAddrEnd;
1868   1      } /* End of GCONFIG_GetDhcpSrvEndIp() */
1869          
1870          /*
1871           * ----------------------------------------------------------------------------
1872           * Function Name: GCONFIG_SetDhcpSrvEndIp
1873           * Purpose: 
1874           * Params:
1875           * Returns:
1876           * Note:
1877           * ----------------------------------------------------------------------------
1878           */
1879          void GCONFIG_SetDhcpSrvEndIp(U32_T endIp)
1880          {
1881   1              gconfig_ConfigData.DhcpSrv.IpPoolAddrEnd = endIp;
1882   1      } /* End of GCONFIG_SetDhcpSrvEndIp() */
1883          
1884          /*
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 32  

1885           * ----------------------------------------------------------------------------
1886           * Function Name: GCONFIG_GetDhcpSrvNetmask
1887           * Purpose: 
1888           * Params:
1889           * Returns:
1890           * Note:
1891           * ----------------------------------------------------------------------------
1892           */
1893          U32_T GCONFIG_GetDhcpSrvNetmask(void)
1894          {
1895   1              return gconfig_ConfigData.DhcpSrv.Netmask;
1896   1      } /* End of GCONFIG_GetDhcpSrvNetmask() */
1897          
1898          /*
1899           * ----------------------------------------------------------------------------
1900           * Function Name: GCONFIG_SetDhcpSrvNetmask
1901           * Purpose: 
1902           * Params:
1903           * Returns:
1904           * Note:
1905           * ----------------------------------------------------------------------------
1906           */
1907          void GCONFIG_SetDhcpSrvNetmask(U32_T mask)
1908          {
1909   1              gconfig_ConfigData.DhcpSrv.Netmask = mask;
1910   1      } /* End of GCONFIG_SetDhcpSrvNetmask() */
1911          
1912          /*
1913           * ----------------------------------------------------------------------------
1914           * Function Name: GCONFIG_GetDhcpSrvDefGateway
1915           * Purpose: 
1916           * Params:
1917           * Returns:
1918           * Note:
1919           * ----------------------------------------------------------------------------
1920           */
1921          U32_T GCONFIG_GetDhcpSrvDefGateway(void)
1922          {
1923   1              return gconfig_ConfigData.DhcpSrv.DefaultGateway;
1924   1      } /* End of GCONFIG_GetDhcpSrvDefGateway() */
1925          
1926          /*
1927           * ----------------------------------------------------------------------------
1928           * Function Name: GCONFIG_SetDhcpSrvDefGateway
1929           * Purpose: 
1930           * Params:
1931           * Returns:
1932           * Note:
1933           * ----------------------------------------------------------------------------
1934           */
1935          void GCONFIG_SetDhcpSrvDefGateway(U32_T gateway)
1936          {
1937   1              gconfig_ConfigData.DhcpSrv.DefaultGateway = gateway;
1938   1      } /* End of GCONFIG_SetDhcpSrvDefGateway() */
1939          
1940          /*
1941           * ----------------------------------------------------------------------------
1942           * Function Name: GCONFIG_GetDhcpSrvStatus
1943           * Purpose: 
1944           * Params:
1945           * Returns:
1946           * Note:
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 33  

1947           * ----------------------------------------------------------------------------
1948           */
1949          U8_T GCONFIG_GetDhcpSrvStatus(void)
1950          {
1951   1              return gconfig_ConfigData.DhcpSrv.Status;
1952   1      } /* End of GCONFIG_GetDhcpSrvStatus() */
1953          
1954          /*
1955           * ----------------------------------------------------------------------------
1956           * Function Name: GCONFIG_SetDhcpSrvStatus
1957           * Purpose: 
1958           * Params:
1959           * Returns:
1960           * Note:
1961           * ----------------------------------------------------------------------------
1962           */
1963          void GCONFIG_SetDhcpSrvStatus(U8_T status)
1964          {
1965   1          if (status > 1)
1966   1              return;
1967   1      
1968   1              gconfig_ConfigData.DhcpSrv.Status = status;
1969   1      } /* End of GCONFIG_SetDhcpSrvStatus() */
1970          
1971          /*
1972           * ----------------------------------------------------------------------------
1973           * Function Name: GCONFIG_GetDhcpSrvLeaseTime
1974           * Purpose: 
1975           * Params:
1976           * Returns:
1977           * Note:
1978           * ----------------------------------------------------------------------------
1979           */
1980          U16_T GCONFIG_GetDhcpSrvLeaseTime(void)
1981          {
1982   1              return gconfig_ConfigData.DhcpSrv.LeaseTime;
1983   1      } /* End of GCONFIG_GetDhcpSrvLeaseTime() */
1984          
1985          /*
1986           * ----------------------------------------------------------------------------
1987           * Function Name: GCONFIG_SetDhcpSrvLeaseTime
1988           * Purpose: 
1989           * Params:
1990           * Returns:
1991           * Note:
1992           * ----------------------------------------------------------------------------
1993           */
1994          void GCONFIG_SetDhcpSrvLeaseTime(U16_T lease)
1995          {
1996   1              gconfig_ConfigData.DhcpSrv.LeaseTime = lease;
1997   1      } /* End of GCONFIG_SetDhcpSrvLeaseTime() */
1998          
1999          /////////////////////////////////////////////////////////////////////////////////
2000          
2001          /*
2002           * ----------------------------------------------------------------------------
2003           * Function Name: gconfig_ReStoreParameter
2004           * Purpose: 
2005           * Params:
2006           * Returns:
2007           * Note:
2008           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 34  

2009           */
2010          static BOOL gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len)
2011          {
2012   1              U16_T   i;
2013   1              U8_T    *pParaBaseByte;
2014   1              U8_T    paraCheckSum = 0;
2015   1              U8_T    lastWtst = 0;
2016   1      
2017   1              pParaBaseByte = (U8_T *)pConfig;
2018   1      
2019   1              lastWtst = WTST;
2020   1              WTST = PROG_WTST_7;
2021   1              if (CSREPR & PMS) // SRAM shadow
2022   1              {
2023   2                      CSREPR |= FAES;
2024   2                      for (i = 0 ; i < len ; i++)
2025   2                      {
2026   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
2027   3                      }
2028   2                      CSREPR &= ~FAES;
2029   2              }
2030   1              else
2031   1              {
2032   2                      CSREPR &= ~FAES;
2033   2                      for (i = 0 ; i < len ; i++)
2034   2                      {
2035   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
2036   3                      }
2037   2              }
2038   1              WTST = lastWtst;
2039   1      
2040   1          if (0xffff != gconfig_Checksum((U16_T *)pConfig, len))
2041   1          {
2042   2              printd(" failed! (wrong checksum)\n\r");
2043   2                      return FALSE;
2044   2          }
2045   1          else if (pConfig->SwCfgLength != len)
2046   1          {
2047   2              printd(" Invalid configuration data!\n\r");
2048   2                      return FALSE;
2049   2          }
2050   1              printd(" ok.\n\r");
2051   1              gconfig_DisplayConfigData(pConfig);
2052   1              return TRUE;
2053   1      
2054   1      } /* End of gconfig_ReStoreParameter() */
2055          
2056          /*
2057           * ----------------------------------------------------------------------------
2058           * Function Name: gconfig_StoreParameter
2059           * Purpose: 
2060           * Params:
2061           * Returns:
2062           * Note:
2063           * ----------------------------------------------------------------------------
2064           */
2065          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pConfigData, U16_T len)
2066          {
2067   1              U8_T                    ret = FALSE;
2068   1              pFlashParaData  ptrFlashWrite = (void code *)0x003E00;
2069   1      
2070   1          pConfigData->Checksum = 0;
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 35  

2071   1          pConfigData->SwCfgLength = len;
2072   1          pConfigData->Checksum = ~gconfig_Checksum((U16_T *)pConfigData, len);
2073   1          
2074   1              ret = (*ptrFlashWrite)((U8_T *)pConfigData, len);       
2075   1      
2076   1              if (ret == FALSE)
2077   1                      printd("Failed to program Configration Data!!\r\n");
2078   1      
2079   1              return ret;
2080   1      } /* End of gconfig_StoreParameter() */
2081          
2082          /*
2083          * -----------------------------------------------------------------------------
2084           * Function Name: gconfig_Checksum
2085           * Purpose:
2086           * Params:
2087           * Returns:
2088           * Note:
2089           * ----------------------------------------------------------------------------
2090           */
2091          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length)
2092          {
2093   1              U32_T   cksum = 0;
2094   1              U32_T   i, count;
2095   1              U8_T*   inChar = &pBuf;
2096   1              U16_T*  point;
2097   1      
2098   1              count = length/2;
2099   1      
2100   1              for (i = 0; i < count; i++)
2101   1              {
2102   2                      point = pBuf;
2103   2                      cksum += *pBuf++;
2104   2                      if (point > pBuf)
2105   2                              (*inChar) = *inChar + 1;
2106   2      
2107   2                      if (!(i % 0x8000))
2108   2                      {
2109   3                              cksum = (cksum >> 16) + (cksum & 0xffff);
2110   3                              cksum += (cksum >> 16);
2111   3                              cksum &= 0xffff;
2112   3                      }
2113   2              }
2114   1                      
2115   1              if (length % 2)
2116   1                      cksum += (*pBuf & 0xff00);
2117   1      
2118   1              cksum = (cksum >> 16) + (cksum & 0xffff);
2119   1              cksum += (cksum >> 16);
2120   1              cksum &= 0xffff;
2121   1      
2122   1              return ((U16_T)cksum);
2123   1      } /* End of gconfig_Checksum() */
2124          
2125          /*
2126           * ----------------------------------------------------------------------------
2127           * Function Name: gconfig_DisplayConfigData
2128           * Purpose: 
2129           * Params:
2130           * Returns:
2131           * Note:
2132           * ----------------------------------------------------------------------------
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 36  

2133           */
2134          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfigData)
2135          {
2136   1              U8_T i, *pData;
2137   1              U8_T dat;
2138   1              U16_T val;
2139   1      
2140   1              if (GS2W_GetTaskState() == GS2W_STATE_IDLE)
2141   1              {
2142   2      #if (GS2W_ENABLE_FLOW_CONTROL != 0)
                              printd("  Flow Control Support\r\n");
              #else
2145   2                      printd("  Flow Control Not Support\r\n");
2146   2      #endif
2147   2                      printd("  Device Name: ");
2148   2                      for (i = 0; i < 16; i++)
2149   2                              printd ("%02bx ", pConfigData->DevName.DevName[i]);             
2150   2      
2151   2                      printd("\n\r");
2152   2                      printd("  WiFi MAC Addr: ");
2153   2                      for (i = 0; i < 6; i++)
2154   2                              printd ("%02bx ", macAddr.MacAddr[i]);          
2155   2              
2156   2                      printd("\n\r");
2157   2                      printd("  Network Setting: ");
2158   2                      printd ("%04x   ", pConfigData->Network);               
2159   2              
2160   2                      val = pConfigData->Network;
2161   2                      
2162   2                      if (val & GCONFIG_NETWORK_CLIENT) printd("  SC:Cli ");
2163   2                      else                                    printd("  SC:Ser ");
2164   2              
2165   2                      if (val & GCONFIG_NETWORK_DHCP_ENABLE) printd("DHCP:On ");
2166   2                      else                                    printd("DHCP:Off ");
2167   2              
2168   2                      if (val & GCONFIG_NETWORK_PROTO_UDP) printd("UDP:On ");
2169   2                      else                                    printd("UDP:Off ");
2170   2              
2171   2                      if (val & GCONFIG_NETWORK_PROTO_TCP) printd("TCP:On ");
2172   2                      else                                    printd("TCP:Off ");
2173   2              
2174   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_MCAST) printd("MC:On ");
2175   2                      else                                    printd("MC:Off ");
2176   2              
2177   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_BCAST) printd("BC:On ");
2178   2                      else                                    printd("BC:Off ");
2179   2              
2180   2                      printd("\n\r");
2181   2                      printd("  SIP:");               
2182   2              pData = (U8_T *)&pConfigData->ServerStaticIP;
2183   2                      for (i = 0; i < 4; i++)
2184   2                              printd ("%bu ", *(pData + i));          
2185   2      
2186   2                      printd(" Port: DA: %u", pConfigData->ServerDataPktListenPort);
2187   2                      printd(" MC: %u", pConfigData->ServerMulticastListenPort);
2188   2                      printd(" BC: %u", pConfigData->ServerBroadcastListenPort);
2189   2                      printd("\n\r");
2190   2      
2191   2                      printd("  Dest Host: %s",pConfigData->DestHostName);
2192   2                      printd(" Dest Port: %u", pConfigData->ClientDestPort);
2193   2                      printd("\n\r");
2194   2                      printd("  Netmask:");
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 37  

2195   2              pData = (U8_T *)&pConfigData->Netmask;
2196   2                      for (i = 0; i < 4; i++)
2197   2                              printd ("%bu ", *(pData + i));          
2198   2      
2199   2                      printd(" Gateway:");
2200   2              pData = (U8_T *)&pConfigData->Gateway;
2201   2                      for (i = 0; i < 4; i++)
2202   2                              printd ("%bu ", *(pData + i));          
2203   2      
2204   2                      printd(" DNS:");
2205   2              pData = (U8_T *)&pConfigData->Dns;
2206   2                      for (i = 0; i < 4; i++)
2207   2                              printd ("%bu ", *(pData + i));          
2208   2      
2209   2                      printd("\n\r");
2210   2                      printd("  Serial Port Setting: ");
2211   2              
2212   2                      dat = (pConfigData->SerialPort>>8) & 0xFF;
2213   2                      val = (dat >> 3) & 0x1F; 
2214   2                      if      (val == 0) printd ("BR:921600 ");
2215   2                      else if (val == 1) printd ("BR:115200 ");
2216   2                      else if (val == 2) printd ("BR:57600 ");
2217   2                      else if (val == 3) printd ("BR:38400 ");
2218   2                      else if (val == 4) printd ("BR:19200 ");
2219   2                      else if (val == 5) printd ("BR:9600 ");
2220   2                      else if (val == 6) printd ("BR:4800 ");
2221   2                      else if (val == 7) printd ("BR:2400 ");
2222   2                      else if (val == 8) printd ("BR:1200 ");
2223   2              
2224   2                      val = dat & 0x07; 
2225   2                      if (val == 0) printd ("DB:5 ");
2226   2                      else if (val == 1) printd ("DB:6 ");
2227   2                      else if (val == 2) printd ("DB:7 ");
2228   2                      else if (val == 3) printd ("DB:8 ");
2229   2              
2230   2                      dat = (pConfigData->SerialPort & 0x00FF);
2231   2              
2232   2                      val = (dat >> 5) & 0x07; 
2233   2                      if (val == 0) printd ("P:Odd ");
2234   2                      else if (val == 1) printd ("P:Even ");
2235   2                      else if (val == 2) printd ("P:None ");
2236   2              
2237   2                      val = (dat >> 2) & 0x07; 
2238   2                      if (val == 0) printd ("FC:Xon-Xoff ");
2239   2                      else if (val == 1) printd ("FC:Hardware ");
2240   2                      else if (val == 2) printd ("FC:None ");
2241   2              
2242   2                      val = dat & 0x03; 
2243   2                      if (val == 0) printd ("SB:1 ");
2244   2                      else if (val == 1) printd ("SB:1.5 ");
2245   2      
2246   2                      printd("\n\r");
2247   2                      printd("  Tx Time Interval:%u", pConfigData->EthernetTxTimer);
2248   2                      printd(" Username:%s Password:%s",pConfigData->Admin.Username, pConfigData->Admin.Passwd);
2249   2                      printd("\n\r");
2250   2                      
2251   2      #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
2252   2                      // Add for wifi configuration //
2253   2                      printd("  ---------- Wifi Configuration ---------- \r\n");
2254   2                      
2255   2                      // Wireless mode //             
2256   2                      i = pConfigData->WifiConfig.WifiBasebandMode;           
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 38  

2257   2                      printd("  Baseband: %s mode ", (i==1) ? "802.11b+g" : ((i==2) ? "802.11a" : "unsupport"));/* index:1/2 =
             - 802.11b+g/802.11a */
2258   2                      printd("\r\n");
2259   2                      
2260   2                      // Network mode //              
2261   2                      i = pConfigData->WifiConfig.WifiNetworkMode;            
2262   2                      printd("  Network: %s mode ", (i ? "Ad-hoc" : "Infrastructure"));/* index:1/0 = Ad-hoc/Infra */
2263   2                      printd("\r\n");
2264   2                      
2265   2                      // Channel //           
2266   2                      i = IO_WiFiSupportedCh[pConfigData->WifiConfig.WifiChannel];
2267   2                      printd("  Channel: ");
2268   2                      if (i)
2269   2                              printd("%bu ", i);
2270   2                      else
2271   2                              printd("auto ");
2272   2                      printd("\r\n");
2273   2      
2274   2                      // Service Area Name/SSID //
2275   2                      printd("  SSID: ");
2276   2                      for (i = 0; i < pConfigData->WifiConfig.WifiSsidLen; i ++)
2277   2                      {
2278   3                              printd("%c", pConfigData->WifiConfig.WifiSsid[i]);
2279   3                      }       
2280   2                      printd("\r\n");
2281   2                      
2282   2                      // Security Mode //
2283   2                      i = pConfigData->WifiConfig.WifiEncryptMode;
2284   2                      printd("  Security: ", i);
2285   2                      if (i == 0)
2286   2                              printd("no security ");
2287   2                      else if (i == 1)
2288   2                              printd("WEP64 bits");           
2289   2                      else if (i == 2)
2290   2                              printd("WEP128 bits");          
2291   2                      else if (i == 3)
2292   2                              printd("TKIP ");                
2293   2                      else
2294   2                              printd("AES ");
2295   2                      printd("\r\n");                                 
2296   2                      
2297   2                      // Key Length //
2298   2                      i = pConfigData->WifiConfig.WifiWepKeyLength;
2299   2                      printd("  WEP Key Length: %s bits", (i ? "128" : "64"));
2300   2                      printd("\r\n"); 
2301   2                                                      
2302   2                      // Key Index Select //
2303   2                      i = pConfigData->WifiConfig.WifiWepKeyIndex;
2304   2                      printd("  WEP Key Index: %bu", i);
2305   2                      printd("\r\n"); 
2306   2                                      
2307   2                      // 64/128 bits Key Index 1 ~ 4 //
2308   2                      for (val = 0; val < 4; val ++)
2309   2                      {
2310   3                              printd("  WEP64 bits Key index %u: 0x", val);
2311   3                              for (i = 0; i < 5; i ++)
2312   3                                              printd("%02bx", pConfigData->WifiConfig.WifiWep64Key[val][i]);          
2313   3                              printd("\r\n"); 
2314   3                      }
2315   2                      for (val = 0; val < 4; val ++)
2316   2                      {
2317   3                              printd("  WEP128 bits Key index %u: 0x", val);
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 39  

2318   3                              for (i = 0; i < 13; i ++)
2319   3                                      printd("%02bx", pConfigData->WifiConfig.WifiWep128Key[val][i]);         
2320   3                              printd("\r\n"); 
2321   3                      }
2322   2                                      
2323   2                      // AES/TKIP Passphrase //
2324   2                      dat = pConfigData->WifiConfig.WifiPreShareKeyLen;               
2325   2                      printd("  AES/TKIP Passphrase: ");
2326   2                      for (i = 0; i < dat; i ++)
2327   2                      {
2328   3                              printd("%c", pConfigData->WifiConfig.WifiPreShareKey[i]);
2329   3                      }
2330   2                      printd("\r\n"); 
2331   2                                      
2332   2                      // TX Data Rate //              
2333   2                      i = pConfigData->WifiConfig.WifiTxRate;
2334   2                      printd("  Tx Rate: ", i);
2335   2              switch(i)
2336   2              {
2337   3                  case 0:
2338   3                      printd("auto");
2339   3                      break;
2340   3                  case 1:
2341   3                      printd("1 Mbps");
2342   3                      break;
2343   3                  case 2:
2344   3                      printd("2 Mbps");
2345   3                      break;
2346   3                  case 3:
2347   3                      printd("5.5 Mbps");
2348   3                      break;
2349   3                  case 4:
2350   3                      printd("6 Mbps");
2351   3                      break;
2352   3                  case 5:
2353   3                      printd("9 Mbps");
2354   3                      break;
2355   3                  case 6:
2356   3                      printd("11 Mbps");
2357   3                      break;
2358   3                  case 7:
2359   3                      printd("12 Mbps");
2360   3                      break;
2361   3                  case 8:
2362   3                      printd("18 Mbps");
2363   3                      break;
2364   3                  case 9:
2365   3                      printd("24 Mbps");
2366   3                      break;
2367   3                  case 10:
2368   3                      printd("36 Mbps");
2369   3                      break;
2370   3                  case 11:
2371   3                      printd("48 Mbps");
2372   3                      break;
2373   3                  case 12:
2374   3                      printd("54 Mbps");
2375   3                      break;
2376   3              }
2377   2                      printd("\r\n");                                                                         
2378   2                      
2379   2                      // Transmission Power //
C51 COMPILER V9.05   GCONFIG                                                               04/11/2012 16:47:00 PAGE 40  

2380   2                      i = pConfigData->WifiConfig.WifiTxPowerLevel;
2381   2                      printd("  Transmission Power Level: ");
2382   2                      if (i == 0)
2383   2                              printd("100%% ");
2384   2                      else if (i == 1)
2385   2                              printd("50%% ");                
2386   2                      else if (i == 2)
2387   2                              printd("25%% ");                
2388   2                      else if (i == 3)
2389   2                              printd("12.5%% ");              
2390   2                      else
2391   2                              printd("6.25%% ");
2392   2                      printd("\r\n");         
2393   2                      
2394   2                      // GB Protection //
2395   2                      // Preamble //
2396   2                      i = pConfigData->WifiConfig.WifiPreambleMode;
2397   2                      printd("  Preamble Mode: ");
2398   2                      printd("%s", (i ? "auto" : "long"));
2399   2                      printd("\r\n");
2400   2                                      
2401   2                      // Beacon Interval //
2402   2                      val = pConfigData->WifiConfig.WifiBcnInterval;
2403   2                      printd("  Beacon Interval: %u ms\r\n", val);
2404   2                                      
2405   2                      // RTS Threshold //     
2406   2                      val = pConfigData->WifiConfig.WifiRtsThreshold;
2407   2                      printd("  RTS Threshold: %u \r\n", val);
2408   2                      
2409   2                      // Auto Power Control //
2410   2                      i = pConfigData->WifiConfig.WifiAutoPowerCtrl;
2411   2                      printd("  Auto Power Control: ");
2412   2                      printd("%s", (i ? "enable" : "disable"));
2413   2                      
2414   2                      // Protection Frame Type //
2415   2                      i = pConfigData->WifiConfig.WifiProtectFrame;
2416   2                      printd("  Protection Frame Type: ");
2417   2                      printd("%s", (i ? "Self-CTS" : "RTS"));         
2418   2      #endif                  
2419   2                      // End of power on information //               
2420   2                      printd("\n\r\n\r");
2421   2              }
2422   1      
2423   1      } /* End of gconfig_DisplayConfigData() */
2424          
2425          /* End of gconfig.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  12816    ----
   CONSTANT SIZE    =   1495    ----
   XDATA SIZE       =    649     149
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
